Index.PACKAGES = {"com.github.arturopala" : [], "com.github.arturopala.tree" : [{"name" : "com.github.arturopala.tree.LaxTree", "trait" : "com\/github\/arturopala\/tree\/LaxTree.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/arturopala\/tree\/LaxTree.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/arturopala\/tree\/LaxTree.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/arturopala\/tree\/LaxTree.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/arturopala\/tree\/LaxTree.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/arturopala\/tree\/LaxTree.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/arturopala\/tree\/LaxTree.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/arturopala\/tree\/LaxTree.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/arturopala\/tree\/LaxTree.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/arturopala\/tree\/LaxTree.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/arturopala\/tree\/LaxTree.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/arturopala\/tree\/LaxTree.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/arturopala\/tree\/LaxTree.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/arturopala\/tree\/LaxTree.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/arturopala\/tree\/LaxTree.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/arturopala\/tree\/LaxTree.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/arturopala\/tree\/LaxTree.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/arturopala\/tree\/LaxTree.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/arturopala\/tree\/LaxTree.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/arturopala\/tree\/LaxTree.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "removeValueLaxAt", "tail" : "(path: Iterable[K], toPathItem: (T) => K)(arg0: ClassTag[T1]): Tree[T]", "member" : "com.github.arturopala.tree.LaxTree.removeValueLaxAt", "link" : "com\/github\/arturopala\/tree\/LaxTree.html#removeValueLaxAt[K,T1>:T](path:Iterable[K],toPathItem:T=>K)(implicitevidence$26:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T]", "kind" : "abstract def"}, {"label" : "removeValueLaxAt", "tail" : "(path: Iterable[T1])(arg0: ClassTag[T1]): Tree[T]", "member" : "com.github.arturopala.tree.LaxTree.removeValueLaxAt", "link" : "com\/github\/arturopala\/tree\/LaxTree.html#removeValueLaxAt[T1>:T](path:Iterable[T1])(implicitevidence$25:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T]", "kind" : "abstract def"}, {"label" : "removeChildValueLax", "tail" : "(value: T1)(arg0: ClassTag[T1]): Tree[T]", "member" : "com.github.arturopala.tree.LaxTree.removeChildValueLax", "link" : "com\/github\/arturopala\/tree\/LaxTree.html#removeChildValueLax[T1>:T](value:T1)(implicitevidence$24:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T]", "kind" : "abstract def"}, {"label" : "modifyTreeLaxAt", "tail" : "(path: Iterable[K], modify: (Tree[T]) => Tree[T1], toPathItem: (T) => K)(arg0: ClassTag[T1]): Either[Tree[T], Tree[T1]]", "member" : "com.github.arturopala.tree.LaxTree.modifyTreeLaxAt", "link" : "com\/github\/arturopala\/tree\/LaxTree.html#modifyTreeLaxAt[K,T1>:T](path:Iterable[K],modify:com.github.arturopala.tree.Tree[T]=>com.github.arturopala.tree.Tree[T1],toPathItem:T=>K)(implicitevidence$23:scala.reflect.ClassTag[T1]):Either[com.github.arturopala.tree.Tree[T],com.github.arturopala.tree.Tree[T1]]", "kind" : "abstract def"}, {"label" : "modifyTreeLaxAt", "tail" : "(path: Iterable[T1], modify: (Tree[T]) => Tree[T1])(arg0: ClassTag[T1]): Either[Tree[T], Tree[T1]]", "member" : "com.github.arturopala.tree.LaxTree.modifyTreeLaxAt", "link" : "com\/github\/arturopala\/tree\/LaxTree.html#modifyTreeLaxAt[T1>:T](path:Iterable[T1],modify:com.github.arturopala.tree.Tree[T]=>com.github.arturopala.tree.Tree[T1])(implicitevidence$22:scala.reflect.ClassTag[T1]):Either[com.github.arturopala.tree.Tree[T],com.github.arturopala.tree.Tree[T1]]", "kind" : "abstract def"}, {"label" : "modifyChildLax", "tail" : "(value: T1, modify: (Tree[T]) => Tree[T1])(arg0: ClassTag[T1]): Tree[T1]", "member" : "com.github.arturopala.tree.LaxTree.modifyChildLax", "link" : "com\/github\/arturopala\/tree\/LaxTree.html#modifyChildLax[T1>:T](value:T1,modify:com.github.arturopala.tree.Tree[T]=>com.github.arturopala.tree.Tree[T1])(implicitevidence$21:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T1]", "kind" : "abstract def"}, {"label" : "modifyValueLaxAt", "tail" : "(path: Iterable[K], modify: (T) => T1, toPathItem: (T) => K)(arg0: ClassTag[T1]): Either[Tree[T], Tree[T1]]", "member" : "com.github.arturopala.tree.LaxTree.modifyValueLaxAt", "link" : "com\/github\/arturopala\/tree\/LaxTree.html#modifyValueLaxAt[K,T1>:T](path:Iterable[K],modify:T=>T1,toPathItem:T=>K)(implicitevidence$20:scala.reflect.ClassTag[T1]):Either[com.github.arturopala.tree.Tree[T],com.github.arturopala.tree.Tree[T1]]", "kind" : "abstract def"}, {"label" : "modifyValueLaxAt", "tail" : "(path: Iterable[T1], modify: (T) => T1)(arg0: ClassTag[T1]): Either[Tree[T], Tree[T1]]", "member" : "com.github.arturopala.tree.LaxTree.modifyValueLaxAt", "link" : "com\/github\/arturopala\/tree\/LaxTree.html#modifyValueLaxAt[T1>:T](path:Iterable[T1],modify:T=>T1)(implicitevidence$19:scala.reflect.ClassTag[T1]):Either[com.github.arturopala.tree.Tree[T],com.github.arturopala.tree.Tree[T1]]", "kind" : "abstract def"}, {"label" : "modifyChildValueLax", "tail" : "(value: T1, modify: (T) => T1)(arg0: ClassTag[T1]): Tree[T1]", "member" : "com.github.arturopala.tree.LaxTree.modifyChildValueLax", "link" : "com\/github\/arturopala\/tree\/LaxTree.html#modifyChildValueLax[T1>:T](value:T1,modify:T=>T1)(implicitevidence$18:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T1]", "kind" : "abstract def"}, {"label" : "updateTreeLaxAt", "tail" : "(path: Iterable[K], replacement: Tree[T1], toPathItem: (T) => K)(arg0: ClassTag[T1]): Either[Tree[T], Tree[T1]]", "member" : "com.github.arturopala.tree.LaxTree.updateTreeLaxAt", "link" : "com\/github\/arturopala\/tree\/LaxTree.html#updateTreeLaxAt[K,T1>:T](path:Iterable[K],replacement:com.github.arturopala.tree.Tree[T1],toPathItem:T=>K)(implicitevidence$17:scala.reflect.ClassTag[T1]):Either[com.github.arturopala.tree.Tree[T],com.github.arturopala.tree.Tree[T1]]", "kind" : "abstract def"}, {"label" : "updateTreeLaxAt", "tail" : "(path: Iterable[T1], replacement: Tree[T1])(arg0: ClassTag[T1]): Either[Tree[T], Tree[T1]]", "member" : "com.github.arturopala.tree.LaxTree.updateTreeLaxAt", "link" : "com\/github\/arturopala\/tree\/LaxTree.html#updateTreeLaxAt[T1>:T](path:Iterable[T1],replacement:com.github.arturopala.tree.Tree[T1])(implicitevidence$16:scala.reflect.ClassTag[T1]):Either[com.github.arturopala.tree.Tree[T],com.github.arturopala.tree.Tree[T1]]", "kind" : "abstract def"}, {"label" : "updateChildLax", "tail" : "(value: T1, replacement: Tree[T1])(arg0: ClassTag[T1]): Tree[T1]", "member" : "com.github.arturopala.tree.LaxTree.updateChildLax", "link" : "com\/github\/arturopala\/tree\/LaxTree.html#updateChildLax[T1>:T](value:T1,replacement:com.github.arturopala.tree.Tree[T1])(implicitevidence$15:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T1]", "kind" : "abstract def"}, {"label" : "updateValueLaxAt", "tail" : "(path: Iterable[K], replacement: T1, toPathItem: (T) => K)(arg0: ClassTag[T1]): Either[Tree[T], Tree[T1]]", "member" : "com.github.arturopala.tree.LaxTree.updateValueLaxAt", "link" : "com\/github\/arturopala\/tree\/LaxTree.html#updateValueLaxAt[K,T1>:T](path:Iterable[K],replacement:T1,toPathItem:T=>K)(implicitevidence$14:scala.reflect.ClassTag[T1]):Either[com.github.arturopala.tree.Tree[T],com.github.arturopala.tree.Tree[T1]]", "kind" : "abstract def"}, {"label" : "updateValueLaxAt", "tail" : "(path: Iterable[T1], replacement: T1)(arg0: ClassTag[T1]): Either[Tree[T], Tree[T1]]", "member" : "com.github.arturopala.tree.LaxTree.updateValueLaxAt", "link" : "com\/github\/arturopala\/tree\/LaxTree.html#updateValueLaxAt[T1>:T](path:Iterable[T1],replacement:T1)(implicitevidence$13:scala.reflect.ClassTag[T1]):Either[com.github.arturopala.tree.Tree[T],com.github.arturopala.tree.Tree[T1]]", "kind" : "abstract def"}, {"label" : "updateChildValueLax", "tail" : "(existingValue: T1, replacement: T1)(arg0: ClassTag[T1]): Tree[T1]", "member" : "com.github.arturopala.tree.LaxTree.updateChildValueLax", "link" : "com\/github\/arturopala\/tree\/LaxTree.html#updateChildValueLax[T1>:T](existingValue:T1,replacement:T1)(implicitevidence$12:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T1]", "kind" : "abstract def"}, {"label" : "insertChildrenLaxAt", "tail" : "(path: Iterable[K], children: Iterable[Tree[T1]], toPathItem: (T) => K, append: Boolean)(arg0: ClassTag[T1]): Either[Tree[T], Tree[T1]]", "member" : "com.github.arturopala.tree.LaxTree.insertChildrenLaxAt", "link" : "com\/github\/arturopala\/tree\/LaxTree.html#insertChildrenLaxAt[K,T1>:T](path:Iterable[K],children:Iterable[com.github.arturopala.tree.Tree[T1]],toPathItem:T=>K,append:Boolean)(implicitevidence$11:scala.reflect.ClassTag[T1]):Either[com.github.arturopala.tree.Tree[T],com.github.arturopala.tree.Tree[T1]]", "kind" : "abstract def"}, {"label" : "insertChildrenLaxAt", "tail" : "(path: Iterable[T1], children: Iterable[Tree[T1]], append: Boolean)(arg0: ClassTag[T1]): Tree[T1]", "member" : "com.github.arturopala.tree.LaxTree.insertChildrenLaxAt", "link" : "com\/github\/arturopala\/tree\/LaxTree.html#insertChildrenLaxAt[T1>:T](path:Iterable[T1],children:Iterable[com.github.arturopala.tree.Tree[T1]],append:Boolean)(implicitevidence$10:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T1]", "kind" : "abstract def"}, {"label" : "insertChildLaxAt", "tail" : "(path: Iterable[K], subtree: Tree[T1], toPathItem: (T) => K, append: Boolean)(arg0: ClassTag[T1]): Either[Tree[T], Tree[T1]]", "member" : "com.github.arturopala.tree.LaxTree.insertChildLaxAt", "link" : "com\/github\/arturopala\/tree\/LaxTree.html#insertChildLaxAt[K,T1>:T](path:Iterable[K],subtree:com.github.arturopala.tree.Tree[T1],toPathItem:T=>K,append:Boolean)(implicitevidence$9:scala.reflect.ClassTag[T1]):Either[com.github.arturopala.tree.Tree[T],com.github.arturopala.tree.Tree[T1]]", "kind" : "abstract def"}, {"label" : "insertChildLaxAt", "tail" : "(path: Iterable[T1], subtree: Tree[T1], append: Boolean)(arg0: ClassTag[T1]): Tree[T1]", "member" : "com.github.arturopala.tree.LaxTree.insertChildLaxAt", "link" : "com\/github\/arturopala\/tree\/LaxTree.html#insertChildLaxAt[T1>:T](path:Iterable[T1],subtree:com.github.arturopala.tree.Tree[T1],append:Boolean)(implicitevidence$8:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T1]", "kind" : "abstract def"}, {"label" : "insertChildrenLax", "tail" : "(children: Iterable[Tree[T1]], append: Boolean)(arg0: ClassTag[T1]): Tree[T1]", "member" : "com.github.arturopala.tree.LaxTree.insertChildrenLax", "link" : "com\/github\/arturopala\/tree\/LaxTree.html#insertChildrenLax[T1>:T](children:Iterable[com.github.arturopala.tree.Tree[T1]],append:Boolean)(implicitevidence$7:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T1]", "kind" : "abstract def"}, {"label" : "insertChildLax", "tail" : "(child: Tree[T1], append: Boolean)(arg0: ClassTag[T1]): Tree[T1]", "member" : "com.github.arturopala.tree.LaxTree.insertChildLax", "link" : "com\/github\/arturopala\/tree\/LaxTree.html#insertChildLax[T1>:T](child:com.github.arturopala.tree.Tree[T1],append:Boolean)(implicitevidence$6:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T1]", "kind" : "abstract def"}, {"label" : "insertLeafLaxAt", "tail" : "(path: Iterable[K], value: T1, toPathItem: (T) => K, append: Boolean)(arg0: ClassTag[T1]): Either[Tree[T], Tree[T1]]", "member" : "com.github.arturopala.tree.LaxTree.insertLeafLaxAt", "link" : "com\/github\/arturopala\/tree\/LaxTree.html#insertLeafLaxAt[K,T1>:T](path:Iterable[K],value:T1,toPathItem:T=>K,append:Boolean)(implicitevidence$5:scala.reflect.ClassTag[T1]):Either[com.github.arturopala.tree.Tree[T],com.github.arturopala.tree.Tree[T1]]", "kind" : "abstract def"}, {"label" : "insertLeafLaxAt", "tail" : "(path: Iterable[T1], value: T1, append: Boolean)(arg0: ClassTag[T1]): Tree[T1]", "member" : "com.github.arturopala.tree.LaxTree.insertLeafLaxAt", "link" : "com\/github\/arturopala\/tree\/LaxTree.html#insertLeafLaxAt[T1>:T](path:Iterable[T1],value:T1,append:Boolean)(implicitevidence$4:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T1]", "kind" : "abstract def"}, {"label" : "insertLeavesLax", "tail" : "(values: Iterable[T1], append: Boolean)(arg0: ClassTag[T1]): Tree[T1]", "member" : "com.github.arturopala.tree.LaxTree.insertLeavesLax", "link" : "com\/github\/arturopala\/tree\/LaxTree.html#insertLeavesLax[T1>:T](values:Iterable[T1],append:Boolean)(implicitevidence$3:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T1]", "kind" : "abstract def"}, {"label" : "insertLeafLax", "tail" : "(value: T1, append: Boolean)(arg0: ClassTag[T1]): Tree[T1]", "member" : "com.github.arturopala.tree.LaxTree.insertLeafLax", "link" : "com\/github\/arturopala\/tree\/LaxTree.html#insertLeafLax[T1>:T](value:T1,append:Boolean)(implicitevidence$2:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T1]", "kind" : "abstract def"}, {"label" : "flatMapLax", "tail" : "(f: (T) => Tree[K])(arg0: ClassTag[K]): Tree[K]", "member" : "com.github.arturopala.tree.LaxTree.flatMapLax", "link" : "com\/github\/arturopala\/tree\/LaxTree.html#flatMapLax[K](f:T=>com.github.arturopala.tree.Tree[K])(implicitevidence$1:scala.reflect.ClassTag[K]):com.github.arturopala.tree.Tree[K]", "kind" : "abstract def"}], "shortDescription" : "Extension methods providing lax modifications of the Tree."}, {"name" : "com.github.arturopala.tree.LaxTreeOps", "shortDescription" : "Lax extensions of the Tree API.", "object" : "com\/github\/arturopala\/tree\/LaxTreeOps$.html", "members_object" : [{"label" : "LaxTreeExt", "tail" : "", "member" : "com.github.arturopala.tree.LaxTreeOps.LaxTreeExt", "link" : "com\/github\/arturopala\/tree\/LaxTreeOps$.html#LaxTreeExt[T]extendsLaxTree[T]", "kind" : "implicit class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/arturopala\/tree\/LaxTreeOps$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/arturopala\/tree\/LaxTreeOps$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/arturopala\/tree\/LaxTreeOps$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/arturopala\/tree\/LaxTreeOps$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/arturopala\/tree\/LaxTreeOps$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/arturopala\/tree\/LaxTreeOps$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/arturopala\/tree\/LaxTreeOps$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/arturopala\/tree\/LaxTreeOps$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/arturopala\/tree\/LaxTreeOps$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/arturopala\/tree\/LaxTreeOps$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/arturopala\/tree\/LaxTreeOps$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/arturopala\/tree\/LaxTreeOps$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/arturopala\/tree\/LaxTreeOps$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/arturopala\/tree\/LaxTreeOps$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/arturopala\/tree\/LaxTreeOps$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/arturopala\/tree\/LaxTreeOps$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/arturopala\/tree\/LaxTreeOps$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/arturopala\/tree\/LaxTreeOps$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/arturopala\/tree\/LaxTreeOps$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.github.arturopala.tree.Tree", "object" : "com\/github\/arturopala\/tree\/Tree$.html", "members_object" : [{"label" : "preferInflated", "tail" : "(node: NodeTree[T], tree: ArrayTree[T1]): Boolean", "member" : "com.github.arturopala.tree.Tree.preferInflated", "link" : "com\/github\/arturopala\/tree\/Tree$.html#preferInflated[T,T1>:T](node:com.github.arturopala.tree.Tree.NodeTree[T],tree:com.github.arturopala.tree.Tree.ArrayTree[T1]):Boolean", "kind" : "final def"}, {"label" : "DEFLATE_SIZE_THRESHOLD", "tail" : ": Int", "member" : "com.github.arturopala.tree.Tree.DEFLATE_SIZE_THRESHOLD", "link" : "com\/github\/arturopala\/tree\/Tree$.html#DEFLATE_SIZE_THRESHOLD:Int", "kind" : "final val"}, {"label" : "inflate", "tail" : "(tree: Tree[T]): Tree[T]", "member" : "com.github.arturopala.tree.Tree.inflate", "link" : "com\/github\/arturopala\/tree\/Tree$.html#inflate[T](tree:com.github.arturopala.tree.Tree[T]):com.github.arturopala.tree.Tree[T]", "kind" : "final def"}, {"label" : "deflate", "tail" : "(tree: Tree[T])(arg0: ClassTag[T]): Tree[T]", "member" : "com.github.arturopala.tree.Tree.deflate", "link" : "com\/github\/arturopala\/tree\/Tree$.html#deflate[T](tree:com.github.arturopala.tree.Tree[T])(implicitevidence$2:scala.reflect.ClassTag[T]):com.github.arturopala.tree.Tree[T]", "kind" : "final def"}, {"label" : "ArrayTree", "tail" : "", "member" : "com.github.arturopala.tree.Tree.ArrayTree", "link" : "com\/github\/arturopala\/tree\/Tree$.html#ArrayTree[T]extendsArrayTreeLike[T]withTree[T]", "kind" : "final class"}, {"label" : "Bunch", "tail" : "", "member" : "com.github.arturopala.tree.Tree.Bunch", "link" : "com\/github\/arturopala\/tree\/Tree$.html#Bunch", "kind" : "object"}, {"label" : "Bunch", "tail" : "", "member" : "com.github.arturopala.tree.Tree.Bunch", "link" : "com\/github\/arturopala\/tree\/Tree$.html#Bunch[+T]extendsTree.NodeTree[T]", "kind" : "final class"}, {"label" : "Binary", "tail" : "", "member" : "com.github.arturopala.tree.Tree.Binary", "link" : "com\/github\/arturopala\/tree\/Tree$.html#Binary", "kind" : "object"}, {"label" : "Binary", "tail" : "", "member" : "com.github.arturopala.tree.Tree.Binary", "link" : "com\/github\/arturopala\/tree\/Tree$.html#Binary[+T]extendsTree.NodeTree[T]", "kind" : "final class"}, {"label" : "Unary", "tail" : "", "member" : "com.github.arturopala.tree.Tree.Unary", "link" : "com\/github\/arturopala\/tree\/Tree$.html#Unary", "kind" : "object"}, {"label" : "Unary", "tail" : "", "member" : "com.github.arturopala.tree.Tree.Unary", "link" : "com\/github\/arturopala\/tree\/Tree$.html#Unary[+T]extendsTree.NodeTree[T]", "kind" : "final class"}, {"label" : "Leaf", "tail" : "", "member" : "com.github.arturopala.tree.Tree.Leaf", "link" : "com\/github\/arturopala\/tree\/Tree$.html#Leaf", "kind" : "object"}, {"label" : "Leaf", "tail" : "", "member" : "com.github.arturopala.tree.Tree.Leaf", "link" : "com\/github\/arturopala\/tree\/Tree$.html#Leaf[+T]extendsTree.NodeTree[T]", "kind" : "final class"}, {"label" : "NodeTree", "tail" : "", "member" : "com.github.arturopala.tree.Tree.NodeTree", "link" : "com\/github\/arturopala\/tree\/Tree$.html#NodeTree[+T]extendsTree[T]withNodeTreeLike[T]", "kind" : "sealed trait"}, {"label" : "empty", "tail" : "", "member" : "com.github.arturopala.tree.Tree.empty", "link" : "com\/github\/arturopala\/tree\/Tree$.html#empty", "kind" : "object"}, {"label" : "unapply", "tail" : "(node: Tree[T]): Option[(T, Iterable[Tree[T]])]", "member" : "com.github.arturopala.tree.Tree.unapply", "link" : "com\/github\/arturopala\/tree\/Tree$.html#unapply[T](node:com.github.arturopala.tree.Tree[T]):Option[(T,Iterable[com.github.arturopala.tree.Tree[T]])]", "kind" : "final def"}, {"label" : "apply", "tail" : "(head: T, children: (Iterable[Tree[T]], Iterable[Tree[T]])): Tree[T]", "member" : "com.github.arturopala.tree.Tree.apply", "link" : "com\/github\/arturopala\/tree\/Tree$.html#apply[T](head:T,children:(Iterable[com.github.arturopala.tree.Tree[T]],Iterable[com.github.arturopala.tree.Tree[T]])):com.github.arturopala.tree.Tree[T]", "kind" : "final def"}, {"label" : "apply", "tail" : "(head: T, child1: Tree[T], child2: Tree[T], child3: Tree[T], otherChildren: Tree[T]*): Tree[T]", "member" : "com.github.arturopala.tree.Tree.apply", "link" : "com\/github\/arturopala\/tree\/Tree$.html#apply[T](head:T,child1:com.github.arturopala.tree.Tree[T],child2:com.github.arturopala.tree.Tree[T],child3:com.github.arturopala.tree.Tree[T],otherChildren:com.github.arturopala.tree.Tree[T]*):com.github.arturopala.tree.Tree[T]", "kind" : "final def"}, {"label" : "apply", "tail" : "(head: T, child: Tree[T], children: Iterable[Tree[T]]): Tree[T]", "member" : "com.github.arturopala.tree.Tree.apply", "link" : "com\/github\/arturopala\/tree\/Tree$.html#apply[T](head:T,child:com.github.arturopala.tree.Tree[T],children:Iterable[com.github.arturopala.tree.Tree[T]]):com.github.arturopala.tree.Tree[T]", "kind" : "final def"}, {"label" : "apply", "tail" : "(head: T, children: Iterable[Tree[T]], child: Tree[T]): Tree[T]", "member" : "com.github.arturopala.tree.Tree.apply", "link" : "com\/github\/arturopala\/tree\/Tree$.html#apply[T](head:T,children:Iterable[com.github.arturopala.tree.Tree[T]],child:com.github.arturopala.tree.Tree[T]):com.github.arturopala.tree.Tree[T]", "kind" : "final def"}, {"label" : "apply", "tail" : "(head: T, children: Iterable[Tree[T]]): Tree[T]", "member" : "com.github.arturopala.tree.Tree.apply", "link" : "com\/github\/arturopala\/tree\/Tree$.html#apply[T](head:T,children:Iterable[com.github.arturopala.tree.Tree[T]]):com.github.arturopala.tree.Tree[T]", "kind" : "final def"}, {"label" : "apply", "tail" : "(head: T, left: Tree[T], right: Tree[T]): Tree[T]", "member" : "com.github.arturopala.tree.Tree.apply", "link" : "com\/github\/arturopala\/tree\/Tree$.html#apply[T](head:T,left:com.github.arturopala.tree.Tree[T],right:com.github.arturopala.tree.Tree[T]):com.github.arturopala.tree.Tree[T]", "kind" : "final def"}, {"label" : "apply", "tail" : "(head: T, child: Tree[T]): Tree[T]", "member" : "com.github.arturopala.tree.Tree.apply", "link" : "com\/github\/arturopala\/tree\/Tree$.html#apply[T](head:T,child:com.github.arturopala.tree.Tree[T]):com.github.arturopala.tree.Tree[T]", "kind" : "final def"}, {"label" : "apply", "tail" : "(head: T): Tree[T]", "member" : "com.github.arturopala.tree.Tree.apply", "link" : "com\/github\/arturopala\/tree\/Tree$.html#apply[T](head:T):com.github.arturopala.tree.Tree[T]", "kind" : "final def"}, {"label" : "apply", "tail" : "(): Tree[T]", "member" : "com.github.arturopala.tree.Tree.apply", "link" : "com\/github\/arturopala\/tree\/Tree$.html#apply[T]():com.github.arturopala.tree.Tree[T]", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/arturopala\/tree\/Tree$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/arturopala\/tree\/Tree$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/arturopala\/tree\/Tree$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/arturopala\/tree\/Tree$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/arturopala\/tree\/Tree$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/arturopala\/tree\/Tree$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/arturopala\/tree\/Tree$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/arturopala\/tree\/Tree$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/arturopala\/tree\/Tree$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/arturopala\/tree\/Tree$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/arturopala\/tree\/Tree$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/arturopala\/tree\/Tree$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/arturopala\/tree\/Tree$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/arturopala\/tree\/Tree$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/arturopala\/tree\/Tree$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/arturopala\/tree\/Tree$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/arturopala\/tree\/Tree$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/arturopala\/tree\/Tree$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/arturopala\/tree\/Tree$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "com\/github\/arturopala\/tree\/Tree.html", "kind" : "trait", "members_trait" : [{"label" : "toString", "tail" : "(): String", "member" : "com.github.arturopala.tree.Tree.toString", "link" : "com\/github\/arturopala\/tree\/Tree.html#toString():String", "kind" : "def"}, {"label" : "hashcode", "tail" : ": Int", "member" : "com.github.arturopala.tree.Tree.hashcode", "link" : "com\/github\/arturopala\/tree\/Tree.html#hashcode:Int", "kind" : "final lazy val"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "com.github.arturopala.tree.Tree.hashCode", "link" : "com\/github\/arturopala\/tree\/Tree.html#hashCode():Int", "kind" : "final def"}, {"label" : "equals", "tail" : "(obj: Any): Boolean", "member" : "com.github.arturopala.tree.Tree.equals", "link" : "com\/github\/arturopala\/tree\/Tree.html#equals(obj:Any):Boolean", "kind" : "final def"}, {"label" : "removeChildrenAt", "tail" : "(path: Iterable[K], toPathItem: (T) => K)(arg0: ClassTag[T1]): Tree[T]", "member" : "com.github.arturopala.tree.TreeLike.removeChildrenAt", "link" : "com\/github\/arturopala\/tree\/Tree.html#removeChildrenAt[K,T1>:T](path:Iterable[K],toPathItem:T=>K)(implicitevidence$46:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T]", "kind" : "def"}, {"label" : "removeChildrenAt", "tail" : "(path: Iterable[T1])(arg0: ClassTag[T1]): Tree[T]", "member" : "com.github.arturopala.tree.TreeLike.removeChildrenAt", "link" : "com\/github\/arturopala\/tree\/Tree.html#removeChildrenAt[T1>:T](path:Iterable[T1])(implicitevidence$45:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T]", "kind" : "def"}, {"label" : "removeChildren", "tail" : "()(arg0: ClassTag[T1]): Tree[T]", "member" : "com.github.arturopala.tree.TreeLike.removeChildren", "link" : "com\/github\/arturopala\/tree\/Tree.html#removeChildren[T1>:T]()(implicitevidence$42:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T]", "kind" : "def"}, {"label" : "modifyChildrenAt", "tail" : "(path: Iterable[K], modify: (Iterable[Tree[T]]) => Iterable[Tree[T1]], toPathItem: (T) => K)(arg0: ClassTag[T1]): Either[Tree[T], Tree[T1]]", "member" : "com.github.arturopala.tree.TreeLike.modifyChildrenAt", "link" : "com\/github\/arturopala\/tree\/Tree.html#modifyChildrenAt[K,T1>:T](path:Iterable[K],modify:Iterable[com.github.arturopala.tree.Tree[T]]=>Iterable[com.github.arturopala.tree.Tree[T1]],toPathItem:T=>K)(implicitevidence$37:scala.reflect.ClassTag[T1]):Either[com.github.arturopala.tree.Tree[T],com.github.arturopala.tree.Tree[T1]]", "kind" : "def"}, {"label" : "modifyChildrenAt", "tail" : "(path: Iterable[T1], modify: (Iterable[Tree[T]]) => Iterable[Tree[T1]])(arg0: ClassTag[T1]): Either[Tree[T], Tree[T1]]", "member" : "com.github.arturopala.tree.TreeLike.modifyChildrenAt", "link" : "com\/github\/arturopala\/tree\/Tree.html#modifyChildrenAt[T1>:T](path:Iterable[T1],modify:Iterable[com.github.arturopala.tree.Tree[T]]=>Iterable[com.github.arturopala.tree.Tree[T1]])(implicitevidence$36:scala.reflect.ClassTag[T1]):Either[com.github.arturopala.tree.Tree[T],com.github.arturopala.tree.Tree[T1]]", "kind" : "def"}, {"label" : "insertBranches", "tail" : "(branches: Iterable[Iterable[T1]], append: Boolean)(arg0: ClassTag[T1]): Tree[T1]", "member" : "com.github.arturopala.tree.TreeLike.insertBranches", "link" : "com\/github\/arturopala\/tree\/Tree.html#insertBranches[T1>:T](branches:Iterable[Iterable[T1]],append:Boolean)(implicitevidence$21:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T1]", "kind" : "def"}, {"label" : "diff", "tail" : "(other: Tree[T1]): Tree[T1]", "member" : "com.github.arturopala.tree.TreeLike.diff", "link" : "com\/github\/arturopala\/tree\/Tree.html#diff[T1>:T](other:com.github.arturopala.tree.Tree[T1]):com.github.arturopala.tree.Tree[T1]", "kind" : "def"}, {"label" : "intersect", "tail" : "(other: Tree[T1]): Tree[T1]", "member" : "com.github.arturopala.tree.TreeLike.intersect", "link" : "com\/github\/arturopala\/tree\/Tree.html#intersect[T1>:T](other:com.github.arturopala.tree.Tree[T1]):com.github.arturopala.tree.Tree[T1]", "kind" : "def"}, {"label" : "union", "tail" : "(other: Tree[T1], keepDistinct: Boolean): Tree[T1]", "member" : "com.github.arturopala.tree.TreeLike.union", "link" : "com\/github\/arturopala\/tree\/Tree.html#union[T1>:T](other:com.github.arturopala.tree.Tree[T1],keepDistinct:Boolean):com.github.arturopala.tree.Tree[T1]", "kind" : "def"}, {"label" : "foldBranches", "tail" : "(initial: A, maxDepth: Int)(f: (A, Iterable[T]) => A): A", "member" : "com.github.arturopala.tree.TreeLike.foldBranches", "link" : "com\/github\/arturopala\/tree\/Tree.html#foldBranches[A](initial:A,maxDepth:Int)(f:(A,Iterable[T])=>A):A", "kind" : "def"}, {"label" : "foldTreesWithLevel", "tail" : "(initial: A, maxDepth: Int)(f: (A, Int, Tree[T]) => A): A", "member" : "com.github.arturopala.tree.TreeLike.foldTreesWithLevel", "link" : "com\/github\/arturopala\/tree\/Tree.html#foldTreesWithLevel[A](initial:A,maxDepth:Int)(f:(A,Int,com.github.arturopala.tree.Tree[T])=>A):A", "kind" : "def"}, {"label" : "foldTrees", "tail" : "(initial: A, maxDepth: Int)(f: (A, Tree[T]) => A): A", "member" : "com.github.arturopala.tree.TreeLike.foldTrees", "link" : "com\/github\/arturopala\/tree\/Tree.html#foldTrees[A](initial:A,maxDepth:Int)(f:(A,com.github.arturopala.tree.Tree[T])=>A):A", "kind" : "def"}, {"label" : "foldValuesWithLevel", "tail" : "(initial: A, maxDepth: Int)(f: (A, Int, T) => A): A", "member" : "com.github.arturopala.tree.TreeLike.foldValuesWithLevel", "link" : "com\/github\/arturopala\/tree\/Tree.html#foldValuesWithLevel[A](initial:A,maxDepth:Int)(f:(A,Int,T)=>A):A", "kind" : "def"}, {"label" : "foldValues", "tail" : "(initial: A, maxDepth: Int)(f: (A, T) => A): A", "member" : "com.github.arturopala.tree.TreeLike.foldValues", "link" : "com\/github\/arturopala\/tree\/Tree.html#foldValues[A](initial:A,maxDepth:Int)(f:(A,T)=>A):A", "kind" : "def"}, {"label" : "filterChildrenAt", "tail" : "(path: Iterable[K], pred: (Tree[T]) => Boolean, toPathItem: (T) => K)(arg0: ClassTag[T1]): Tree[T]", "member" : "com.github.arturopala.tree.TreeLike.filterChildrenAt", "link" : "com\/github\/arturopala\/tree\/Tree.html#filterChildrenAt[K,T1>:T](path:Iterable[K],pred:com.github.arturopala.tree.Tree[T]=>Boolean,toPathItem:T=>K)(implicitevidence$8:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T]", "kind" : "def"}, {"label" : "filterChildrenAt", "tail" : "(path: Iterable[T1], pred: (Tree[T]) => Boolean)(arg0: ClassTag[T1]): Tree[T]", "member" : "com.github.arturopala.tree.TreeLike.filterChildrenAt", "link" : "com\/github\/arturopala\/tree\/Tree.html#filterChildrenAt[T1>:T](path:Iterable[T1],pred:com.github.arturopala.tree.Tree[T]=>Boolean)(implicitevidence$7:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T]", "kind" : "def"}, {"label" : "filterChildren", "tail" : "(pred: (Tree[T]) => Boolean)(arg0: ClassTag[T1]): Tree[T]", "member" : "com.github.arturopala.tree.TreeLike.filterChildren", "link" : "com\/github\/arturopala\/tree\/Tree.html#filterChildren[T1>:T](pred:com.github.arturopala.tree.Tree[T]=>Boolean)(implicitevidence$6:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T]", "kind" : "def"}, {"label" : "filterBranches", "tail" : "(f: (Iterable[T]) => Boolean): Tree[T]", "member" : "com.github.arturopala.tree.TreeLike.filterBranches", "link" : "com\/github\/arturopala\/tree\/Tree.html#filterBranches(f:Iterable[T]=>Boolean):com.github.arturopala.tree.Tree[T]", "kind" : "def"}, {"label" : "filterTrees", "tail" : "(f: (Tree[T]) => Boolean, keepDistinct: Boolean): Tree[T]", "member" : "com.github.arturopala.tree.TreeLike.filterTrees", "link" : "com\/github\/arturopala\/tree\/Tree.html#filterTrees(f:com.github.arturopala.tree.Tree[T]=>Boolean,keepDistinct:Boolean):com.github.arturopala.tree.Tree[T]", "kind" : "def"}, {"label" : "filterValues", "tail" : "(f: (T) => Boolean, keepDistinct: Boolean): Tree[T]", "member" : "com.github.arturopala.tree.TreeLike.filterValues", "link" : "com\/github\/arturopala\/tree\/Tree.html#filterValues(f:T=>Boolean,keepDistinct:Boolean):com.github.arturopala.tree.Tree[T]", "kind" : "def"}, {"label" : "distinct", "tail" : "(): Tree[T]", "member" : "com.github.arturopala.tree.TreeLike.distinct", "link" : "com\/github\/arturopala\/tree\/Tree.html#distinct:com.github.arturopala.tree.Tree[T]", "kind" : "def"}, {"label" : "dropLeaves", "tail" : "(): Tree[T]", "member" : "com.github.arturopala.tree.TreeLike.dropLeaves", "link" : "com\/github\/arturopala\/tree\/Tree.html#dropLeaves:com.github.arturopala.tree.Tree[T]", "kind" : "def"}, {"label" : "trim", "tail" : "(height: Int): Tree[T]", "member" : "com.github.arturopala.tree.TreeLike.trim", "link" : "com\/github\/arturopala\/tree\/Tree.html#trim(height:Int):com.github.arturopala.tree.Tree[T]", "kind" : "def"}, {"label" : "mapChildren", "tail" : "(f: (Iterable[Tree[T]]) => Iterable[Tree[K]])(arg0: ClassTag[K]): Tree[K]", "member" : "com.github.arturopala.tree.TreeLike.mapChildren", "link" : "com\/github\/arturopala\/tree\/Tree.html#mapChildren[K](f:Iterable[com.github.arturopala.tree.Tree[T]]=>Iterable[com.github.arturopala.tree.Tree[K]])(implicitevidence$5:scala.reflect.ClassTag[K]):com.github.arturopala.tree.Tree[K]", "kind" : "def"}, {"label" : "mapBranches", "tail" : "(f: (Iterable[T]) => Iterable[K])(arg0: ClassTag[K]): Tree[K]", "member" : "com.github.arturopala.tree.TreeLike.mapBranches", "link" : "com\/github\/arturopala\/tree\/Tree.html#mapBranches[K](f:Iterable[T]=>Iterable[K])(implicitevidence$4:scala.reflect.ClassTag[K]):com.github.arturopala.tree.Tree[K]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (T) => Tree[K])(arg0: ClassTag[K]): Tree[K]", "member" : "com.github.arturopala.tree.TreeLike.flatMap", "link" : "com\/github\/arturopala\/tree\/Tree.html#flatMap[K](f:T=>com.github.arturopala.tree.Tree[K])(implicitevidence$3:scala.reflect.ClassTag[K]):com.github.arturopala.tree.Tree[K]", "kind" : "def"}, {"label" : "findPathsLeadingTo", "tail" : "(value: T1): Iterator[Iterable[T]]", "member" : "com.github.arturopala.tree.TreeLike.findPathsLeadingTo", "link" : "com\/github\/arturopala\/tree\/Tree.html#findPathsLeadingTo[T1>:T](value:T1):Iterator[Iterable[T]]", "kind" : "def"}, {"label" : "existsPath", "tail" : "(path: (Iterable[K]) => Boolean, toPathItem: (T) => K): Boolean", "member" : "com.github.arturopala.tree.TreeLike.existsPath", "link" : "com\/github\/arturopala\/tree\/Tree.html#existsPath[K](path:Iterable[K]=>Boolean,toPathItem:T=>K):Boolean", "kind" : "def"}, {"label" : "existsPath", "tail" : "(path: (Iterable[T]) => Boolean): Boolean", "member" : "com.github.arturopala.tree.TreeLike.existsPath", "link" : "com\/github\/arturopala\/tree\/Tree.html#existsPath(path:Iterable[T]=>Boolean):Boolean", "kind" : "def"}, {"label" : "existsBranch", "tail" : "(branch: (Iterable[K]) => Boolean, toPathItem: (T) => K): Boolean", "member" : "com.github.arturopala.tree.TreeLike.existsBranch", "link" : "com\/github\/arturopala\/tree\/Tree.html#existsBranch[K](branch:Iterable[K]=>Boolean,toPathItem:T=>K):Boolean", "kind" : "def"}, {"label" : "existsBranch", "tail" : "(branch: (Iterable[T]) => Boolean): Boolean", "member" : "com.github.arturopala.tree.TreeLike.existsBranch", "link" : "com\/github\/arturopala\/tree\/Tree.html#existsBranch(branch:Iterable[T]=>Boolean):Boolean", "kind" : "def"}, {"label" : "existsChild", "tail" : "(pred: (T) => Boolean): Boolean", "member" : "com.github.arturopala.tree.TreeLike.existsChild", "link" : "com\/github\/arturopala\/tree\/Tree.html#existsChild(pred:T=>Boolean):Boolean", "kind" : "def"}, {"label" : "existsValue", "tail" : "(pred: (T) => Boolean): Boolean", "member" : "com.github.arturopala.tree.TreeLike.existsValue", "link" : "com\/github\/arturopala\/tree\/Tree.html#existsValue(pred:T=>Boolean):Boolean", "kind" : "def"}, {"label" : "containsValue", "tail" : "(value: T1): Boolean", "member" : "com.github.arturopala.tree.TreeLike.containsValue", "link" : "com\/github\/arturopala\/tree\/Tree.html#containsValue[T1>:T](value:T1):Boolean", "kind" : "def"}, {"label" : "paths", "tail" : "(): Iterable[Iterable[T]]", "member" : "com.github.arturopala.tree.TreeLike.paths", "link" : "com\/github\/arturopala\/tree\/Tree.html#paths:Iterable[Iterable[T]]", "kind" : "def"}, {"label" : "lastChild", "tail" : "(): Option[Tree[T]]", "member" : "com.github.arturopala.tree.TreeLike.lastChild", "link" : "com\/github\/arturopala\/tree\/Tree.html#lastChild:Option[com.github.arturopala.tree.Tree[T]]", "kind" : "def"}, {"label" : "firstChild", "tail" : "(): Option[Tree[T]]", "member" : "com.github.arturopala.tree.TreeLike.firstChild", "link" : "com\/github\/arturopala\/tree\/Tree.html#firstChild:Option[com.github.arturopala.tree.Tree[T]]", "kind" : "def"}, {"label" : "lastChildValue", "tail" : "(): Option[T]", "member" : "com.github.arturopala.tree.TreeLike.lastChildValue", "link" : "com\/github\/arturopala\/tree\/Tree.html#lastChildValue:Option[T]", "kind" : "def"}, {"label" : "firstChildValue", "tail" : "(): Option[T]", "member" : "com.github.arturopala.tree.TreeLike.firstChildValue", "link" : "com\/github\/arturopala\/tree\/Tree.html#firstChildValue:Option[T]", "kind" : "def"}, {"label" : "nonEmpty", "tail" : "(): Boolean", "member" : "com.github.arturopala.tree.TreeLike.nonEmpty", "link" : "com\/github\/arturopala\/tree\/Tree.html#nonEmpty:Boolean", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/arturopala\/tree\/Tree.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/arturopala\/tree\/Tree.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/arturopala\/tree\/Tree.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/arturopala\/tree\/Tree.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/arturopala\/tree\/Tree.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/arturopala\/tree\/Tree.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/arturopala\/tree\/Tree.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/arturopala\/tree\/Tree.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/arturopala\/tree\/Tree.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/arturopala\/tree\/Tree.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/arturopala\/tree\/Tree.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/arturopala\/tree\/Tree.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/arturopala\/tree\/Tree.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/arturopala\/tree\/Tree.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/arturopala\/tree\/Tree.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/arturopala\/tree\/Tree.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "deflated", "tail" : "(tag: ClassTag[T1]): Tree[T1]", "member" : "com.github.arturopala.tree.Tree.deflated", "link" : "com\/github\/arturopala\/tree\/Tree.html#deflated[T1>:T](implicittag:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T1]", "kind" : "abstract def"}, {"label" : "inflated", "tail" : "(): Tree[T]", "member" : "com.github.arturopala.tree.Tree.inflated", "link" : "com\/github\/arturopala\/tree\/Tree.html#inflated:com.github.arturopala.tree.Tree[T]", "kind" : "abstract def"}, {"label" : "mkStringFromBranches", "tail" : "(show: (T) => String, valueSeparator: String, branchSeparator: String, branchStart: String, branchEnd: String, maxDepth: Int): String", "member" : "com.github.arturopala.tree.TreeLike.mkStringFromBranches", "link" : "com\/github\/arturopala\/tree\/Tree.html#mkStringFromBranches(show:T=>String,valueSeparator:String,branchSeparator:String,branchStart:String,branchEnd:String,maxDepth:Int):String", "kind" : "abstract def"}, {"label" : "toStructureArray", "tail" : "(): Array[Int]", "member" : "com.github.arturopala.tree.TreeLike.toStructureArray", "link" : "com\/github\/arturopala\/tree\/Tree.html#toStructureArray:Array[Int]", "kind" : "abstract def"}, {"label" : "toBuffers", "tail" : "(arg0: ClassTag[T1]): (IntBuffer, Buffer[T1])", "member" : "com.github.arturopala.tree.TreeLike.toBuffers", "link" : "com\/github\/arturopala\/tree\/Tree.html#toBuffers[T1>:T](implicitevidence$49:scala.reflect.ClassTag[T1]):(com.github.arturopala.bufferandslice.IntBuffer,com.github.arturopala.bufferandslice.Buffer[T1])", "kind" : "abstract def"}, {"label" : "toSlices", "tail" : "(arg0: ClassTag[T1]): (IntSlice, Slice[T1])", "member" : "com.github.arturopala.tree.TreeLike.toSlices", "link" : "com\/github\/arturopala\/tree\/Tree.html#toSlices[T1>:T](implicitevidence$48:scala.reflect.ClassTag[T1]):(com.github.arturopala.bufferandslice.IntSlice,com.github.arturopala.bufferandslice.Slice[T1])", "kind" : "abstract def"}, {"label" : "toArrays", "tail" : "(arg0: ClassTag[T1]): (Array[Int], Array[T1])", "member" : "com.github.arturopala.tree.TreeLike.toArrays", "link" : "com\/github\/arturopala\/tree\/Tree.html#toArrays[T1>:T](implicitevidence$47:scala.reflect.ClassTag[T1]):(Array[Int],Array[T1])", "kind" : "abstract def"}, {"label" : "toPairsIterator", "tail" : "(): Iterator[(Int, T)]", "member" : "com.github.arturopala.tree.TreeLike.toPairsIterator", "link" : "com\/github\/arturopala\/tree\/Tree.html#toPairsIterator:Iterator[(Int,T)]", "kind" : "abstract def"}, {"label" : "removeTreeAt", "tail" : "(path: Iterable[K], toPathItem: (T) => K)(arg0: ClassTag[T1]): Tree[T]", "member" : "com.github.arturopala.tree.TreeLike.removeTreeAt", "link" : "com\/github\/arturopala\/tree\/Tree.html#removeTreeAt[K,T1>:T](path:Iterable[K],toPathItem:T=>K)(implicitevidence$44:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T]", "kind" : "abstract def"}, {"label" : "removeTreeAt", "tail" : "(path: Iterable[T1])(arg0: ClassTag[T1]): Tree[T]", "member" : "com.github.arturopala.tree.TreeLike.removeTreeAt", "link" : "com\/github\/arturopala\/tree\/Tree.html#removeTreeAt[T1>:T](path:Iterable[T1])(implicitevidence$43:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T]", "kind" : "abstract def"}, {"label" : "removeChild", "tail" : "(value: T1)(arg0: ClassTag[T1]): Tree[T]", "member" : "com.github.arturopala.tree.TreeLike.removeChild", "link" : "com\/github\/arturopala\/tree\/Tree.html#removeChild[T1>:T](value:T1)(implicitevidence$41:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T]", "kind" : "abstract def"}, {"label" : "removeValueAt", "tail" : "(path: Iterable[K], toPathItem: (T) => K)(arg0: ClassTag[T1]): Tree[T]", "member" : "com.github.arturopala.tree.TreeLike.removeValueAt", "link" : "com\/github\/arturopala\/tree\/Tree.html#removeValueAt[K,T1>:T](path:Iterable[K],toPathItem:T=>K)(implicitevidence$40:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T]", "kind" : "abstract def"}, {"label" : "removeValueAt", "tail" : "(path: Iterable[T1])(arg0: ClassTag[T1]): Tree[T]", "member" : "com.github.arturopala.tree.TreeLike.removeValueAt", "link" : "com\/github\/arturopala\/tree\/Tree.html#removeValueAt[T1>:T](path:Iterable[T1])(implicitevidence$39:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T]", "kind" : "abstract def"}, {"label" : "removeChildValue", "tail" : "(value: T1)(arg0: ClassTag[T1]): Tree[T]", "member" : "com.github.arturopala.tree.TreeLike.removeChildValue", "link" : "com\/github\/arturopala\/tree\/Tree.html#removeChildValue[T1>:T](value:T1)(implicitevidence$38:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T]", "kind" : "abstract def"}, {"label" : "modifyTreeAt", "tail" : "(path: Iterable[K], modify: (Tree[T]) => Tree[T1], toPathItem: (T) => K)(arg0: ClassTag[T1]): Either[Tree[T], Tree[T1]]", "member" : "com.github.arturopala.tree.TreeLike.modifyTreeAt", "link" : "com\/github\/arturopala\/tree\/Tree.html#modifyTreeAt[K,T1>:T](path:Iterable[K],modify:com.github.arturopala.tree.Tree[T]=>com.github.arturopala.tree.Tree[T1],toPathItem:T=>K)(implicitevidence$35:scala.reflect.ClassTag[T1]):Either[com.github.arturopala.tree.Tree[T],com.github.arturopala.tree.Tree[T1]]", "kind" : "abstract def"}, {"label" : "modifyTreeAt", "tail" : "(path: Iterable[T1], modify: (Tree[T]) => Tree[T1])(arg0: ClassTag[T1]): Either[Tree[T], Tree[T1]]", "member" : "com.github.arturopala.tree.TreeLike.modifyTreeAt", "link" : "com\/github\/arturopala\/tree\/Tree.html#modifyTreeAt[T1>:T](path:Iterable[T1],modify:com.github.arturopala.tree.Tree[T]=>com.github.arturopala.tree.Tree[T1])(implicitevidence$34:scala.reflect.ClassTag[T1]):Either[com.github.arturopala.tree.Tree[T],com.github.arturopala.tree.Tree[T1]]", "kind" : "abstract def"}, {"label" : "modifyChild", "tail" : "(value: T1, modify: (Tree[T]) => Tree[T1])(arg0: ClassTag[T1]): Tree[T1]", "member" : "com.github.arturopala.tree.TreeLike.modifyChild", "link" : "com\/github\/arturopala\/tree\/Tree.html#modifyChild[T1>:T](value:T1,modify:com.github.arturopala.tree.Tree[T]=>com.github.arturopala.tree.Tree[T1])(implicitevidence$33:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T1]", "kind" : "abstract def"}, {"label" : "modifyValueAt", "tail" : "(path: Iterable[K], modify: (T) => T1, toPathItem: (T) => K)(arg0: ClassTag[T1]): Either[Tree[T], Tree[T1]]", "member" : "com.github.arturopala.tree.TreeLike.modifyValueAt", "link" : "com\/github\/arturopala\/tree\/Tree.html#modifyValueAt[K,T1>:T](path:Iterable[K],modify:T=>T1,toPathItem:T=>K)(implicitevidence$32:scala.reflect.ClassTag[T1]):Either[com.github.arturopala.tree.Tree[T],com.github.arturopala.tree.Tree[T1]]", "kind" : "abstract def"}, {"label" : "modifyValueAt", "tail" : "(path: Iterable[T1], modify: (T) => T1)(arg0: ClassTag[T1]): Either[Tree[T], Tree[T1]]", "member" : "com.github.arturopala.tree.TreeLike.modifyValueAt", "link" : "com\/github\/arturopala\/tree\/Tree.html#modifyValueAt[T1>:T](path:Iterable[T1],modify:T=>T1)(implicitevidence$31:scala.reflect.ClassTag[T1]):Either[com.github.arturopala.tree.Tree[T],com.github.arturopala.tree.Tree[T1]]", "kind" : "abstract def"}, {"label" : "modifyChildValue", "tail" : "(value: T1, modify: (T) => T1)(arg0: ClassTag[T1]): Tree[T1]", "member" : "com.github.arturopala.tree.TreeLike.modifyChildValue", "link" : "com\/github\/arturopala\/tree\/Tree.html#modifyChildValue[T1>:T](value:T1,modify:T=>T1)(implicitevidence$30:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T1]", "kind" : "abstract def"}, {"label" : "modifyHead", "tail" : "(modify: (T) => T1)(arg0: ClassTag[T1]): Tree[T1]", "member" : "com.github.arturopala.tree.TreeLike.modifyHead", "link" : "com\/github\/arturopala\/tree\/Tree.html#modifyHead[T1>:T](modify:T=>T1)(implicitevidence$29:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T1]", "kind" : "abstract def"}, {"label" : "updateTreeAt", "tail" : "(path: Iterable[K], replacement: Tree[T1], toPathItem: (T) => K)(arg0: ClassTag[T1]): Either[Tree[T], Tree[T1]]", "member" : "com.github.arturopala.tree.TreeLike.updateTreeAt", "link" : "com\/github\/arturopala\/tree\/Tree.html#updateTreeAt[K,T1>:T](path:Iterable[K],replacement:com.github.arturopala.tree.Tree[T1],toPathItem:T=>K)(implicitevidence$28:scala.reflect.ClassTag[T1]):Either[com.github.arturopala.tree.Tree[T],com.github.arturopala.tree.Tree[T1]]", "kind" : "abstract def"}, {"label" : "updateTreeAt", "tail" : "(path: Iterable[T1], replacement: Tree[T1])(arg0: ClassTag[T1]): Either[Tree[T], Tree[T1]]", "member" : "com.github.arturopala.tree.TreeLike.updateTreeAt", "link" : "com\/github\/arturopala\/tree\/Tree.html#updateTreeAt[T1>:T](path:Iterable[T1],replacement:com.github.arturopala.tree.Tree[T1])(implicitevidence$27:scala.reflect.ClassTag[T1]):Either[com.github.arturopala.tree.Tree[T],com.github.arturopala.tree.Tree[T1]]", "kind" : "abstract def"}, {"label" : "updateChild", "tail" : "(value: T1, replacement: Tree[T1])(arg0: ClassTag[T1]): Tree[T1]", "member" : "com.github.arturopala.tree.TreeLike.updateChild", "link" : "com\/github\/arturopala\/tree\/Tree.html#updateChild[T1>:T](value:T1,replacement:com.github.arturopala.tree.Tree[T1])(implicitevidence$26:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T1]", "kind" : "abstract def"}, {"label" : "updateValueAt", "tail" : "(path: Iterable[K], replacement: T1, toPathItem: (T) => K)(arg0: ClassTag[T1]): Either[Tree[T], Tree[T1]]", "member" : "com.github.arturopala.tree.TreeLike.updateValueAt", "link" : "com\/github\/arturopala\/tree\/Tree.html#updateValueAt[K,T1>:T](path:Iterable[K],replacement:T1,toPathItem:T=>K)(implicitevidence$25:scala.reflect.ClassTag[T1]):Either[com.github.arturopala.tree.Tree[T],com.github.arturopala.tree.Tree[T1]]", "kind" : "abstract def"}, {"label" : "updateValueAt", "tail" : "(path: Iterable[T1], replacement: T1)(arg0: ClassTag[T1]): Either[Tree[T], Tree[T1]]", "member" : "com.github.arturopala.tree.TreeLike.updateValueAt", "link" : "com\/github\/arturopala\/tree\/Tree.html#updateValueAt[T1>:T](path:Iterable[T1],replacement:T1)(implicitevidence$24:scala.reflect.ClassTag[T1]):Either[com.github.arturopala.tree.Tree[T],com.github.arturopala.tree.Tree[T1]]", "kind" : "abstract def"}, {"label" : "updateChildValue", "tail" : "(existingValue: T1, replacement: T1)(arg0: ClassTag[T1]): Tree[T1]", "member" : "com.github.arturopala.tree.TreeLike.updateChildValue", "link" : "com\/github\/arturopala\/tree\/Tree.html#updateChildValue[T1>:T](existingValue:T1,replacement:T1)(implicitevidence$23:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T1]", "kind" : "abstract def"}, {"label" : "updateHead", "tail" : "(replacement: T1)(arg0: ClassTag[T1]): Tree[T1]", "member" : "com.github.arturopala.tree.TreeLike.updateHead", "link" : "com\/github\/arturopala\/tree\/Tree.html#updateHead[T1>:T](replacement:T1)(implicitevidence$22:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T1]", "kind" : "abstract def"}, {"label" : "insertBranch", "tail" : "(branch: Iterable[T1], append: Boolean)(arg0: ClassTag[T1]): Tree[T1]", "member" : "com.github.arturopala.tree.TreeLike.insertBranch", "link" : "com\/github\/arturopala\/tree\/Tree.html#insertBranch[T1>:T](branch:Iterable[T1],append:Boolean)(implicitevidence$20:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T1]", "kind" : "abstract def"}, {"label" : "insertChildrenAt", "tail" : "(path: Iterable[K], children: Iterable[Tree[T1]], toPathItem: (T) => K, append: Boolean)(arg0: ClassTag[T1]): Either[Tree[T], Tree[T1]]", "member" : "com.github.arturopala.tree.TreeLike.insertChildrenAt", "link" : "com\/github\/arturopala\/tree\/Tree.html#insertChildrenAt[K,T1>:T](path:Iterable[K],children:Iterable[com.github.arturopala.tree.Tree[T1]],toPathItem:T=>K,append:Boolean)(implicitevidence$19:scala.reflect.ClassTag[T1]):Either[com.github.arturopala.tree.Tree[T],com.github.arturopala.tree.Tree[T1]]", "kind" : "abstract def"}, {"label" : "insertChildrenAt", "tail" : "(path: Iterable[T1], children: Iterable[Tree[T1]], append: Boolean)(arg0: ClassTag[T1]): Tree[T1]", "member" : "com.github.arturopala.tree.TreeLike.insertChildrenAt", "link" : "com\/github\/arturopala\/tree\/Tree.html#insertChildrenAt[T1>:T](path:Iterable[T1],children:Iterable[com.github.arturopala.tree.Tree[T1]],append:Boolean)(implicitevidence$18:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T1]", "kind" : "abstract def"}, {"label" : "insertChildAt", "tail" : "(path: Iterable[K], child: Tree[T1], toPathItem: (T) => K, append: Boolean)(arg0: ClassTag[T1]): Either[Tree[T], Tree[T1]]", "member" : "com.github.arturopala.tree.TreeLike.insertChildAt", "link" : "com\/github\/arturopala\/tree\/Tree.html#insertChildAt[K,T1>:T](path:Iterable[K],child:com.github.arturopala.tree.Tree[T1],toPathItem:T=>K,append:Boolean)(implicitevidence$17:scala.reflect.ClassTag[T1]):Either[com.github.arturopala.tree.Tree[T],com.github.arturopala.tree.Tree[T1]]", "kind" : "abstract def"}, {"label" : "insertChildAt", "tail" : "(path: Iterable[T1], child: Tree[T1], append: Boolean)(arg0: ClassTag[T1]): Tree[T1]", "member" : "com.github.arturopala.tree.TreeLike.insertChildAt", "link" : "com\/github\/arturopala\/tree\/Tree.html#insertChildAt[T1>:T](path:Iterable[T1],child:com.github.arturopala.tree.Tree[T1],append:Boolean)(implicitevidence$16:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T1]", "kind" : "abstract def"}, {"label" : "insertChildren", "tail" : "(children: Iterable[Tree[T1]], append: Boolean)(arg0: ClassTag[T1]): Tree[T1]", "member" : "com.github.arturopala.tree.TreeLike.insertChildren", "link" : "com\/github\/arturopala\/tree\/Tree.html#insertChildren[T1>:T](children:Iterable[com.github.arturopala.tree.Tree[T1]],append:Boolean)(implicitevidence$15:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T1]", "kind" : "abstract def"}, {"label" : "insertChild", "tail" : "(child: Tree[T1], append: Boolean)(arg0: ClassTag[T1]): Tree[T1]", "member" : "com.github.arturopala.tree.TreeLike.insertChild", "link" : "com\/github\/arturopala\/tree\/Tree.html#insertChild[T1>:T](child:com.github.arturopala.tree.Tree[T1],append:Boolean)(implicitevidence$14:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T1]", "kind" : "abstract def"}, {"label" : "insertLeafAt", "tail" : "(path: Iterable[K], value: T1, toPathItem: (T) => K, append: Boolean)(arg0: ClassTag[T1]): Either[Tree[T], Tree[T1]]", "member" : "com.github.arturopala.tree.TreeLike.insertLeafAt", "link" : "com\/github\/arturopala\/tree\/Tree.html#insertLeafAt[K,T1>:T](path:Iterable[K],value:T1,toPathItem:T=>K,append:Boolean)(implicitevidence$13:scala.reflect.ClassTag[T1]):Either[com.github.arturopala.tree.Tree[T],com.github.arturopala.tree.Tree[T1]]", "kind" : "abstract def"}, {"label" : "insertLeafAt", "tail" : "(path: Iterable[T1], value: T1, append: Boolean)(arg0: ClassTag[T1]): Tree[T1]", "member" : "com.github.arturopala.tree.TreeLike.insertLeafAt", "link" : "com\/github\/arturopala\/tree\/Tree.html#insertLeafAt[T1>:T](path:Iterable[T1],value:T1,append:Boolean)(implicitevidence$12:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T1]", "kind" : "abstract def"}, {"label" : "insertLeaves", "tail" : "(values: Iterable[T1], append: Boolean)(arg0: ClassTag[T1]): Tree[T1]", "member" : "com.github.arturopala.tree.TreeLike.insertLeaves", "link" : "com\/github\/arturopala\/tree\/Tree.html#insertLeaves[T1>:T](values:Iterable[T1],append:Boolean)(implicitevidence$11:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T1]", "kind" : "abstract def"}, {"label" : "insertLeaf", "tail" : "(value: T1, append: Boolean)(arg0: ClassTag[T1]): Tree[T1]", "member" : "com.github.arturopala.tree.TreeLike.insertLeaf", "link" : "com\/github\/arturopala\/tree\/Tree.html#insertLeaf[T1>:T](value:T1,append:Boolean)(implicitevidence$10:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T1]", "kind" : "abstract def"}, {"label" : "prepend", "tail" : "(value: T1)(arg0: ClassTag[T1]): Tree[T1]", "member" : "com.github.arturopala.tree.TreeLike.prepend", "link" : "com\/github\/arturopala\/tree\/Tree.html#prepend[T1>:T](value:T1)(implicitevidence$9:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T1]", "kind" : "abstract def"}, {"label" : "countBranches", "tail" : "(pred: (Iterable[T]) => Boolean): Int", "member" : "com.github.arturopala.tree.TreeLike.countBranches", "link" : "com\/github\/arturopala\/tree\/Tree.html#countBranches(pred:Iterable[T]=>Boolean):Int", "kind" : "abstract def"}, {"label" : "map", "tail" : "(f: (T) => K)(arg0: ClassTag[K]): Tree[K]", "member" : "com.github.arturopala.tree.TreeLike.map", "link" : "com\/github\/arturopala\/tree\/Tree.html#map[K](f:T=>K)(implicitevidence$2:scala.reflect.ClassTag[K]):com.github.arturopala.tree.Tree[K]", "kind" : "abstract def"}, {"label" : "selectTree", "tail" : "(path: Iterable[K], toPathItem: (T) => K, rightmost: Boolean): Option[Tree[T]]", "member" : "com.github.arturopala.tree.TreeLike.selectTree", "link" : "com\/github\/arturopala\/tree\/Tree.html#selectTree[K](path:Iterable[K],toPathItem:T=>K,rightmost:Boolean):Option[com.github.arturopala.tree.Tree[T]]", "kind" : "abstract def"}, {"label" : "selectTree", "tail" : "(path: Iterable[T1], rightmost: Boolean)(arg0: ClassTag[T1]): Option[Tree[T]]", "member" : "com.github.arturopala.tree.TreeLike.selectTree", "link" : "com\/github\/arturopala\/tree\/Tree.html#selectTree[T1>:T](path:Iterable[T1],rightmost:Boolean)(implicitevidence$1:scala.reflect.ClassTag[T1]):Option[com.github.arturopala.tree.Tree[T]]", "kind" : "abstract def"}, {"label" : "selectValue", "tail" : "(path: Iterable[K], toPathItem: (T) => K, rightmost: Boolean): Option[T]", "member" : "com.github.arturopala.tree.TreeLike.selectValue", "link" : "com\/github\/arturopala\/tree\/Tree.html#selectValue[K](path:Iterable[K],toPathItem:T=>K,rightmost:Boolean):Option[T]", "kind" : "abstract def"}, {"label" : "containsPath", "tail" : "(path: Iterable[K], toPathItem: (T) => K): Boolean", "member" : "com.github.arturopala.tree.TreeLike.containsPath", "link" : "com\/github\/arturopala\/tree\/Tree.html#containsPath[K](path:Iterable[K],toPathItem:T=>K):Boolean", "kind" : "abstract def"}, {"label" : "containsPath", "tail" : "(path: Iterable[T1]): Boolean", "member" : "com.github.arturopala.tree.TreeLike.containsPath", "link" : "com\/github\/arturopala\/tree\/Tree.html#containsPath[T1>:T](path:Iterable[T1]):Boolean", "kind" : "abstract def"}, {"label" : "containsBranch", "tail" : "(branch: Iterable[K], toPathItem: (T) => K): Boolean", "member" : "com.github.arturopala.tree.TreeLike.containsBranch", "link" : "com\/github\/arturopala\/tree\/Tree.html#containsBranch[K](branch:Iterable[K],toPathItem:T=>K):Boolean", "kind" : "abstract def"}, {"label" : "containsBranch", "tail" : "(branch: Iterable[T1]): Boolean", "member" : "com.github.arturopala.tree.TreeLike.containsBranch", "link" : "com\/github\/arturopala\/tree\/Tree.html#containsBranch[T1>:T](branch:Iterable[T1]):Boolean", "kind" : "abstract def"}, {"label" : "containsChild", "tail" : "(value: T1): Boolean", "member" : "com.github.arturopala.tree.TreeLike.containsChild", "link" : "com\/github\/arturopala\/tree\/Tree.html#containsChild[T1>:T](value:T1):Boolean", "kind" : "abstract def"}, {"label" : "branchesWithFilter", "tail" : "(pred: (Iterable[T]) => Boolean, maxDepth: Int): Iterable[Iterable[T]]", "member" : "com.github.arturopala.tree.TreeLike.branchesWithFilter", "link" : "com\/github\/arturopala\/tree\/Tree.html#branchesWithFilter(pred:Iterable[T]=>Boolean,maxDepth:Int):Iterable[Iterable[T]]", "kind" : "abstract def"}, {"label" : "branches", "tail" : "(): Iterable[Iterable[T]]", "member" : "com.github.arturopala.tree.TreeLike.branches", "link" : "com\/github\/arturopala\/tree\/Tree.html#branches:Iterable[Iterable[T]]", "kind" : "abstract def"}, {"label" : "treesAndLevelsWithFilter", "tail" : "(pred: (Tree[T]) => Boolean, mode: TraversingMode, maxDepth: Int): Iterable[(Int, Tree[T])]", "member" : "com.github.arturopala.tree.TreeLike.treesAndLevelsWithFilter", "link" : "com\/github\/arturopala\/tree\/Tree.html#treesAndLevelsWithFilter(pred:com.github.arturopala.tree.Tree[T]=>Boolean,mode:com.github.arturopala.tree.TreeOptions.TraversingMode,maxDepth:Int):Iterable[(Int,com.github.arturopala.tree.Tree[T])]", "kind" : "abstract def"}, {"label" : "treesWithFilter", "tail" : "(pred: (Tree[T]) => Boolean, mode: TraversingMode, maxDepth: Int): Iterable[Tree[T]]", "member" : "com.github.arturopala.tree.TreeLike.treesWithFilter", "link" : "com\/github\/arturopala\/tree\/Tree.html#treesWithFilter(pred:com.github.arturopala.tree.Tree[T]=>Boolean,mode:com.github.arturopala.tree.TreeOptions.TraversingMode,maxDepth:Int):Iterable[com.github.arturopala.tree.Tree[T]]", "kind" : "abstract def"}, {"label" : "trees", "tail" : "(mode: TraversingMode): Iterable[Tree[T]]", "member" : "com.github.arturopala.tree.TreeLike.trees", "link" : "com\/github\/arturopala\/tree\/Tree.html#trees(mode:com.github.arturopala.tree.TreeOptions.TraversingMode):Iterable[com.github.arturopala.tree.Tree[T]]", "kind" : "abstract def"}, {"label" : "children", "tail" : "(): Iterable[Tree[T]]", "member" : "com.github.arturopala.tree.TreeLike.children", "link" : "com\/github\/arturopala\/tree\/Tree.html#children:Iterable[com.github.arturopala.tree.Tree[T]]", "kind" : "abstract def"}, {"label" : "valuesAndLevelsWithFilter", "tail" : "(pred: (T) => Boolean, mode: TraversingMode, maxDepth: Int): Iterable[(Int, T, Boolean)]", "member" : "com.github.arturopala.tree.TreeLike.valuesAndLevelsWithFilter", "link" : "com\/github\/arturopala\/tree\/Tree.html#valuesAndLevelsWithFilter(pred:T=>Boolean,mode:com.github.arturopala.tree.TreeOptions.TraversingMode,maxDepth:Int):Iterable[(Int,T,Boolean)]", "kind" : "abstract def"}, {"label" : "valuesWithFilter", "tail" : "(pred: (T) => Boolean, mode: TraversingMode, maxDepth: Int): Iterable[T]", "member" : "com.github.arturopala.tree.TreeLike.valuesWithFilter", "link" : "com\/github\/arturopala\/tree\/Tree.html#valuesWithFilter(pred:T=>Boolean,mode:com.github.arturopala.tree.TreeOptions.TraversingMode,maxDepth:Int):Iterable[T]", "kind" : "abstract def"}, {"label" : "leaves", "tail" : "(): Iterable[T]", "member" : "com.github.arturopala.tree.TreeLike.leaves", "link" : "com\/github\/arturopala\/tree\/Tree.html#leaves:Iterable[T]", "kind" : "abstract def"}, {"label" : "values", "tail" : "(mode: TraversingMode): Iterable[T]", "member" : "com.github.arturopala.tree.TreeLike.values", "link" : "com\/github\/arturopala\/tree\/Tree.html#values(mode:com.github.arturopala.tree.TreeOptions.TraversingMode):Iterable[T]", "kind" : "abstract def"}, {"label" : "childrenValues", "tail" : "(): Iterable[T]", "member" : "com.github.arturopala.tree.TreeLike.childrenValues", "link" : "com\/github\/arturopala\/tree\/Tree.html#childrenValues:Iterable[T]", "kind" : "abstract def"}, {"label" : "headOption", "tail" : "(): Option[T]", "member" : "com.github.arturopala.tree.TreeLike.headOption", "link" : "com\/github\/arturopala\/tree\/Tree.html#headOption:Option[T]", "kind" : "abstract def"}, {"label" : "head", "tail" : "(): T", "member" : "com.github.arturopala.tree.TreeLike.head", "link" : "com\/github\/arturopala\/tree\/Tree.html#head:T", "kind" : "abstract def"}, {"label" : "childrenCount", "tail" : "(): Int", "member" : "com.github.arturopala.tree.TreeLike.childrenCount", "link" : "com\/github\/arturopala\/tree\/Tree.html#childrenCount:Int", "kind" : "abstract def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "com.github.arturopala.tree.TreeLike.isEmpty", "link" : "com\/github\/arturopala\/tree\/Tree.html#isEmpty:Boolean", "kind" : "abstract def"}, {"label" : "isLeaf", "tail" : "(): Boolean", "member" : "com.github.arturopala.tree.TreeLike.isLeaf", "link" : "com\/github\/arturopala\/tree\/Tree.html#isLeaf:Boolean", "kind" : "abstract def"}, {"label" : "height", "tail" : "(): Int", "member" : "com.github.arturopala.tree.TreeLike.height", "link" : "com\/github\/arturopala\/tree\/Tree.html#height:Int", "kind" : "abstract def"}, {"label" : "width", "tail" : "(): Int", "member" : "com.github.arturopala.tree.TreeLike.width", "link" : "com\/github\/arturopala\/tree\/Tree.html#width:Int", "kind" : "abstract def"}, {"label" : "size", "tail" : "(): Int", "member" : "com.github.arturopala.tree.TreeLike.size", "link" : "com\/github\/arturopala\/tree\/Tree.html#size:Int", "kind" : "abstract def"}], "shortDescription" : "A general-purpose, covariant, immutable, low overhead,efficient, monadic tree-like data structure with comprehensive API."}, {"name" : "com.github.arturopala.tree.TreeBuilder", "shortDescription" : "Common tree building helpers.", "object" : "com\/github\/arturopala\/tree\/TreeBuilder$.html", "members_object" : [{"label" : "TreeMergeStrategy", "tail" : "", "member" : "com.github.arturopala.tree.TreeBuilder.TreeMergeStrategy", "link" : "com\/github\/arturopala\/tree\/TreeBuilder$.html#TreeMergeStrategy", "kind" : "object"}, {"label" : "TreeMergeStrategy", "tail" : "", "member" : "com.github.arturopala.tree.TreeBuilder.TreeMergeStrategy", "link" : "com\/github\/arturopala\/tree\/TreeBuilder$.html#TreeMergeStrategyextendsAnyRef", "kind" : "trait"}, {"label" : "fromTreeSplit", "tail" : "(treeSplit: Seq[(Seq[Tree[T]], T, Seq[Tree[T]])]): Tree[T]", "member" : "com.github.arturopala.tree.TreeBuilder.fromTreeSplit", "link" : "com\/github\/arturopala\/tree\/TreeBuilder$.html#fromTreeSplit[T](treeSplit:Seq[(Seq[com.github.arturopala.tree.Tree[T]],T,Seq[com.github.arturopala.tree.Tree[T]])]):com.github.arturopala.tree.Tree[T]", "kind" : "final def"}, {"label" : "fromChildAndTreeSplit", "tail" : "(child: Tree[T], treeSplit: Seq[(Seq[Tree[T]], T, Seq[Tree[T]])]): Tree[T]", "member" : "com.github.arturopala.tree.TreeBuilder.fromChildAndTreeSplit", "link" : "com\/github\/arturopala\/tree\/TreeBuilder$.html#fromChildAndTreeSplit[T](child:com.github.arturopala.tree.Tree[T],treeSplit:Seq[(Seq[com.github.arturopala.tree.Tree[T]],T,Seq[com.github.arturopala.tree.Tree[T]])]):com.github.arturopala.tree.Tree[T]", "kind" : "final def"}, {"label" : "fromReverseTreeIterator", "tail" : "(iterator: Iterator[Tree[T]], lastChild: Tree[T])(arg0: ClassTag[T]): Tree[T]", "member" : "com.github.arturopala.tree.TreeBuilder.fromReverseTreeIterator", "link" : "com\/github\/arturopala\/tree\/TreeBuilder$.html#fromReverseTreeIterator[T](iterator:Iterator[com.github.arturopala.tree.Tree[T]],lastChild:com.github.arturopala.tree.Tree[T])(implicitevidence$11:scala.reflect.ClassTag[T]):com.github.arturopala.tree.Tree[T]", "kind" : "final def"}, {"label" : "fromTreeSequence", "tail" : "(head: T, seq: Seq[Tree[T]], lastChild: Tree[T])(arg0: ClassTag[T]): Tree[T]", "member" : "com.github.arturopala.tree.TreeBuilder.fromTreeSequence", "link" : "com\/github\/arturopala\/tree\/TreeBuilder$.html#fromTreeSequence[T](head:T,seq:Seq[com.github.arturopala.tree.Tree[T]],lastChild:com.github.arturopala.tree.Tree[T])(implicitevidence$10:scala.reflect.ClassTag[T]):com.github.arturopala.tree.Tree[T]", "kind" : "final def"}, {"label" : "fromTreeSequence", "tail" : "(seq: Seq[Tree[T]], lastChild: Tree[T])(arg0: ClassTag[T]): Tree[T]", "member" : "com.github.arturopala.tree.TreeBuilder.fromTreeSequence", "link" : "com\/github\/arturopala\/tree\/TreeBuilder$.html#fromTreeSequence[T](seq:Seq[com.github.arturopala.tree.Tree[T]],lastChild:com.github.arturopala.tree.Tree[T])(implicitevidence$9:scala.reflect.ClassTag[T]):com.github.arturopala.tree.Tree[T]", "kind" : "final def"}, {"label" : "fromTreeSequence", "tail" : "(seq: Seq[Tree[T]])(arg0: ClassTag[T]): Tree[T]", "member" : "com.github.arturopala.tree.TreeBuilder.fromTreeSequence", "link" : "com\/github\/arturopala\/tree\/TreeBuilder$.html#fromTreeSequence[T](seq:Seq[com.github.arturopala.tree.Tree[T]])(implicitevidence$8:scala.reflect.ClassTag[T]):com.github.arturopala.tree.Tree[T]", "kind" : "final def"}, {"label" : "linearTreeFromReverseValueIterator", "tail" : "(iterator: Iterator[T], child: Tree[T])(arg0: ClassTag[T]): Tree[T]", "member" : "com.github.arturopala.tree.TreeBuilder.linearTreeFromReverseValueIterator", "link" : "com\/github\/arturopala\/tree\/TreeBuilder$.html#linearTreeFromReverseValueIterator[T](iterator:Iterator[T],child:com.github.arturopala.tree.Tree[T])(implicitevidence$7:scala.reflect.ClassTag[T]):com.github.arturopala.tree.Tree[T]", "kind" : "final def"}, {"label" : "linearTreeFromSequence", "tail" : "(seq: Seq[T])(arg0: ClassTag[T]): Tree[T]", "member" : "com.github.arturopala.tree.TreeBuilder.linearTreeFromSequence", "link" : "com\/github\/arturopala\/tree\/TreeBuilder$.html#linearTreeFromSequence[T](seq:Seq[T])(implicitevidence$6:scala.reflect.ClassTag[T]):com.github.arturopala.tree.Tree[T]", "kind" : "final def"}, {"label" : "fromBuffers", "tail" : "(structureBuffer: IntBuffer, valuesBuffer: Buffer[T])(arg0: ClassTag[T]): List[Tree[T]]", "member" : "com.github.arturopala.tree.TreeBuilder.fromBuffers", "link" : "com\/github\/arturopala\/tree\/TreeBuilder$.html#fromBuffers[T](structureBuffer:com.github.arturopala.bufferandslice.IntBuffer,valuesBuffer:com.github.arturopala.bufferandslice.Buffer[T])(implicitevidence$5:scala.reflect.ClassTag[T]):List[com.github.arturopala.tree.Tree[T]]", "kind" : "final def"}, {"label" : "fromBuffersHead", "tail" : "(structureBuffer: IntBuffer, valuesBuffer: Buffer[T])(arg0: ClassTag[T]): Tree[T]", "member" : "com.github.arturopala.tree.TreeBuilder.fromBuffersHead", "link" : "com\/github\/arturopala\/tree\/TreeBuilder$.html#fromBuffersHead[T](structureBuffer:com.github.arturopala.bufferandslice.IntBuffer,valuesBuffer:com.github.arturopala.bufferandslice.Buffer[T])(implicitevidence$4:scala.reflect.ClassTag[T]):com.github.arturopala.tree.Tree[T]", "kind" : "final def"}, {"label" : "fromSizeAndTreePairsIterable", "tail" : "(iterable: Iterable[(Int, Tree[T])], strategy: TreeMergeStrategy): List[Tree[T]]", "member" : "com.github.arturopala.tree.TreeBuilder.fromSizeAndTreePairsIterable", "link" : "com\/github\/arturopala\/tree\/TreeBuilder$.html#fromSizeAndTreePairsIterable[T](iterable:Iterable[(Int,com.github.arturopala.tree.Tree[T])],strategy:com.github.arturopala.tree.TreeBuilder.TreeMergeStrategy):List[com.github.arturopala.tree.Tree[T]]", "kind" : "final def"}, {"label" : "fromSizeAndTreePairsIterator", "tail" : "(iterator: Iterator[(Int, Tree[T])], strategy: TreeMergeStrategy): List[Tree[T]]", "member" : "com.github.arturopala.tree.TreeBuilder.fromSizeAndTreePairsIterator", "link" : "com\/github\/arturopala\/tree\/TreeBuilder$.html#fromSizeAndTreePairsIterator[T](iterator:Iterator[(Int,com.github.arturopala.tree.Tree[T])],strategy:com.github.arturopala.tree.TreeBuilder.TreeMergeStrategy):List[com.github.arturopala.tree.Tree[T]]", "kind" : "final def"}, {"label" : "fromSizeAndTreePairsSequence", "tail" : "(sequence: Seq[(Int, Tree[T])], result: List[NodeTree[T]], strategy: TreeMergeStrategy): Seq[Tree[T]]", "member" : "com.github.arturopala.tree.TreeBuilder.fromSizeAndTreePairsSequence", "link" : "com\/github\/arturopala\/tree\/TreeBuilder$.html#fromSizeAndTreePairsSequence[T](sequence:Seq[(Int,com.github.arturopala.tree.Tree[T])],result:List[com.github.arturopala.tree.Tree.NodeTree[T]],strategy:com.github.arturopala.tree.TreeBuilder.TreeMergeStrategy):Seq[com.github.arturopala.tree.Tree[T]]", "kind" : "final def"}, {"label" : "fromArraysHead", "tail" : "(structure: Array[Int], values: Array[T])(arg0: ClassTag[T]): Tree[T]", "member" : "com.github.arturopala.tree.TreeBuilder.fromArraysHead", "link" : "com\/github\/arturopala\/tree\/TreeBuilder$.html#fromArraysHead[T](structure:Array[Int],values:Array[T])(implicitevidence$3:scala.reflect.ClassTag[T]):com.github.arturopala.tree.Tree[T]", "kind" : "final def"}, {"label" : "fromSlices", "tail" : "(structure: IntSlice, content: Slice[T])(arg0: ClassTag[T]): List[Tree[T]]", "member" : "com.github.arturopala.tree.TreeBuilder.fromSlices", "link" : "com\/github\/arturopala\/tree\/TreeBuilder$.html#fromSlices[T](structure:com.github.arturopala.bufferandslice.IntSlice,content:com.github.arturopala.bufferandslice.Slice[T])(implicitevidence$2:scala.reflect.ClassTag[T]):List[com.github.arturopala.tree.Tree[T]]", "kind" : "final def"}, {"label" : "fromArrays", "tail" : "(structure: Array[Int], values: Array[T])(arg0: ClassTag[T]): List[Tree[T]]", "member" : "com.github.arturopala.tree.TreeBuilder.fromArrays", "link" : "com\/github\/arturopala\/tree\/TreeBuilder$.html#fromArrays[T](structure:Array[Int],values:Array[T])(implicitevidence$1:scala.reflect.ClassTag[T]):List[com.github.arturopala.tree.Tree[T]]", "kind" : "final def"}, {"label" : "fromIterators", "tail" : "(structure: Iterator[Int], values: Iterator[T]): List[Tree[T]]", "member" : "com.github.arturopala.tree.TreeBuilder.fromIterators", "link" : "com\/github\/arturopala\/tree\/TreeBuilder$.html#fromIterators[T](structure:Iterator[Int],values:Iterator[T]):List[com.github.arturopala.tree.Tree[T]]", "kind" : "final def"}, {"label" : "fromIterables", "tail" : "(structure: Iterable[Int], values: Iterable[T]): List[Tree[T]]", "member" : "com.github.arturopala.tree.TreeBuilder.fromIterables", "link" : "com\/github\/arturopala\/tree\/TreeBuilder$.html#fromIterables[T](structure:Iterable[Int],values:Iterable[T]):List[com.github.arturopala.tree.Tree[T]]", "kind" : "final def"}, {"label" : "fromSizeAndValuePairsIterable", "tail" : "(iterable: Iterable[(Int, T)]): List[Tree[T]]", "member" : "com.github.arturopala.tree.TreeBuilder.fromSizeAndValuePairsIterable", "link" : "com\/github\/arturopala\/tree\/TreeBuilder$.html#fromSizeAndValuePairsIterable[T](iterable:Iterable[(Int,T)]):List[com.github.arturopala.tree.Tree[T]]", "kind" : "final def"}, {"label" : "fromSizeAndValuePairsIterator", "tail" : "(iterator: Iterator[(Int, T)]): List[Tree[T]]", "member" : "com.github.arturopala.tree.TreeBuilder.fromSizeAndValuePairsIterator", "link" : "com\/github\/arturopala\/tree\/TreeBuilder$.html#fromSizeAndValuePairsIterator[T](iterator:Iterator[(Int,T)]):List[com.github.arturopala.tree.Tree[T]]", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/arturopala\/tree\/TreeBuilder$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/arturopala\/tree\/TreeBuilder$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/arturopala\/tree\/TreeBuilder$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/arturopala\/tree\/TreeBuilder$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/arturopala\/tree\/TreeBuilder$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/arturopala\/tree\/TreeBuilder$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/arturopala\/tree\/TreeBuilder$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/arturopala\/tree\/TreeBuilder$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/arturopala\/tree\/TreeBuilder$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/arturopala\/tree\/TreeBuilder$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/arturopala\/tree\/TreeBuilder$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/arturopala\/tree\/TreeBuilder$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/arturopala\/tree\/TreeBuilder$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/arturopala\/tree\/TreeBuilder$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/arturopala\/tree\/TreeBuilder$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/arturopala\/tree\/TreeBuilder$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/arturopala\/tree\/TreeBuilder$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/arturopala\/tree\/TreeBuilder$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/arturopala\/tree\/TreeBuilder$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.github.arturopala.tree.TreeFormat", "shortDescription" : "Common functions to render a tree.", "object" : "com\/github\/arturopala\/tree\/TreeFormat$.html", "members_object" : [{"label" : "showAsPaths", "tail" : "(tree: TreeLike[T], separator: String): String", "member" : "com.github.arturopala.tree.TreeFormat.showAsPaths", "link" : "com\/github\/arturopala\/tree\/TreeFormat$.html#showAsPaths[T](tree:com.github.arturopala.tree.TreeLike[T],separator:String):String", "kind" : "final def"}, {"label" : "showAsGraph", "tail" : "(tree: TreeLike[T], separator: String): String", "member" : "com.github.arturopala.tree.TreeFormat.showAsGraph", "link" : "com\/github\/arturopala\/tree\/TreeFormat$.html#showAsGraph[T](tree:com.github.arturopala.tree.TreeLike[T],separator:String):String", "kind" : "final def"}, {"label" : "showAsArrays", "tail" : "(tree: TreeLike[T], separator: String): String", "member" : "com.github.arturopala.tree.TreeFormat.showAsArrays", "link" : "com\/github\/arturopala\/tree\/TreeFormat$.html#showAsArrays[T](tree:com.github.arturopala.tree.TreeLike[T],separator:String):String", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/arturopala\/tree\/TreeFormat$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/arturopala\/tree\/TreeFormat$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/arturopala\/tree\/TreeFormat$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/arturopala\/tree\/TreeFormat$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/arturopala\/tree\/TreeFormat$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/arturopala\/tree\/TreeFormat$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/arturopala\/tree\/TreeFormat$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/arturopala\/tree\/TreeFormat$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/arturopala\/tree\/TreeFormat$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/arturopala\/tree\/TreeFormat$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/arturopala\/tree\/TreeFormat$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/arturopala\/tree\/TreeFormat$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/arturopala\/tree\/TreeFormat$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/arturopala\/tree\/TreeFormat$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/arturopala\/tree\/TreeFormat$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/arturopala\/tree\/TreeFormat$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/arturopala\/tree\/TreeFormat$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/arturopala\/tree\/TreeFormat$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/arturopala\/tree\/TreeFormat$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.github.arturopala.tree.TreeLike", "object" : "com\/github\/arturopala\/tree\/TreeLike$.html", "members_object" : [{"label" : "TreeLikeExtensions", "tail" : "", "member" : "com.github.arturopala.tree.TreeLike.TreeLikeExtensions", "link" : "com\/github\/arturopala\/tree\/TreeLike$.html#TreeLikeExtensions[T]extendsAnyRef", "kind" : "implicit class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/arturopala\/tree\/TreeLike$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/arturopala\/tree\/TreeLike$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/arturopala\/tree\/TreeLike$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/arturopala\/tree\/TreeLike$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/arturopala\/tree\/TreeLike$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/arturopala\/tree\/TreeLike$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/arturopala\/tree\/TreeLike$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/arturopala\/tree\/TreeLike$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/arturopala\/tree\/TreeLike$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/arturopala\/tree\/TreeLike$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/arturopala\/tree\/TreeLike$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/arturopala\/tree\/TreeLike$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/arturopala\/tree\/TreeLike$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/arturopala\/tree\/TreeLike$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/arturopala\/tree\/TreeLike$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/arturopala\/tree\/TreeLike$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/arturopala\/tree\/TreeLike$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/arturopala\/tree\/TreeLike$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/arturopala\/tree\/TreeLike$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "com\/github\/arturopala\/tree\/TreeLike.html", "kind" : "trait", "members_trait" : [{"label" : "removeChildrenAt", "tail" : "(path: Iterable[K], toPathItem: (T) => K)(arg0: ClassTag[T1]): Tree[T]", "member" : "com.github.arturopala.tree.TreeLike.removeChildrenAt", "link" : "com\/github\/arturopala\/tree\/TreeLike.html#removeChildrenAt[K,T1>:T](path:Iterable[K],toPathItem:T=>K)(implicitevidence$46:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T]", "kind" : "def"}, {"label" : "removeChildrenAt", "tail" : "(path: Iterable[T1])(arg0: ClassTag[T1]): Tree[T]", "member" : "com.github.arturopala.tree.TreeLike.removeChildrenAt", "link" : "com\/github\/arturopala\/tree\/TreeLike.html#removeChildrenAt[T1>:T](path:Iterable[T1])(implicitevidence$45:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T]", "kind" : "def"}, {"label" : "removeChildren", "tail" : "()(arg0: ClassTag[T1]): Tree[T]", "member" : "com.github.arturopala.tree.TreeLike.removeChildren", "link" : "com\/github\/arturopala\/tree\/TreeLike.html#removeChildren[T1>:T]()(implicitevidence$42:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T]", "kind" : "def"}, {"label" : "modifyChildrenAt", "tail" : "(path: Iterable[K], modify: (Iterable[Tree[T]]) => Iterable[Tree[T1]], toPathItem: (T) => K)(arg0: ClassTag[T1]): Either[Tree[T], Tree[T1]]", "member" : "com.github.arturopala.tree.TreeLike.modifyChildrenAt", "link" : "com\/github\/arturopala\/tree\/TreeLike.html#modifyChildrenAt[K,T1>:T](path:Iterable[K],modify:Iterable[com.github.arturopala.tree.Tree[T]]=>Iterable[com.github.arturopala.tree.Tree[T1]],toPathItem:T=>K)(implicitevidence$37:scala.reflect.ClassTag[T1]):Either[com.github.arturopala.tree.Tree[T],com.github.arturopala.tree.Tree[T1]]", "kind" : "def"}, {"label" : "modifyChildrenAt", "tail" : "(path: Iterable[T1], modify: (Iterable[Tree[T]]) => Iterable[Tree[T1]])(arg0: ClassTag[T1]): Either[Tree[T], Tree[T1]]", "member" : "com.github.arturopala.tree.TreeLike.modifyChildrenAt", "link" : "com\/github\/arturopala\/tree\/TreeLike.html#modifyChildrenAt[T1>:T](path:Iterable[T1],modify:Iterable[com.github.arturopala.tree.Tree[T]]=>Iterable[com.github.arturopala.tree.Tree[T1]])(implicitevidence$36:scala.reflect.ClassTag[T1]):Either[com.github.arturopala.tree.Tree[T],com.github.arturopala.tree.Tree[T1]]", "kind" : "def"}, {"label" : "insertBranches", "tail" : "(branches: Iterable[Iterable[T1]], append: Boolean)(arg0: ClassTag[T1]): Tree[T1]", "member" : "com.github.arturopala.tree.TreeLike.insertBranches", "link" : "com\/github\/arturopala\/tree\/TreeLike.html#insertBranches[T1>:T](branches:Iterable[Iterable[T1]],append:Boolean)(implicitevidence$21:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T1]", "kind" : "def"}, {"label" : "diff", "tail" : "(other: Tree[T1]): Tree[T1]", "member" : "com.github.arturopala.tree.TreeLike.diff", "link" : "com\/github\/arturopala\/tree\/TreeLike.html#diff[T1>:T](other:com.github.arturopala.tree.Tree[T1]):com.github.arturopala.tree.Tree[T1]", "kind" : "def"}, {"label" : "intersect", "tail" : "(other: Tree[T1]): Tree[T1]", "member" : "com.github.arturopala.tree.TreeLike.intersect", "link" : "com\/github\/arturopala\/tree\/TreeLike.html#intersect[T1>:T](other:com.github.arturopala.tree.Tree[T1]):com.github.arturopala.tree.Tree[T1]", "kind" : "def"}, {"label" : "union", "tail" : "(other: Tree[T1], keepDistinct: Boolean): Tree[T1]", "member" : "com.github.arturopala.tree.TreeLike.union", "link" : "com\/github\/arturopala\/tree\/TreeLike.html#union[T1>:T](other:com.github.arturopala.tree.Tree[T1],keepDistinct:Boolean):com.github.arturopala.tree.Tree[T1]", "kind" : "def"}, {"label" : "foldBranches", "tail" : "(initial: A, maxDepth: Int)(f: (A, Iterable[T]) => A): A", "member" : "com.github.arturopala.tree.TreeLike.foldBranches", "link" : "com\/github\/arturopala\/tree\/TreeLike.html#foldBranches[A](initial:A,maxDepth:Int)(f:(A,Iterable[T])=>A):A", "kind" : "def"}, {"label" : "foldTreesWithLevel", "tail" : "(initial: A, maxDepth: Int)(f: (A, Int, Tree[T]) => A): A", "member" : "com.github.arturopala.tree.TreeLike.foldTreesWithLevel", "link" : "com\/github\/arturopala\/tree\/TreeLike.html#foldTreesWithLevel[A](initial:A,maxDepth:Int)(f:(A,Int,com.github.arturopala.tree.Tree[T])=>A):A", "kind" : "def"}, {"label" : "foldTrees", "tail" : "(initial: A, maxDepth: Int)(f: (A, Tree[T]) => A): A", "member" : "com.github.arturopala.tree.TreeLike.foldTrees", "link" : "com\/github\/arturopala\/tree\/TreeLike.html#foldTrees[A](initial:A,maxDepth:Int)(f:(A,com.github.arturopala.tree.Tree[T])=>A):A", "kind" : "def"}, {"label" : "foldValuesWithLevel", "tail" : "(initial: A, maxDepth: Int)(f: (A, Int, T) => A): A", "member" : "com.github.arturopala.tree.TreeLike.foldValuesWithLevel", "link" : "com\/github\/arturopala\/tree\/TreeLike.html#foldValuesWithLevel[A](initial:A,maxDepth:Int)(f:(A,Int,T)=>A):A", "kind" : "def"}, {"label" : "foldValues", "tail" : "(initial: A, maxDepth: Int)(f: (A, T) => A): A", "member" : "com.github.arturopala.tree.TreeLike.foldValues", "link" : "com\/github\/arturopala\/tree\/TreeLike.html#foldValues[A](initial:A,maxDepth:Int)(f:(A,T)=>A):A", "kind" : "def"}, {"label" : "filterChildrenAt", "tail" : "(path: Iterable[K], pred: (Tree[T]) => Boolean, toPathItem: (T) => K)(arg0: ClassTag[T1]): Tree[T]", "member" : "com.github.arturopala.tree.TreeLike.filterChildrenAt", "link" : "com\/github\/arturopala\/tree\/TreeLike.html#filterChildrenAt[K,T1>:T](path:Iterable[K],pred:com.github.arturopala.tree.Tree[T]=>Boolean,toPathItem:T=>K)(implicitevidence$8:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T]", "kind" : "def"}, {"label" : "filterChildrenAt", "tail" : "(path: Iterable[T1], pred: (Tree[T]) => Boolean)(arg0: ClassTag[T1]): Tree[T]", "member" : "com.github.arturopala.tree.TreeLike.filterChildrenAt", "link" : "com\/github\/arturopala\/tree\/TreeLike.html#filterChildrenAt[T1>:T](path:Iterable[T1],pred:com.github.arturopala.tree.Tree[T]=>Boolean)(implicitevidence$7:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T]", "kind" : "def"}, {"label" : "filterChildren", "tail" : "(pred: (Tree[T]) => Boolean)(arg0: ClassTag[T1]): Tree[T]", "member" : "com.github.arturopala.tree.TreeLike.filterChildren", "link" : "com\/github\/arturopala\/tree\/TreeLike.html#filterChildren[T1>:T](pred:com.github.arturopala.tree.Tree[T]=>Boolean)(implicitevidence$6:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T]", "kind" : "def"}, {"label" : "filterBranches", "tail" : "(f: (Iterable[T]) => Boolean): Tree[T]", "member" : "com.github.arturopala.tree.TreeLike.filterBranches", "link" : "com\/github\/arturopala\/tree\/TreeLike.html#filterBranches(f:Iterable[T]=>Boolean):com.github.arturopala.tree.Tree[T]", "kind" : "def"}, {"label" : "filterTrees", "tail" : "(f: (Tree[T]) => Boolean, keepDistinct: Boolean): Tree[T]", "member" : "com.github.arturopala.tree.TreeLike.filterTrees", "link" : "com\/github\/arturopala\/tree\/TreeLike.html#filterTrees(f:com.github.arturopala.tree.Tree[T]=>Boolean,keepDistinct:Boolean):com.github.arturopala.tree.Tree[T]", "kind" : "def"}, {"label" : "filterValues", "tail" : "(f: (T) => Boolean, keepDistinct: Boolean): Tree[T]", "member" : "com.github.arturopala.tree.TreeLike.filterValues", "link" : "com\/github\/arturopala\/tree\/TreeLike.html#filterValues(f:T=>Boolean,keepDistinct:Boolean):com.github.arturopala.tree.Tree[T]", "kind" : "def"}, {"label" : "distinct", "tail" : "(): Tree[T]", "member" : "com.github.arturopala.tree.TreeLike.distinct", "link" : "com\/github\/arturopala\/tree\/TreeLike.html#distinct:com.github.arturopala.tree.Tree[T]", "kind" : "def"}, {"label" : "dropLeaves", "tail" : "(): Tree[T]", "member" : "com.github.arturopala.tree.TreeLike.dropLeaves", "link" : "com\/github\/arturopala\/tree\/TreeLike.html#dropLeaves:com.github.arturopala.tree.Tree[T]", "kind" : "def"}, {"label" : "trim", "tail" : "(height: Int): Tree[T]", "member" : "com.github.arturopala.tree.TreeLike.trim", "link" : "com\/github\/arturopala\/tree\/TreeLike.html#trim(height:Int):com.github.arturopala.tree.Tree[T]", "kind" : "def"}, {"label" : "mapChildren", "tail" : "(f: (Iterable[Tree[T]]) => Iterable[Tree[K]])(arg0: ClassTag[K]): Tree[K]", "member" : "com.github.arturopala.tree.TreeLike.mapChildren", "link" : "com\/github\/arturopala\/tree\/TreeLike.html#mapChildren[K](f:Iterable[com.github.arturopala.tree.Tree[T]]=>Iterable[com.github.arturopala.tree.Tree[K]])(implicitevidence$5:scala.reflect.ClassTag[K]):com.github.arturopala.tree.Tree[K]", "kind" : "def"}, {"label" : "mapBranches", "tail" : "(f: (Iterable[T]) => Iterable[K])(arg0: ClassTag[K]): Tree[K]", "member" : "com.github.arturopala.tree.TreeLike.mapBranches", "link" : "com\/github\/arturopala\/tree\/TreeLike.html#mapBranches[K](f:Iterable[T]=>Iterable[K])(implicitevidence$4:scala.reflect.ClassTag[K]):com.github.arturopala.tree.Tree[K]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (T) => Tree[K])(arg0: ClassTag[K]): Tree[K]", "member" : "com.github.arturopala.tree.TreeLike.flatMap", "link" : "com\/github\/arturopala\/tree\/TreeLike.html#flatMap[K](f:T=>com.github.arturopala.tree.Tree[K])(implicitevidence$3:scala.reflect.ClassTag[K]):com.github.arturopala.tree.Tree[K]", "kind" : "def"}, {"label" : "findPathsLeadingTo", "tail" : "(value: T1): Iterator[Iterable[T]]", "member" : "com.github.arturopala.tree.TreeLike.findPathsLeadingTo", "link" : "com\/github\/arturopala\/tree\/TreeLike.html#findPathsLeadingTo[T1>:T](value:T1):Iterator[Iterable[T]]", "kind" : "def"}, {"label" : "existsPath", "tail" : "(path: (Iterable[K]) => Boolean, toPathItem: (T) => K): Boolean", "member" : "com.github.arturopala.tree.TreeLike.existsPath", "link" : "com\/github\/arturopala\/tree\/TreeLike.html#existsPath[K](path:Iterable[K]=>Boolean,toPathItem:T=>K):Boolean", "kind" : "def"}, {"label" : "existsPath", "tail" : "(path: (Iterable[T]) => Boolean): Boolean", "member" : "com.github.arturopala.tree.TreeLike.existsPath", "link" : "com\/github\/arturopala\/tree\/TreeLike.html#existsPath(path:Iterable[T]=>Boolean):Boolean", "kind" : "def"}, {"label" : "existsBranch", "tail" : "(branch: (Iterable[K]) => Boolean, toPathItem: (T) => K): Boolean", "member" : "com.github.arturopala.tree.TreeLike.existsBranch", "link" : "com\/github\/arturopala\/tree\/TreeLike.html#existsBranch[K](branch:Iterable[K]=>Boolean,toPathItem:T=>K):Boolean", "kind" : "def"}, {"label" : "existsBranch", "tail" : "(branch: (Iterable[T]) => Boolean): Boolean", "member" : "com.github.arturopala.tree.TreeLike.existsBranch", "link" : "com\/github\/arturopala\/tree\/TreeLike.html#existsBranch(branch:Iterable[T]=>Boolean):Boolean", "kind" : "def"}, {"label" : "existsChild", "tail" : "(pred: (T) => Boolean): Boolean", "member" : "com.github.arturopala.tree.TreeLike.existsChild", "link" : "com\/github\/arturopala\/tree\/TreeLike.html#existsChild(pred:T=>Boolean):Boolean", "kind" : "def"}, {"label" : "existsValue", "tail" : "(pred: (T) => Boolean): Boolean", "member" : "com.github.arturopala.tree.TreeLike.existsValue", "link" : "com\/github\/arturopala\/tree\/TreeLike.html#existsValue(pred:T=>Boolean):Boolean", "kind" : "def"}, {"label" : "containsValue", "tail" : "(value: T1): Boolean", "member" : "com.github.arturopala.tree.TreeLike.containsValue", "link" : "com\/github\/arturopala\/tree\/TreeLike.html#containsValue[T1>:T](value:T1):Boolean", "kind" : "def"}, {"label" : "paths", "tail" : "(): Iterable[Iterable[T]]", "member" : "com.github.arturopala.tree.TreeLike.paths", "link" : "com\/github\/arturopala\/tree\/TreeLike.html#paths:Iterable[Iterable[T]]", "kind" : "def"}, {"label" : "lastChild", "tail" : "(): Option[Tree[T]]", "member" : "com.github.arturopala.tree.TreeLike.lastChild", "link" : "com\/github\/arturopala\/tree\/TreeLike.html#lastChild:Option[com.github.arturopala.tree.Tree[T]]", "kind" : "def"}, {"label" : "firstChild", "tail" : "(): Option[Tree[T]]", "member" : "com.github.arturopala.tree.TreeLike.firstChild", "link" : "com\/github\/arturopala\/tree\/TreeLike.html#firstChild:Option[com.github.arturopala.tree.Tree[T]]", "kind" : "def"}, {"label" : "lastChildValue", "tail" : "(): Option[T]", "member" : "com.github.arturopala.tree.TreeLike.lastChildValue", "link" : "com\/github\/arturopala\/tree\/TreeLike.html#lastChildValue:Option[T]", "kind" : "def"}, {"label" : "firstChildValue", "tail" : "(): Option[T]", "member" : "com.github.arturopala.tree.TreeLike.firstChildValue", "link" : "com\/github\/arturopala\/tree\/TreeLike.html#firstChildValue:Option[T]", "kind" : "def"}, {"label" : "nonEmpty", "tail" : "(): Boolean", "member" : "com.github.arturopala.tree.TreeLike.nonEmpty", "link" : "com\/github\/arturopala\/tree\/TreeLike.html#nonEmpty:Boolean", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/arturopala\/tree\/TreeLike.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/arturopala\/tree\/TreeLike.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/arturopala\/tree\/TreeLike.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/arturopala\/tree\/TreeLike.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/arturopala\/tree\/TreeLike.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/arturopala\/tree\/TreeLike.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/arturopala\/tree\/TreeLike.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/arturopala\/tree\/TreeLike.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/arturopala\/tree\/TreeLike.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/arturopala\/tree\/TreeLike.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/arturopala\/tree\/TreeLike.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/arturopala\/tree\/TreeLike.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/arturopala\/tree\/TreeLike.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/arturopala\/tree\/TreeLike.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/arturopala\/tree\/TreeLike.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/arturopala\/tree\/TreeLike.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/arturopala\/tree\/TreeLike.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/arturopala\/tree\/TreeLike.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/arturopala\/tree\/TreeLike.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "mkStringFromBranches", "tail" : "(show: (T) => String, valueSeparator: String, branchSeparator: String, branchStart: String, branchEnd: String, maxDepth: Int): String", "member" : "com.github.arturopala.tree.TreeLike.mkStringFromBranches", "link" : "com\/github\/arturopala\/tree\/TreeLike.html#mkStringFromBranches(show:T=>String,valueSeparator:String,branchSeparator:String,branchStart:String,branchEnd:String,maxDepth:Int):String", "kind" : "abstract def"}, {"label" : "toStructureArray", "tail" : "(): Array[Int]", "member" : "com.github.arturopala.tree.TreeLike.toStructureArray", "link" : "com\/github\/arturopala\/tree\/TreeLike.html#toStructureArray:Array[Int]", "kind" : "abstract def"}, {"label" : "toBuffers", "tail" : "(arg0: ClassTag[T1]): (IntBuffer, Buffer[T1])", "member" : "com.github.arturopala.tree.TreeLike.toBuffers", "link" : "com\/github\/arturopala\/tree\/TreeLike.html#toBuffers[T1>:T](implicitevidence$49:scala.reflect.ClassTag[T1]):(com.github.arturopala.bufferandslice.IntBuffer,com.github.arturopala.bufferandslice.Buffer[T1])", "kind" : "abstract def"}, {"label" : "toSlices", "tail" : "(arg0: ClassTag[T1]): (IntSlice, Slice[T1])", "member" : "com.github.arturopala.tree.TreeLike.toSlices", "link" : "com\/github\/arturopala\/tree\/TreeLike.html#toSlices[T1>:T](implicitevidence$48:scala.reflect.ClassTag[T1]):(com.github.arturopala.bufferandslice.IntSlice,com.github.arturopala.bufferandslice.Slice[T1])", "kind" : "abstract def"}, {"label" : "toArrays", "tail" : "(arg0: ClassTag[T1]): (Array[Int], Array[T1])", "member" : "com.github.arturopala.tree.TreeLike.toArrays", "link" : "com\/github\/arturopala\/tree\/TreeLike.html#toArrays[T1>:T](implicitevidence$47:scala.reflect.ClassTag[T1]):(Array[Int],Array[T1])", "kind" : "abstract def"}, {"label" : "toPairsIterator", "tail" : "(): Iterator[(Int, T)]", "member" : "com.github.arturopala.tree.TreeLike.toPairsIterator", "link" : "com\/github\/arturopala\/tree\/TreeLike.html#toPairsIterator:Iterator[(Int,T)]", "kind" : "abstract def"}, {"label" : "removeTreeAt", "tail" : "(path: Iterable[K], toPathItem: (T) => K)(arg0: ClassTag[T1]): Tree[T]", "member" : "com.github.arturopala.tree.TreeLike.removeTreeAt", "link" : "com\/github\/arturopala\/tree\/TreeLike.html#removeTreeAt[K,T1>:T](path:Iterable[K],toPathItem:T=>K)(implicitevidence$44:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T]", "kind" : "abstract def"}, {"label" : "removeTreeAt", "tail" : "(path: Iterable[T1])(arg0: ClassTag[T1]): Tree[T]", "member" : "com.github.arturopala.tree.TreeLike.removeTreeAt", "link" : "com\/github\/arturopala\/tree\/TreeLike.html#removeTreeAt[T1>:T](path:Iterable[T1])(implicitevidence$43:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T]", "kind" : "abstract def"}, {"label" : "removeChild", "tail" : "(value: T1)(arg0: ClassTag[T1]): Tree[T]", "member" : "com.github.arturopala.tree.TreeLike.removeChild", "link" : "com\/github\/arturopala\/tree\/TreeLike.html#removeChild[T1>:T](value:T1)(implicitevidence$41:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T]", "kind" : "abstract def"}, {"label" : "removeValueAt", "tail" : "(path: Iterable[K], toPathItem: (T) => K)(arg0: ClassTag[T1]): Tree[T]", "member" : "com.github.arturopala.tree.TreeLike.removeValueAt", "link" : "com\/github\/arturopala\/tree\/TreeLike.html#removeValueAt[K,T1>:T](path:Iterable[K],toPathItem:T=>K)(implicitevidence$40:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T]", "kind" : "abstract def"}, {"label" : "removeValueAt", "tail" : "(path: Iterable[T1])(arg0: ClassTag[T1]): Tree[T]", "member" : "com.github.arturopala.tree.TreeLike.removeValueAt", "link" : "com\/github\/arturopala\/tree\/TreeLike.html#removeValueAt[T1>:T](path:Iterable[T1])(implicitevidence$39:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T]", "kind" : "abstract def"}, {"label" : "removeChildValue", "tail" : "(value: T1)(arg0: ClassTag[T1]): Tree[T]", "member" : "com.github.arturopala.tree.TreeLike.removeChildValue", "link" : "com\/github\/arturopala\/tree\/TreeLike.html#removeChildValue[T1>:T](value:T1)(implicitevidence$38:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T]", "kind" : "abstract def"}, {"label" : "modifyTreeAt", "tail" : "(path: Iterable[K], modify: (Tree[T]) => Tree[T1], toPathItem: (T) => K)(arg0: ClassTag[T1]): Either[Tree[T], Tree[T1]]", "member" : "com.github.arturopala.tree.TreeLike.modifyTreeAt", "link" : "com\/github\/arturopala\/tree\/TreeLike.html#modifyTreeAt[K,T1>:T](path:Iterable[K],modify:com.github.arturopala.tree.Tree[T]=>com.github.arturopala.tree.Tree[T1],toPathItem:T=>K)(implicitevidence$35:scala.reflect.ClassTag[T1]):Either[com.github.arturopala.tree.Tree[T],com.github.arturopala.tree.Tree[T1]]", "kind" : "abstract def"}, {"label" : "modifyTreeAt", "tail" : "(path: Iterable[T1], modify: (Tree[T]) => Tree[T1])(arg0: ClassTag[T1]): Either[Tree[T], Tree[T1]]", "member" : "com.github.arturopala.tree.TreeLike.modifyTreeAt", "link" : "com\/github\/arturopala\/tree\/TreeLike.html#modifyTreeAt[T1>:T](path:Iterable[T1],modify:com.github.arturopala.tree.Tree[T]=>com.github.arturopala.tree.Tree[T1])(implicitevidence$34:scala.reflect.ClassTag[T1]):Either[com.github.arturopala.tree.Tree[T],com.github.arturopala.tree.Tree[T1]]", "kind" : "abstract def"}, {"label" : "modifyChild", "tail" : "(value: T1, modify: (Tree[T]) => Tree[T1])(arg0: ClassTag[T1]): Tree[T1]", "member" : "com.github.arturopala.tree.TreeLike.modifyChild", "link" : "com\/github\/arturopala\/tree\/TreeLike.html#modifyChild[T1>:T](value:T1,modify:com.github.arturopala.tree.Tree[T]=>com.github.arturopala.tree.Tree[T1])(implicitevidence$33:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T1]", "kind" : "abstract def"}, {"label" : "modifyValueAt", "tail" : "(path: Iterable[K], modify: (T) => T1, toPathItem: (T) => K)(arg0: ClassTag[T1]): Either[Tree[T], Tree[T1]]", "member" : "com.github.arturopala.tree.TreeLike.modifyValueAt", "link" : "com\/github\/arturopala\/tree\/TreeLike.html#modifyValueAt[K,T1>:T](path:Iterable[K],modify:T=>T1,toPathItem:T=>K)(implicitevidence$32:scala.reflect.ClassTag[T1]):Either[com.github.arturopala.tree.Tree[T],com.github.arturopala.tree.Tree[T1]]", "kind" : "abstract def"}, {"label" : "modifyValueAt", "tail" : "(path: Iterable[T1], modify: (T) => T1)(arg0: ClassTag[T1]): Either[Tree[T], Tree[T1]]", "member" : "com.github.arturopala.tree.TreeLike.modifyValueAt", "link" : "com\/github\/arturopala\/tree\/TreeLike.html#modifyValueAt[T1>:T](path:Iterable[T1],modify:T=>T1)(implicitevidence$31:scala.reflect.ClassTag[T1]):Either[com.github.arturopala.tree.Tree[T],com.github.arturopala.tree.Tree[T1]]", "kind" : "abstract def"}, {"label" : "modifyChildValue", "tail" : "(value: T1, modify: (T) => T1)(arg0: ClassTag[T1]): Tree[T1]", "member" : "com.github.arturopala.tree.TreeLike.modifyChildValue", "link" : "com\/github\/arturopala\/tree\/TreeLike.html#modifyChildValue[T1>:T](value:T1,modify:T=>T1)(implicitevidence$30:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T1]", "kind" : "abstract def"}, {"label" : "modifyHead", "tail" : "(modify: (T) => T1)(arg0: ClassTag[T1]): Tree[T1]", "member" : "com.github.arturopala.tree.TreeLike.modifyHead", "link" : "com\/github\/arturopala\/tree\/TreeLike.html#modifyHead[T1>:T](modify:T=>T1)(implicitevidence$29:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T1]", "kind" : "abstract def"}, {"label" : "updateTreeAt", "tail" : "(path: Iterable[K], replacement: Tree[T1], toPathItem: (T) => K)(arg0: ClassTag[T1]): Either[Tree[T], Tree[T1]]", "member" : "com.github.arturopala.tree.TreeLike.updateTreeAt", "link" : "com\/github\/arturopala\/tree\/TreeLike.html#updateTreeAt[K,T1>:T](path:Iterable[K],replacement:com.github.arturopala.tree.Tree[T1],toPathItem:T=>K)(implicitevidence$28:scala.reflect.ClassTag[T1]):Either[com.github.arturopala.tree.Tree[T],com.github.arturopala.tree.Tree[T1]]", "kind" : "abstract def"}, {"label" : "updateTreeAt", "tail" : "(path: Iterable[T1], replacement: Tree[T1])(arg0: ClassTag[T1]): Either[Tree[T], Tree[T1]]", "member" : "com.github.arturopala.tree.TreeLike.updateTreeAt", "link" : "com\/github\/arturopala\/tree\/TreeLike.html#updateTreeAt[T1>:T](path:Iterable[T1],replacement:com.github.arturopala.tree.Tree[T1])(implicitevidence$27:scala.reflect.ClassTag[T1]):Either[com.github.arturopala.tree.Tree[T],com.github.arturopala.tree.Tree[T1]]", "kind" : "abstract def"}, {"label" : "updateChild", "tail" : "(value: T1, replacement: Tree[T1])(arg0: ClassTag[T1]): Tree[T1]", "member" : "com.github.arturopala.tree.TreeLike.updateChild", "link" : "com\/github\/arturopala\/tree\/TreeLike.html#updateChild[T1>:T](value:T1,replacement:com.github.arturopala.tree.Tree[T1])(implicitevidence$26:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T1]", "kind" : "abstract def"}, {"label" : "updateValueAt", "tail" : "(path: Iterable[K], replacement: T1, toPathItem: (T) => K)(arg0: ClassTag[T1]): Either[Tree[T], Tree[T1]]", "member" : "com.github.arturopala.tree.TreeLike.updateValueAt", "link" : "com\/github\/arturopala\/tree\/TreeLike.html#updateValueAt[K,T1>:T](path:Iterable[K],replacement:T1,toPathItem:T=>K)(implicitevidence$25:scala.reflect.ClassTag[T1]):Either[com.github.arturopala.tree.Tree[T],com.github.arturopala.tree.Tree[T1]]", "kind" : "abstract def"}, {"label" : "updateValueAt", "tail" : "(path: Iterable[T1], replacement: T1)(arg0: ClassTag[T1]): Either[Tree[T], Tree[T1]]", "member" : "com.github.arturopala.tree.TreeLike.updateValueAt", "link" : "com\/github\/arturopala\/tree\/TreeLike.html#updateValueAt[T1>:T](path:Iterable[T1],replacement:T1)(implicitevidence$24:scala.reflect.ClassTag[T1]):Either[com.github.arturopala.tree.Tree[T],com.github.arturopala.tree.Tree[T1]]", "kind" : "abstract def"}, {"label" : "updateChildValue", "tail" : "(existingValue: T1, replacement: T1)(arg0: ClassTag[T1]): Tree[T1]", "member" : "com.github.arturopala.tree.TreeLike.updateChildValue", "link" : "com\/github\/arturopala\/tree\/TreeLike.html#updateChildValue[T1>:T](existingValue:T1,replacement:T1)(implicitevidence$23:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T1]", "kind" : "abstract def"}, {"label" : "updateHead", "tail" : "(replacement: T1)(arg0: ClassTag[T1]): Tree[T1]", "member" : "com.github.arturopala.tree.TreeLike.updateHead", "link" : "com\/github\/arturopala\/tree\/TreeLike.html#updateHead[T1>:T](replacement:T1)(implicitevidence$22:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T1]", "kind" : "abstract def"}, {"label" : "insertBranch", "tail" : "(branch: Iterable[T1], append: Boolean)(arg0: ClassTag[T1]): Tree[T1]", "member" : "com.github.arturopala.tree.TreeLike.insertBranch", "link" : "com\/github\/arturopala\/tree\/TreeLike.html#insertBranch[T1>:T](branch:Iterable[T1],append:Boolean)(implicitevidence$20:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T1]", "kind" : "abstract def"}, {"label" : "insertChildrenAt", "tail" : "(path: Iterable[K], children: Iterable[Tree[T1]], toPathItem: (T) => K, append: Boolean)(arg0: ClassTag[T1]): Either[Tree[T], Tree[T1]]", "member" : "com.github.arturopala.tree.TreeLike.insertChildrenAt", "link" : "com\/github\/arturopala\/tree\/TreeLike.html#insertChildrenAt[K,T1>:T](path:Iterable[K],children:Iterable[com.github.arturopala.tree.Tree[T1]],toPathItem:T=>K,append:Boolean)(implicitevidence$19:scala.reflect.ClassTag[T1]):Either[com.github.arturopala.tree.Tree[T],com.github.arturopala.tree.Tree[T1]]", "kind" : "abstract def"}, {"label" : "insertChildrenAt", "tail" : "(path: Iterable[T1], children: Iterable[Tree[T1]], append: Boolean)(arg0: ClassTag[T1]): Tree[T1]", "member" : "com.github.arturopala.tree.TreeLike.insertChildrenAt", "link" : "com\/github\/arturopala\/tree\/TreeLike.html#insertChildrenAt[T1>:T](path:Iterable[T1],children:Iterable[com.github.arturopala.tree.Tree[T1]],append:Boolean)(implicitevidence$18:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T1]", "kind" : "abstract def"}, {"label" : "insertChildAt", "tail" : "(path: Iterable[K], child: Tree[T1], toPathItem: (T) => K, append: Boolean)(arg0: ClassTag[T1]): Either[Tree[T], Tree[T1]]", "member" : "com.github.arturopala.tree.TreeLike.insertChildAt", "link" : "com\/github\/arturopala\/tree\/TreeLike.html#insertChildAt[K,T1>:T](path:Iterable[K],child:com.github.arturopala.tree.Tree[T1],toPathItem:T=>K,append:Boolean)(implicitevidence$17:scala.reflect.ClassTag[T1]):Either[com.github.arturopala.tree.Tree[T],com.github.arturopala.tree.Tree[T1]]", "kind" : "abstract def"}, {"label" : "insertChildAt", "tail" : "(path: Iterable[T1], child: Tree[T1], append: Boolean)(arg0: ClassTag[T1]): Tree[T1]", "member" : "com.github.arturopala.tree.TreeLike.insertChildAt", "link" : "com\/github\/arturopala\/tree\/TreeLike.html#insertChildAt[T1>:T](path:Iterable[T1],child:com.github.arturopala.tree.Tree[T1],append:Boolean)(implicitevidence$16:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T1]", "kind" : "abstract def"}, {"label" : "insertChildren", "tail" : "(children: Iterable[Tree[T1]], append: Boolean)(arg0: ClassTag[T1]): Tree[T1]", "member" : "com.github.arturopala.tree.TreeLike.insertChildren", "link" : "com\/github\/arturopala\/tree\/TreeLike.html#insertChildren[T1>:T](children:Iterable[com.github.arturopala.tree.Tree[T1]],append:Boolean)(implicitevidence$15:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T1]", "kind" : "abstract def"}, {"label" : "insertChild", "tail" : "(child: Tree[T1], append: Boolean)(arg0: ClassTag[T1]): Tree[T1]", "member" : "com.github.arturopala.tree.TreeLike.insertChild", "link" : "com\/github\/arturopala\/tree\/TreeLike.html#insertChild[T1>:T](child:com.github.arturopala.tree.Tree[T1],append:Boolean)(implicitevidence$14:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T1]", "kind" : "abstract def"}, {"label" : "insertLeafAt", "tail" : "(path: Iterable[K], value: T1, toPathItem: (T) => K, append: Boolean)(arg0: ClassTag[T1]): Either[Tree[T], Tree[T1]]", "member" : "com.github.arturopala.tree.TreeLike.insertLeafAt", "link" : "com\/github\/arturopala\/tree\/TreeLike.html#insertLeafAt[K,T1>:T](path:Iterable[K],value:T1,toPathItem:T=>K,append:Boolean)(implicitevidence$13:scala.reflect.ClassTag[T1]):Either[com.github.arturopala.tree.Tree[T],com.github.arturopala.tree.Tree[T1]]", "kind" : "abstract def"}, {"label" : "insertLeafAt", "tail" : "(path: Iterable[T1], value: T1, append: Boolean)(arg0: ClassTag[T1]): Tree[T1]", "member" : "com.github.arturopala.tree.TreeLike.insertLeafAt", "link" : "com\/github\/arturopala\/tree\/TreeLike.html#insertLeafAt[T1>:T](path:Iterable[T1],value:T1,append:Boolean)(implicitevidence$12:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T1]", "kind" : "abstract def"}, {"label" : "insertLeaves", "tail" : "(values: Iterable[T1], append: Boolean)(arg0: ClassTag[T1]): Tree[T1]", "member" : "com.github.arturopala.tree.TreeLike.insertLeaves", "link" : "com\/github\/arturopala\/tree\/TreeLike.html#insertLeaves[T1>:T](values:Iterable[T1],append:Boolean)(implicitevidence$11:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T1]", "kind" : "abstract def"}, {"label" : "insertLeaf", "tail" : "(value: T1, append: Boolean)(arg0: ClassTag[T1]): Tree[T1]", "member" : "com.github.arturopala.tree.TreeLike.insertLeaf", "link" : "com\/github\/arturopala\/tree\/TreeLike.html#insertLeaf[T1>:T](value:T1,append:Boolean)(implicitevidence$10:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T1]", "kind" : "abstract def"}, {"label" : "prepend", "tail" : "(value: T1)(arg0: ClassTag[T1]): Tree[T1]", "member" : "com.github.arturopala.tree.TreeLike.prepend", "link" : "com\/github\/arturopala\/tree\/TreeLike.html#prepend[T1>:T](value:T1)(implicitevidence$9:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T1]", "kind" : "abstract def"}, {"label" : "countBranches", "tail" : "(pred: (Iterable[T]) => Boolean): Int", "member" : "com.github.arturopala.tree.TreeLike.countBranches", "link" : "com\/github\/arturopala\/tree\/TreeLike.html#countBranches(pred:Iterable[T]=>Boolean):Int", "kind" : "abstract def"}, {"label" : "map", "tail" : "(f: (T) => K)(arg0: ClassTag[K]): Tree[K]", "member" : "com.github.arturopala.tree.TreeLike.map", "link" : "com\/github\/arturopala\/tree\/TreeLike.html#map[K](f:T=>K)(implicitevidence$2:scala.reflect.ClassTag[K]):com.github.arturopala.tree.Tree[K]", "kind" : "abstract def"}, {"label" : "selectTree", "tail" : "(path: Iterable[K], toPathItem: (T) => K, rightmost: Boolean): Option[Tree[T]]", "member" : "com.github.arturopala.tree.TreeLike.selectTree", "link" : "com\/github\/arturopala\/tree\/TreeLike.html#selectTree[K](path:Iterable[K],toPathItem:T=>K,rightmost:Boolean):Option[com.github.arturopala.tree.Tree[T]]", "kind" : "abstract def"}, {"label" : "selectTree", "tail" : "(path: Iterable[T1], rightmost: Boolean)(arg0: ClassTag[T1]): Option[Tree[T]]", "member" : "com.github.arturopala.tree.TreeLike.selectTree", "link" : "com\/github\/arturopala\/tree\/TreeLike.html#selectTree[T1>:T](path:Iterable[T1],rightmost:Boolean)(implicitevidence$1:scala.reflect.ClassTag[T1]):Option[com.github.arturopala.tree.Tree[T]]", "kind" : "abstract def"}, {"label" : "selectValue", "tail" : "(path: Iterable[K], toPathItem: (T) => K, rightmost: Boolean): Option[T]", "member" : "com.github.arturopala.tree.TreeLike.selectValue", "link" : "com\/github\/arturopala\/tree\/TreeLike.html#selectValue[K](path:Iterable[K],toPathItem:T=>K,rightmost:Boolean):Option[T]", "kind" : "abstract def"}, {"label" : "containsPath", "tail" : "(path: Iterable[K], toPathItem: (T) => K): Boolean", "member" : "com.github.arturopala.tree.TreeLike.containsPath", "link" : "com\/github\/arturopala\/tree\/TreeLike.html#containsPath[K](path:Iterable[K],toPathItem:T=>K):Boolean", "kind" : "abstract def"}, {"label" : "containsPath", "tail" : "(path: Iterable[T1]): Boolean", "member" : "com.github.arturopala.tree.TreeLike.containsPath", "link" : "com\/github\/arturopala\/tree\/TreeLike.html#containsPath[T1>:T](path:Iterable[T1]):Boolean", "kind" : "abstract def"}, {"label" : "containsBranch", "tail" : "(branch: Iterable[K], toPathItem: (T) => K): Boolean", "member" : "com.github.arturopala.tree.TreeLike.containsBranch", "link" : "com\/github\/arturopala\/tree\/TreeLike.html#containsBranch[K](branch:Iterable[K],toPathItem:T=>K):Boolean", "kind" : "abstract def"}, {"label" : "containsBranch", "tail" : "(branch: Iterable[T1]): Boolean", "member" : "com.github.arturopala.tree.TreeLike.containsBranch", "link" : "com\/github\/arturopala\/tree\/TreeLike.html#containsBranch[T1>:T](branch:Iterable[T1]):Boolean", "kind" : "abstract def"}, {"label" : "containsChild", "tail" : "(value: T1): Boolean", "member" : "com.github.arturopala.tree.TreeLike.containsChild", "link" : "com\/github\/arturopala\/tree\/TreeLike.html#containsChild[T1>:T](value:T1):Boolean", "kind" : "abstract def"}, {"label" : "branchesWithFilter", "tail" : "(pred: (Iterable[T]) => Boolean, maxDepth: Int): Iterable[Iterable[T]]", "member" : "com.github.arturopala.tree.TreeLike.branchesWithFilter", "link" : "com\/github\/arturopala\/tree\/TreeLike.html#branchesWithFilter(pred:Iterable[T]=>Boolean,maxDepth:Int):Iterable[Iterable[T]]", "kind" : "abstract def"}, {"label" : "branches", "tail" : "(): Iterable[Iterable[T]]", "member" : "com.github.arturopala.tree.TreeLike.branches", "link" : "com\/github\/arturopala\/tree\/TreeLike.html#branches:Iterable[Iterable[T]]", "kind" : "abstract def"}, {"label" : "treesAndLevelsWithFilter", "tail" : "(pred: (Tree[T]) => Boolean, mode: TraversingMode, maxDepth: Int): Iterable[(Int, Tree[T])]", "member" : "com.github.arturopala.tree.TreeLike.treesAndLevelsWithFilter", "link" : "com\/github\/arturopala\/tree\/TreeLike.html#treesAndLevelsWithFilter(pred:com.github.arturopala.tree.Tree[T]=>Boolean,mode:com.github.arturopala.tree.TreeOptions.TraversingMode,maxDepth:Int):Iterable[(Int,com.github.arturopala.tree.Tree[T])]", "kind" : "abstract def"}, {"label" : "treesWithFilter", "tail" : "(pred: (Tree[T]) => Boolean, mode: TraversingMode, maxDepth: Int): Iterable[Tree[T]]", "member" : "com.github.arturopala.tree.TreeLike.treesWithFilter", "link" : "com\/github\/arturopala\/tree\/TreeLike.html#treesWithFilter(pred:com.github.arturopala.tree.Tree[T]=>Boolean,mode:com.github.arturopala.tree.TreeOptions.TraversingMode,maxDepth:Int):Iterable[com.github.arturopala.tree.Tree[T]]", "kind" : "abstract def"}, {"label" : "trees", "tail" : "(mode: TraversingMode): Iterable[Tree[T]]", "member" : "com.github.arturopala.tree.TreeLike.trees", "link" : "com\/github\/arturopala\/tree\/TreeLike.html#trees(mode:com.github.arturopala.tree.TreeOptions.TraversingMode):Iterable[com.github.arturopala.tree.Tree[T]]", "kind" : "abstract def"}, {"label" : "children", "tail" : "(): Iterable[Tree[T]]", "member" : "com.github.arturopala.tree.TreeLike.children", "link" : "com\/github\/arturopala\/tree\/TreeLike.html#children:Iterable[com.github.arturopala.tree.Tree[T]]", "kind" : "abstract def"}, {"label" : "valuesAndLevelsWithFilter", "tail" : "(pred: (T) => Boolean, mode: TraversingMode, maxDepth: Int): Iterable[(Int, T, Boolean)]", "member" : "com.github.arturopala.tree.TreeLike.valuesAndLevelsWithFilter", "link" : "com\/github\/arturopala\/tree\/TreeLike.html#valuesAndLevelsWithFilter(pred:T=>Boolean,mode:com.github.arturopala.tree.TreeOptions.TraversingMode,maxDepth:Int):Iterable[(Int,T,Boolean)]", "kind" : "abstract def"}, {"label" : "valuesWithFilter", "tail" : "(pred: (T) => Boolean, mode: TraversingMode, maxDepth: Int): Iterable[T]", "member" : "com.github.arturopala.tree.TreeLike.valuesWithFilter", "link" : "com\/github\/arturopala\/tree\/TreeLike.html#valuesWithFilter(pred:T=>Boolean,mode:com.github.arturopala.tree.TreeOptions.TraversingMode,maxDepth:Int):Iterable[T]", "kind" : "abstract def"}, {"label" : "leaves", "tail" : "(): Iterable[T]", "member" : "com.github.arturopala.tree.TreeLike.leaves", "link" : "com\/github\/arturopala\/tree\/TreeLike.html#leaves:Iterable[T]", "kind" : "abstract def"}, {"label" : "values", "tail" : "(mode: TraversingMode): Iterable[T]", "member" : "com.github.arturopala.tree.TreeLike.values", "link" : "com\/github\/arturopala\/tree\/TreeLike.html#values(mode:com.github.arturopala.tree.TreeOptions.TraversingMode):Iterable[T]", "kind" : "abstract def"}, {"label" : "childrenValues", "tail" : "(): Iterable[T]", "member" : "com.github.arturopala.tree.TreeLike.childrenValues", "link" : "com\/github\/arturopala\/tree\/TreeLike.html#childrenValues:Iterable[T]", "kind" : "abstract def"}, {"label" : "headOption", "tail" : "(): Option[T]", "member" : "com.github.arturopala.tree.TreeLike.headOption", "link" : "com\/github\/arturopala\/tree\/TreeLike.html#headOption:Option[T]", "kind" : "abstract def"}, {"label" : "head", "tail" : "(): T", "member" : "com.github.arturopala.tree.TreeLike.head", "link" : "com\/github\/arturopala\/tree\/TreeLike.html#head:T", "kind" : "abstract def"}, {"label" : "childrenCount", "tail" : "(): Int", "member" : "com.github.arturopala.tree.TreeLike.childrenCount", "link" : "com\/github\/arturopala\/tree\/TreeLike.html#childrenCount:Int", "kind" : "abstract def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "com.github.arturopala.tree.TreeLike.isEmpty", "link" : "com\/github\/arturopala\/tree\/TreeLike.html#isEmpty:Boolean", "kind" : "abstract def"}, {"label" : "isLeaf", "tail" : "(): Boolean", "member" : "com.github.arturopala.tree.TreeLike.isLeaf", "link" : "com\/github\/arturopala\/tree\/TreeLike.html#isLeaf:Boolean", "kind" : "abstract def"}, {"label" : "height", "tail" : "(): Int", "member" : "com.github.arturopala.tree.TreeLike.height", "link" : "com\/github\/arturopala\/tree\/TreeLike.html#height:Int", "kind" : "abstract def"}, {"label" : "width", "tail" : "(): Int", "member" : "com.github.arturopala.tree.TreeLike.width", "link" : "com\/github\/arturopala\/tree\/TreeLike.html#width:Int", "kind" : "abstract def"}, {"label" : "size", "tail" : "(): Int", "member" : "com.github.arturopala.tree.TreeLike.size", "link" : "com\/github\/arturopala\/tree\/TreeLike.html#size:Int", "kind" : "abstract def"}], "shortDescription" : "Common interface of Tree operations."}, {"name" : "com.github.arturopala.tree.TreeOptions", "shortDescription" : "Set of enums representing available processing options.", "object" : "com\/github\/arturopala\/tree\/TreeOptions$.html", "members_object" : [{"label" : "TraversingMode", "tail" : "", "member" : "com.github.arturopala.tree.TreeOptions.TraversingMode", "link" : "com\/github\/arturopala\/tree\/TreeOptions$.html#TraversingMode", "kind" : "object"}, {"label" : "TraversingMode", "tail" : "", "member" : "com.github.arturopala.tree.TreeOptions.TraversingMode", "link" : "com\/github\/arturopala\/tree\/TreeOptions$.html#TraversingModeextendsAnyRef", "kind" : "sealed trait"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/arturopala\/tree\/TreeOptions$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/arturopala\/tree\/TreeOptions$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/arturopala\/tree\/TreeOptions$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/arturopala\/tree\/TreeOptions$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/arturopala\/tree\/TreeOptions$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/arturopala\/tree\/TreeOptions$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/arturopala\/tree\/TreeOptions$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/arturopala\/tree\/TreeOptions$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/arturopala\/tree\/TreeOptions$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/arturopala\/tree\/TreeOptions$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/arturopala\/tree\/TreeOptions$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/arturopala\/tree\/TreeOptions$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/arturopala\/tree\/TreeOptions$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/arturopala\/tree\/TreeOptions$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/arturopala\/tree\/TreeOptions$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/arturopala\/tree\/TreeOptions$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/arturopala\/tree\/TreeOptions$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/arturopala\/tree\/TreeOptions$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/arturopala\/tree\/TreeOptions$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "com.github.arturopala.tree.internal" : [{"name" : "com.github.arturopala.tree.internal.ArrayTree", "shortDescription" : "Collection of high-level operations on the linear encoding of the tree.", "object" : "com\/github\/arturopala\/tree\/internal\/ArrayTree$.html", "members_object" : [{"label" : "removeTreeAt", "tail" : "(path: Iterable[K], target: ArrayTree[T], toPathItem: (T) => K)(arg0: ClassTag[T], arg1: ClassTag[T1]): Tree[T]", "member" : "com.github.arturopala.tree.internal.ArrayTree.removeTreeAt", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTree$.html#removeTreeAt[K,T,T1>:T](path:Iterable[K],target:com.github.arturopala.tree.Tree.ArrayTree[T],toPathItem:T=>K)(implicitevidence$86:scala.reflect.ClassTag[T],implicitevidence$87:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T]", "kind" : "final def"}, {"label" : "removeTreeAt", "tail" : "(path: Iterable[T1], target: ArrayTree[T])(arg0: ClassTag[T], arg1: ClassTag[T1]): Tree[T]", "member" : "com.github.arturopala.tree.internal.ArrayTree.removeTreeAt", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTree$.html#removeTreeAt[T,T1>:T](path:Iterable[T1],target:com.github.arturopala.tree.Tree.ArrayTree[T])(implicitevidence$84:scala.reflect.ClassTag[T],implicitevidence$85:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T]", "kind" : "final def"}, {"label" : "removeChild", "tail" : "(node: ArrayTree[T], value: T1)(arg0: ClassTag[T], arg1: ClassTag[T1]): Tree[T]", "member" : "com.github.arturopala.tree.internal.ArrayTree.removeChild", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTree$.html#removeChild[T,T1>:T](node:com.github.arturopala.tree.Tree.ArrayTree[T],value:T1)(implicitevidence$82:scala.reflect.ClassTag[T],implicitevidence$83:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T]", "kind" : "final def"}, {"label" : "removeTree", "tail" : "(index: Int, parentIndexOpt: Option[Int], tree: Tree[T])(arg0: ClassTag[T]): Tree[T]", "member" : "com.github.arturopala.tree.internal.ArrayTree.removeTree", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTree$.html#removeTree[T](index:Int,parentIndexOpt:Option[Int],tree:com.github.arturopala.tree.Tree[T])(implicitevidence$81:scala.reflect.ClassTag[T]):com.github.arturopala.tree.Tree[T]", "kind" : "final def"}, {"label" : "removeValueAt", "tail" : "(path: Iterable[K], target: ArrayTree[T], toPathItem: (T) => K, keepDistinct: Boolean)(arg0: ClassTag[T], arg1: ClassTag[T1]): Tree[T]", "member" : "com.github.arturopala.tree.internal.ArrayTree.removeValueAt", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTree$.html#removeValueAt[K,T,T1>:T](path:Iterable[K],target:com.github.arturopala.tree.Tree.ArrayTree[T],toPathItem:T=>K,keepDistinct:Boolean)(implicitevidence$79:scala.reflect.ClassTag[T],implicitevidence$80:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T]", "kind" : "final def"}, {"label" : "removeValueAt", "tail" : "(path: Iterable[T1], target: ArrayTree[T], keepDistinct: Boolean)(arg0: ClassTag[T], arg1: ClassTag[T1]): Tree[T]", "member" : "com.github.arturopala.tree.internal.ArrayTree.removeValueAt", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTree$.html#removeValueAt[T,T1>:T](path:Iterable[T1],target:com.github.arturopala.tree.Tree.ArrayTree[T],keepDistinct:Boolean)(implicitevidence$77:scala.reflect.ClassTag[T],implicitevidence$78:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T]", "kind" : "final def"}, {"label" : "removeChildValue", "tail" : "(value: T1, target: ArrayTree[T], keepDistinct: Boolean)(arg0: ClassTag[T], arg1: ClassTag[T1]): Tree[T]", "member" : "com.github.arturopala.tree.internal.ArrayTree.removeChildValue", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTree$.html#removeChildValue[T,T1>:T](value:T1,target:com.github.arturopala.tree.Tree.ArrayTree[T],keepDistinct:Boolean)(implicitevidence$75:scala.reflect.ClassTag[T],implicitevidence$76:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T]", "kind" : "final def"}, {"label" : "removeValue", "tail" : "(index: Int, parentIndexOpt: Option[Int], tree: Tree[T], keepDistinct: Boolean)(arg0: ClassTag[T]): Tree[T]", "member" : "com.github.arturopala.tree.internal.ArrayTree.removeValue", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTree$.html#removeValue[T](index:Int,parentIndexOpt:Option[Int],tree:com.github.arturopala.tree.Tree[T],keepDistinct:Boolean)(implicitevidence$73:scala.reflect.ClassTag[T]):com.github.arturopala.tree.Tree[T]", "kind" : "final def"}, {"label" : "modifyTreeAt", "tail" : "(path: Iterable[K], modify: (Tree[T]) => Tree[T1], target: ArrayTree[T], toPathItem: (T) => K, keepDistinct: Boolean)(arg0: ClassTag[T], arg1: ClassTag[T1]): Either[Tree[T], Tree[T1]]", "member" : "com.github.arturopala.tree.internal.ArrayTree.modifyTreeAt", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTree$.html#modifyTreeAt[K,T,T1>:T](path:Iterable[K],modify:com.github.arturopala.tree.Tree[T]=>com.github.arturopala.tree.Tree[T1],target:com.github.arturopala.tree.Tree.ArrayTree[T],toPathItem:T=>K,keepDistinct:Boolean)(implicitevidence$71:scala.reflect.ClassTag[T],implicitevidence$72:scala.reflect.ClassTag[T1]):Either[com.github.arturopala.tree.Tree[T],com.github.arturopala.tree.Tree[T1]]", "kind" : "final def"}, {"label" : "modifyTreeAt", "tail" : "(path: Iterable[T1], modify: (Tree[T]) => Tree[T1], target: ArrayTree[T], keepDistinct: Boolean)(arg0: ClassTag[T], arg1: ClassTag[T1]): Either[Tree[T], Tree[T1]]", "member" : "com.github.arturopala.tree.internal.ArrayTree.modifyTreeAt", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTree$.html#modifyTreeAt[T,T1>:T](path:Iterable[T1],modify:com.github.arturopala.tree.Tree[T]=>com.github.arturopala.tree.Tree[T1],target:com.github.arturopala.tree.Tree.ArrayTree[T],keepDistinct:Boolean)(implicitevidence$69:scala.reflect.ClassTag[T],implicitevidence$70:scala.reflect.ClassTag[T1]):Either[com.github.arturopala.tree.Tree[T],com.github.arturopala.tree.Tree[T1]]", "kind" : "final def"}, {"label" : "modifyChild", "tail" : "(value: T1, modify: (Tree[T]) => Tree[T1], target: ArrayTree[T], keepDistinct: Boolean)(arg0: ClassTag[T], arg1: ClassTag[T1]): Tree[T1]", "member" : "com.github.arturopala.tree.internal.ArrayTree.modifyChild", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTree$.html#modifyChild[T,T1>:T](value:T1,modify:com.github.arturopala.tree.Tree[T]=>com.github.arturopala.tree.Tree[T1],target:com.github.arturopala.tree.Tree.ArrayTree[T],keepDistinct:Boolean)(implicitevidence$67:scala.reflect.ClassTag[T],implicitevidence$68:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T1]", "kind" : "final def"}, {"label" : "modifyTree", "tail" : "(index: Int, modify: (Tree[T]) => Tree[T1], tree: Tree[T], keepDistinct: Boolean)(arg0: ClassTag[T], arg1: ClassTag[T1]): Tree[T1]", "member" : "com.github.arturopala.tree.internal.ArrayTree.modifyTree", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTree$.html#modifyTree[T,T1>:T](index:Int,modify:com.github.arturopala.tree.Tree[T]=>com.github.arturopala.tree.Tree[T1],tree:com.github.arturopala.tree.Tree[T],keepDistinct:Boolean)(implicitevidence$65:scala.reflect.ClassTag[T],implicitevidence$66:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T1]", "kind" : "final def"}, {"label" : "modifyValueAt", "tail" : "(path: Iterable[K], modify: (T) => T1, target: ArrayTree[T], toPathItem: (T) => K, keepDistinct: Boolean)(arg0: ClassTag[T], arg1: ClassTag[T1]): Either[Tree[T], Tree[T1]]", "member" : "com.github.arturopala.tree.internal.ArrayTree.modifyValueAt", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTree$.html#modifyValueAt[K,T,T1>:T](path:Iterable[K],modify:T=>T1,target:com.github.arturopala.tree.Tree.ArrayTree[T],toPathItem:T=>K,keepDistinct:Boolean)(implicitevidence$63:scala.reflect.ClassTag[T],implicitevidence$64:scala.reflect.ClassTag[T1]):Either[com.github.arturopala.tree.Tree[T],com.github.arturopala.tree.Tree[T1]]", "kind" : "final def"}, {"label" : "modifyValueAt", "tail" : "(path: Iterable[T1], modify: (T) => T1, target: ArrayTree[T], keepDistinct: Boolean)(arg0: ClassTag[T], arg1: ClassTag[T1]): Either[Tree[T], Tree[T1]]", "member" : "com.github.arturopala.tree.internal.ArrayTree.modifyValueAt", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTree$.html#modifyValueAt[T,T1>:T](path:Iterable[T1],modify:T=>T1,target:com.github.arturopala.tree.Tree.ArrayTree[T],keepDistinct:Boolean)(implicitevidence$61:scala.reflect.ClassTag[T],implicitevidence$62:scala.reflect.ClassTag[T1]):Either[com.github.arturopala.tree.Tree[T],com.github.arturopala.tree.Tree[T1]]", "kind" : "final def"}, {"label" : "modifyChildValue", "tail" : "(value: T1, modify: (T) => T1, target: ArrayTree[T], keepDistinct: Boolean)(arg0: ClassTag[T], arg1: ClassTag[T1]): Tree[T1]", "member" : "com.github.arturopala.tree.internal.ArrayTree.modifyChildValue", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTree$.html#modifyChildValue[T,T1>:T](value:T1,modify:T=>T1,target:com.github.arturopala.tree.Tree.ArrayTree[T],keepDistinct:Boolean)(implicitevidence$59:scala.reflect.ClassTag[T],implicitevidence$60:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T1]", "kind" : "final def"}, {"label" : "modifyValue", "tail" : "(index: Int, modify: (T) => T1, tree: Tree[T], keepDistinct: Boolean)(arg0: ClassTag[T], arg1: ClassTag[T1]): Tree[T1]", "member" : "com.github.arturopala.tree.internal.ArrayTree.modifyValue", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTree$.html#modifyValue[T,T1>:T](index:Int,modify:T=>T1,tree:com.github.arturopala.tree.Tree[T],keepDistinct:Boolean)(implicitevidence$57:scala.reflect.ClassTag[T],implicitevidence$58:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T1]", "kind" : "final def"}, {"label" : "updateTreeAt", "tail" : "(path: Iterable[K], replacement: Tree[T1], target: ArrayTree[T], toPathItem: (T) => K, keepDistinct: Boolean)(arg0: ClassTag[T], arg1: ClassTag[T1]): Either[Tree[T], Tree[T1]]", "member" : "com.github.arturopala.tree.internal.ArrayTree.updateTreeAt", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTree$.html#updateTreeAt[K,T,T1>:T](path:Iterable[K],replacement:com.github.arturopala.tree.Tree[T1],target:com.github.arturopala.tree.Tree.ArrayTree[T],toPathItem:T=>K,keepDistinct:Boolean)(implicitevidence$55:scala.reflect.ClassTag[T],implicitevidence$56:scala.reflect.ClassTag[T1]):Either[com.github.arturopala.tree.Tree[T],com.github.arturopala.tree.Tree[T1]]", "kind" : "final def"}, {"label" : "updateTreeAt", "tail" : "(path: Iterable[T1], replacement: Tree[T1], target: ArrayTree[T], keepDistinct: Boolean)(arg0: ClassTag[T], arg1: ClassTag[T1]): Either[Tree[T], Tree[T1]]", "member" : "com.github.arturopala.tree.internal.ArrayTree.updateTreeAt", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTree$.html#updateTreeAt[T,T1>:T](path:Iterable[T1],replacement:com.github.arturopala.tree.Tree[T1],target:com.github.arturopala.tree.Tree.ArrayTree[T],keepDistinct:Boolean)(implicitevidence$53:scala.reflect.ClassTag[T],implicitevidence$54:scala.reflect.ClassTag[T1]):Either[com.github.arturopala.tree.Tree[T],com.github.arturopala.tree.Tree[T1]]", "kind" : "final def"}, {"label" : "updateChild", "tail" : "(value: T1, replacement: Tree[T1], target: ArrayTree[T], keepDistinct: Boolean)(arg0: ClassTag[T], arg1: ClassTag[T1]): Tree[T1]", "member" : "com.github.arturopala.tree.internal.ArrayTree.updateChild", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTree$.html#updateChild[T,T1>:T](value:T1,replacement:com.github.arturopala.tree.Tree[T1],target:com.github.arturopala.tree.Tree.ArrayTree[T],keepDistinct:Boolean)(implicitevidence$51:scala.reflect.ClassTag[T],implicitevidence$52:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T1]", "kind" : "final def"}, {"label" : "updateValueAt", "tail" : "(path: Iterable[K], replacement: T1, target: ArrayTree[T], toPathItem: (T) => K, keepDistinct: Boolean)(arg0: ClassTag[T], arg1: ClassTag[T1]): Either[Tree[T], Tree[T1]]", "member" : "com.github.arturopala.tree.internal.ArrayTree.updateValueAt", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTree$.html#updateValueAt[K,T,T1>:T](path:Iterable[K],replacement:T1,target:com.github.arturopala.tree.Tree.ArrayTree[T],toPathItem:T=>K,keepDistinct:Boolean)(implicitevidence$49:scala.reflect.ClassTag[T],implicitevidence$50:scala.reflect.ClassTag[T1]):Either[com.github.arturopala.tree.Tree[T],com.github.arturopala.tree.Tree[T1]]", "kind" : "final def"}, {"label" : "updateValueAt", "tail" : "(path: Iterable[T1], replacement: T1, target: ArrayTree[T], keepDistinct: Boolean)(arg0: ClassTag[T], arg1: ClassTag[T1]): Either[Tree[T], Tree[T1]]", "member" : "com.github.arturopala.tree.internal.ArrayTree.updateValueAt", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTree$.html#updateValueAt[T,T1>:T](path:Iterable[T1],replacement:T1,target:com.github.arturopala.tree.Tree.ArrayTree[T],keepDistinct:Boolean)(implicitevidence$47:scala.reflect.ClassTag[T],implicitevidence$48:scala.reflect.ClassTag[T1]):Either[com.github.arturopala.tree.Tree[T],com.github.arturopala.tree.Tree[T1]]", "kind" : "final def"}, {"label" : "updateChildValue", "tail" : "(value: T1, replacement: T1, target: ArrayTree[T], keepDistinct: Boolean)(arg0: ClassTag[T], arg1: ClassTag[T1]): Tree[T1]", "member" : "com.github.arturopala.tree.internal.ArrayTree.updateChildValue", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTree$.html#updateChildValue[T,T1>:T](value:T1,replacement:T1,target:com.github.arturopala.tree.Tree.ArrayTree[T],keepDistinct:Boolean)(implicitevidence$45:scala.reflect.ClassTag[T],implicitevidence$46:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T1]", "kind" : "final def"}, {"label" : "updateTree", "tail" : "(index: Int, replacement: Tree[T1], tree: Tree[T], keepDistinct: Boolean)(arg0: ClassTag[T], arg1: ClassTag[T1]): Tree[T1]", "member" : "com.github.arturopala.tree.internal.ArrayTree.updateTree", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTree$.html#updateTree[T,T1>:T](index:Int,replacement:com.github.arturopala.tree.Tree[T1],tree:com.github.arturopala.tree.Tree[T],keepDistinct:Boolean)(implicitevidence$43:scala.reflect.ClassTag[T],implicitevidence$44:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T1]", "kind" : "final def"}, {"label" : "updateValue", "tail" : "(index: Int, replacement: T1, tree: Tree[T], keepDistinct: Boolean)(arg0: ClassTag[T], arg1: ClassTag[T1]): Tree[T1]", "member" : "com.github.arturopala.tree.internal.ArrayTree.updateValue", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTree$.html#updateValue[T,T1>:T](index:Int,replacement:T1,tree:com.github.arturopala.tree.Tree[T],keepDistinct:Boolean)(implicitevidence$41:scala.reflect.ClassTag[T],implicitevidence$42:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T1]", "kind" : "final def"}, {"label" : "insertBranch", "tail" : "(index: Int, branch: Iterable[T], target: Tree[T], append: Boolean)(arg0: ClassTag[T]): Tree[T]", "member" : "com.github.arturopala.tree.internal.ArrayTree.insertBranch", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTree$.html#insertBranch[T](index:Int,branch:Iterable[T],target:com.github.arturopala.tree.Tree[T],append:Boolean)(implicitevidence$40:scala.reflect.ClassTag[T]):com.github.arturopala.tree.Tree[T]", "kind" : "final def"}, {"label" : "buildFromChildAndTreeSplit", "tail" : "(child: Tree[T], treeSplit: Iterable[(Iterable[Tree[T]], T, Iterable[Tree[T]])])(arg0: ClassTag[T]): Tree[T]", "member" : "com.github.arturopala.tree.internal.ArrayTree.buildFromChildAndTreeSplit", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTree$.html#buildFromChildAndTreeSplit[T](child:com.github.arturopala.tree.Tree[T],treeSplit:Iterable[(Iterable[com.github.arturopala.tree.Tree[T]],T,Iterable[com.github.arturopala.tree.Tree[T]])])(implicitevidence$39:scala.reflect.ClassTag[T]):com.github.arturopala.tree.Tree[T]", "kind" : "final def"}, {"label" : "insertChildren", "tail" : "(target: Tree[T], before: Iterable[Tree[T]], after: Iterable[Tree[T]], keepDistinct: Boolean)(arg0: ClassTag[T]): Tree[T]", "member" : "com.github.arturopala.tree.internal.ArrayTree.insertChildren", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTree$.html#insertChildren[T](target:com.github.arturopala.tree.Tree[T],before:Iterable[com.github.arturopala.tree.Tree[T]],after:Iterable[com.github.arturopala.tree.Tree[T]],keepDistinct:Boolean)(implicitevidence$38:scala.reflect.ClassTag[T]):com.github.arturopala.tree.Tree[T]", "kind" : "final def"}, {"label" : "insertAfterChildren", "tail" : "(target: Tree[T], children: Iterable[Tree[T]], keepDistinct: Boolean)(arg0: ClassTag[T]): Tree[T]", "member" : "com.github.arturopala.tree.internal.ArrayTree.insertAfterChildren", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTree$.html#insertAfterChildren[T](target:com.github.arturopala.tree.Tree[T],children:Iterable[com.github.arturopala.tree.Tree[T]],keepDistinct:Boolean)(implicitevidence$37:scala.reflect.ClassTag[T]):com.github.arturopala.tree.Tree[T]", "kind" : "final def"}, {"label" : "insertBeforeChildren", "tail" : "(target: Tree[T], children: Iterable[Tree[T]], keepDistinct: Boolean)(arg0: ClassTag[T]): Tree[T]", "member" : "com.github.arturopala.tree.internal.ArrayTree.insertBeforeChildren", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTree$.html#insertBeforeChildren[T](target:com.github.arturopala.tree.Tree[T],children:Iterable[com.github.arturopala.tree.Tree[T]],keepDistinct:Boolean)(implicitevidence$36:scala.reflect.ClassTag[T]):com.github.arturopala.tree.Tree[T]", "kind" : "final def"}, {"label" : "insertChildDistinct", "tail" : "(index: Int, source: Tree[T], target: Tree[T], append: Boolean)(arg0: ClassTag[T]): Tree[T]", "member" : "com.github.arturopala.tree.internal.ArrayTree.insertChildDistinct", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTree$.html#insertChildDistinct[T](index:Int,source:com.github.arturopala.tree.Tree[T],target:com.github.arturopala.tree.Tree[T],append:Boolean)(implicitevidence$35:scala.reflect.ClassTag[T]):com.github.arturopala.tree.Tree[T]", "kind" : "final def"}, {"label" : "insertTreeAtIndex", "tail" : "(index: Int, parentIndex: Int, child: Tree[T], target: Tree[T])(arg0: ClassTag[T]): Tree[T]", "member" : "com.github.arturopala.tree.internal.ArrayTree.insertTreeAtIndex", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTree$.html#insertTreeAtIndex[T](index:Int,parentIndex:Int,child:com.github.arturopala.tree.Tree[T],target:com.github.arturopala.tree.Tree[T])(implicitevidence$34:scala.reflect.ClassTag[T]):com.github.arturopala.tree.Tree[T]", "kind" : "final def"}, {"label" : "appendChild", "tail" : "(tree: ArrayTree[T], child: Tree[T1])(arg0: ClassTag[T1]): Tree[T1]", "member" : "com.github.arturopala.tree.internal.ArrayTree.appendChild", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTree$.html#appendChild[T,T1>:T](tree:com.github.arturopala.tree.Tree.ArrayTree[T],child:com.github.arturopala.tree.Tree[T1])(implicitevidence$33:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T1]", "kind" : "final def"}, {"label" : "prependChild", "tail" : "(tree: ArrayTree[T], child: Tree[T1])(arg0: ClassTag[T1]): Tree[T1]", "member" : "com.github.arturopala.tree.internal.ArrayTree.prependChild", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTree$.html#prependChild[T,T1>:T](tree:com.github.arturopala.tree.Tree.ArrayTree[T],child:com.github.arturopala.tree.Tree[T1])(implicitevidence$32:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T1]", "kind" : "final def"}, {"label" : "insertChildrenAt", "tail" : "(path: Iterable[K], children: Iterable[Tree[T1]], target: ArrayTree[T], toPathItem: (T) => K, append: Boolean, keepDistinct: Boolean)(arg0: ClassTag[T1]): Either[Tree[T], Tree[T1]]", "member" : "com.github.arturopala.tree.internal.ArrayTree.insertChildrenAt", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTree$.html#insertChildrenAt[T,T1>:T,K](path:Iterable[K],children:Iterable[com.github.arturopala.tree.Tree[T1]],target:com.github.arturopala.tree.Tree.ArrayTree[T],toPathItem:T=>K,append:Boolean,keepDistinct:Boolean)(implicitevidence$31:scala.reflect.ClassTag[T1]):Either[com.github.arturopala.tree.Tree[T],com.github.arturopala.tree.Tree[T1]]", "kind" : "final def"}, {"label" : "insertChildrenAt", "tail" : "(path: Iterable[T1], children: Iterable[Tree[T1]], target: ArrayTree[T], append: Boolean, keepDistinct: Boolean)(arg0: ClassTag[T1]): Tree[T1]", "member" : "com.github.arturopala.tree.internal.ArrayTree.insertChildrenAt", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTree$.html#insertChildrenAt[T,T1>:T](path:Iterable[T1],children:Iterable[com.github.arturopala.tree.Tree[T1]],target:com.github.arturopala.tree.Tree.ArrayTree[T],append:Boolean,keepDistinct:Boolean)(implicitevidence$30:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T1]", "kind" : "final def"}, {"label" : "insertChildAt", "tail" : "(path: Iterable[K], child: Tree[T1], target: ArrayTree[T], toPathItem: (T) => K, append: Boolean, keepDistinct: Boolean)(arg0: ClassTag[T1]): Either[Tree[T], Tree[T1]]", "member" : "com.github.arturopala.tree.internal.ArrayTree.insertChildAt", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTree$.html#insertChildAt[T,T1>:T,K](path:Iterable[K],child:com.github.arturopala.tree.Tree[T1],target:com.github.arturopala.tree.Tree.ArrayTree[T],toPathItem:T=>K,append:Boolean,keepDistinct:Boolean)(implicitevidence$29:scala.reflect.ClassTag[T1]):Either[com.github.arturopala.tree.Tree[T],com.github.arturopala.tree.Tree[T1]]", "kind" : "final def"}, {"label" : "insertChildAt", "tail" : "(path: Iterable[T1], child: Tree[T1], target: ArrayTree[T], append: Boolean, keepDistinct: Boolean)(arg0: ClassTag[T1]): Tree[T1]", "member" : "com.github.arturopala.tree.internal.ArrayTree.insertChildAt", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTree$.html#insertChildAt[T,T1>:T](path:Iterable[T1],child:com.github.arturopala.tree.Tree[T1],target:com.github.arturopala.tree.Tree.ArrayTree[T],append:Boolean,keepDistinct:Boolean)(implicitevidence$28:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T1]", "kind" : "final def"}, {"label" : "insertLeaves", "tail" : "(parentIndex: Int, values: Iterable[T], target: Tree[T], append: Boolean, keepDistinct: Boolean)(arg0: ClassTag[T]): Tree[T]", "member" : "com.github.arturopala.tree.internal.ArrayTree.insertLeaves", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTree$.html#insertLeaves[T](parentIndex:Int,values:Iterable[T],target:com.github.arturopala.tree.Tree[T],append:Boolean,keepDistinct:Boolean)(implicitevidence$27:scala.reflect.ClassTag[T]):com.github.arturopala.tree.Tree[T]", "kind" : "final def"}, {"label" : "insertLeaf", "tail" : "(parentIndex: Int, value: T, target: Tree[T], append: Boolean, keepDistinct: Boolean)(arg0: ClassTag[T]): Tree[T]", "member" : "com.github.arturopala.tree.internal.ArrayTree.insertLeaf", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTree$.html#insertLeaf[T](parentIndex:Int,value:T,target:com.github.arturopala.tree.Tree[T],append:Boolean,keepDistinct:Boolean)(implicitevidence$26:scala.reflect.ClassTag[T]):com.github.arturopala.tree.Tree[T]", "kind" : "final def"}, {"label" : "prepend", "tail" : "(value: T1, tree: ArrayTree[T])(arg0: ClassTag[T], arg1: ClassTag[T1]): ArrayTree[T1]", "member" : "com.github.arturopala.tree.internal.ArrayTree.prepend", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTree$.html#prepend[T,T1>:T](value:T1,tree:com.github.arturopala.tree.Tree.ArrayTree[T])(implicitevidence$24:scala.reflect.ClassTag[T],implicitevidence$25:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree.ArrayTree[T1]", "kind" : "final def"}, {"label" : "hasChildValue", "tail" : "(index: Int, value: T, tree: Tree[T]): Boolean", "member" : "com.github.arturopala.tree.internal.ArrayTree.hasChildValue", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTree$.html#hasChildValue[T](index:Int,value:T,tree:com.github.arturopala.tree.Tree[T]):Boolean", "kind" : "final def"}, {"label" : "insertLeafAt", "tail" : "(path: Iterable[K], value: T1, target: ArrayTree[T], toPathItem: (T) => K, append: Boolean, keepDistinct: Boolean)(arg0: ClassTag[T1]): Either[Tree[T], Tree[T1]]", "member" : "com.github.arturopala.tree.internal.ArrayTree.insertLeafAt", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTree$.html#insertLeafAt[T,T1>:T,K](path:Iterable[K],value:T1,target:com.github.arturopala.tree.Tree.ArrayTree[T],toPathItem:T=>K,append:Boolean,keepDistinct:Boolean)(implicitevidence$23:scala.reflect.ClassTag[T1]):Either[com.github.arturopala.tree.Tree[T],com.github.arturopala.tree.Tree[T1]]", "kind" : "final def"}, {"label" : "insertLeafAt", "tail" : "(path: Iterable[T1], value: T1, target: ArrayTree[T], append: Boolean, keepDistinct: Boolean)(arg0: ClassTag[T1]): Tree[T1]", "member" : "com.github.arturopala.tree.internal.ArrayTree.insertLeafAt", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTree$.html#insertLeafAt[T,T1>:T](path:Iterable[T1],value:T1,target:com.github.arturopala.tree.Tree.ArrayTree[T],append:Boolean,keepDistinct:Boolean)(implicitevidence$22:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T1]", "kind" : "final def"}, {"label" : "flatMapDistinct", "tail" : "(treeStructure: IntSlice, treeValues: Slice[T], f: (T) => Tree[K])(arg0: ClassTag[T], arg1: ClassTag[K]): Tree[K]", "member" : "com.github.arturopala.tree.internal.ArrayTree.flatMapDistinct", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTree$.html#flatMapDistinct[T,K](treeStructure:com.github.arturopala.bufferandslice.IntSlice,treeValues:com.github.arturopala.bufferandslice.Slice[T],f:T=>com.github.arturopala.tree.Tree[K])(implicitevidence$20:scala.reflect.ClassTag[T],implicitevidence$21:scala.reflect.ClassTag[K]):com.github.arturopala.tree.Tree[K]", "kind" : "final def"}, {"label" : "flatMapLax", "tail" : "(treeStructure: IntSlice, treeValues: Slice[T], f: (T) => Tree[K])(arg0: ClassTag[T], arg1: ClassTag[K]): Tree[K]", "member" : "com.github.arturopala.tree.internal.ArrayTree.flatMapLax", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTree$.html#flatMapLax[T,K](treeStructure:com.github.arturopala.bufferandslice.IntSlice,treeValues:com.github.arturopala.bufferandslice.Slice[T],f:T=>com.github.arturopala.tree.Tree[K])(implicitevidence$18:scala.reflect.ClassTag[T],implicitevidence$19:scala.reflect.ClassTag[K]):com.github.arturopala.tree.Tree[K]", "kind" : "final def"}, {"label" : "fromSlices", "tail" : "(treeStructure: IntSlice, treeValues: Slice[T])(arg0: ClassTag[T]): Tree[T]", "member" : "com.github.arturopala.tree.internal.ArrayTree.fromSlices", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTree$.html#fromSlices[T](treeStructure:com.github.arturopala.bufferandslice.IntSlice,treeValues:com.github.arturopala.bufferandslice.Slice[T])(implicitevidence$17:scala.reflect.ClassTag[T]):com.github.arturopala.tree.Tree[T]", "kind" : "final def"}, {"label" : "fromBuffers", "tail" : "(structureBuffer: IntBuffer, valuesBuffer: Buffer[T])(arg0: ClassTag[T]): Tree[T]", "member" : "com.github.arturopala.tree.internal.ArrayTree.fromBuffers", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTree$.html#fromBuffers[T](structureBuffer:com.github.arturopala.bufferandslice.IntBuffer,valuesBuffer:com.github.arturopala.bufferandslice.Buffer[T])(implicitevidence$16:scala.reflect.ClassTag[T]):com.github.arturopala.tree.Tree[T]", "kind" : "final def"}, {"label" : "transform", "tail" : "(tree: Tree[T])(modify: (IntBuffer, Buffer[T]) => Option[Int])(arg0: ClassTag[T]): Tree[T]", "member" : "com.github.arturopala.tree.internal.ArrayTree.transform", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTree$.html#transform[T](tree:com.github.arturopala.tree.Tree[T])(modify:(com.github.arturopala.bufferandslice.IntBuffer,com.github.arturopala.bufferandslice.Buffer[T])=>Option[Int])(implicitevidence$15:scala.reflect.ClassTag[T]):com.github.arturopala.tree.Tree[T]", "kind" : "final def"}, {"label" : "treeAt", "tail" : "(index: Int, treeStructure: IntSlice, treeValues: Slice[T])(arg0: ClassTag[T]): Tree[T]", "member" : "com.github.arturopala.tree.internal.ArrayTree.treeAt", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTree$.html#treeAt[T](index:Int,treeStructure:com.github.arturopala.bufferandslice.IntSlice,treeValues:com.github.arturopala.bufferandslice.Slice[T])(implicitevidence$14:scala.reflect.ClassTag[T]):com.github.arturopala.tree.Tree[T]", "kind" : "final def"}, {"label" : "selectTree", "tail" : "(path: Iterable[K], startIndex: Int, treeStructure: IntSlice, treeValues: Slice[T], toPathItem: (T) => K, rightmost: Boolean)(arg0: ClassTag[T]): Option[Tree[T]]", "member" : "com.github.arturopala.tree.internal.ArrayTree.selectTree", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTree$.html#selectTree[T,K](path:Iterable[K],startIndex:Int,treeStructure:com.github.arturopala.bufferandslice.IntSlice,treeValues:com.github.arturopala.bufferandslice.Slice[T],toPathItem:T=>K,rightmost:Boolean)(implicitevidence$13:scala.reflect.ClassTag[T]):Option[com.github.arturopala.tree.Tree[T]]", "kind" : "final def"}, {"label" : "selectTree", "tail" : "(path: Iterable[T1], startIndex: Int, treeStructure: IntSlice, treeValues: Slice[T], rightmost: Boolean)(arg0: ClassTag[T]): Option[Tree[T]]", "member" : "com.github.arturopala.tree.internal.ArrayTree.selectTree", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTree$.html#selectTree[T,T1>:T](path:Iterable[T1],startIndex:Int,treeStructure:com.github.arturopala.bufferandslice.IntSlice,treeValues:com.github.arturopala.bufferandslice.Slice[T],rightmost:Boolean)(implicitevidence$12:scala.reflect.ClassTag[T]):Option[com.github.arturopala.tree.Tree[T]]", "kind" : "final def"}, {"label" : "selectValue", "tail" : "(path: Iterable[K], startIndex: Int, treeStructure: (Int) => Int, treeValues: (Int) => T, toPathItem: (T) => K, rightmost: Boolean): Option[T]", "member" : "com.github.arturopala.tree.internal.ArrayTree.selectValue", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTree$.html#selectValue[T,K](path:Iterable[K],startIndex:Int,treeStructure:Int=>Int,treeValues:Int=>T,toPathItem:T=>K,rightmost:Boolean):Option[T]", "kind" : "final def"}, {"label" : "containsPath", "tail" : "(path: Iterable[K], startIndex: Int, treeStructure: (Int) => Int, treeValues: (Int) => T, toPathItem: (T) => K): Boolean", "member" : "com.github.arturopala.tree.internal.ArrayTree.containsPath", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTree$.html#containsPath[T,K](path:Iterable[K],startIndex:Int,treeStructure:Int=>Int,treeValues:Int=>T,toPathItem:T=>K):Boolean", "kind" : "final def"}, {"label" : "containsPath", "tail" : "(path: Iterable[T1], startIndex: Int, treeStructure: (Int) => Int, treeValues: (Int) => T): Boolean", "member" : "com.github.arturopala.tree.internal.ArrayTree.containsPath", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTree$.html#containsPath[T,T1>:T](path:Iterable[T1],startIndex:Int,treeStructure:Int=>Int,treeValues:Int=>T):Boolean", "kind" : "final def"}, {"label" : "countBranches", "tail" : "(startIndex: Int, treeStructure: (Int) => Int, treeValues: (Int) => T, pred: (Iterable[T]) => Boolean)(arg0: ClassTag[T]): Int", "member" : "com.github.arturopala.tree.internal.ArrayTree.countBranches", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTree$.html#countBranches[T](startIndex:Int,treeStructure:Int=>Int,treeValues:Int=>T,pred:Iterable[T]=>Boolean)(implicitevidence$11:scala.reflect.ClassTag[T]):Int", "kind" : "final def"}, {"label" : "containsBranch", "tail" : "(branch: Iterable[K], startIndex: Int, treeStructure: (Int) => Int, treeValues: (Int) => T, toPathItem: (T) => K): Boolean", "member" : "com.github.arturopala.tree.internal.ArrayTree.containsBranch", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTree$.html#containsBranch[T,K](branch:Iterable[K],startIndex:Int,treeStructure:Int=>Int,treeValues:Int=>T,toPathItem:T=>K):Boolean", "kind" : "final def"}, {"label" : "containsBranch", "tail" : "(branch: Iterable[T1], startIndex: Int, treeStructure: (Int) => Int, treeValues: (Int) => T): Boolean", "member" : "com.github.arturopala.tree.internal.ArrayTree.containsBranch", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTree$.html#containsBranch[T,T1>:T](branch:Iterable[T1],startIndex:Int,treeStructure:Int=>Int,treeValues:Int=>T):Boolean", "kind" : "final def"}, {"label" : "containsChild", "tail" : "(value: T1, parentIndex: Int, treeStructure: (Int) => Int, treeValues: (Int) => T): Boolean", "member" : "com.github.arturopala.tree.internal.ArrayTree.containsChild", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTree$.html#containsChild[T,T1>:T](value:T1,parentIndex:Int,treeStructure:Int=>Int,treeValues:Int=>T):Boolean", "kind" : "final def"}, {"label" : "followPath", "tail" : "(path: Iterable[K], tree: ArrayTree[T], toPathItem: (T) => K, rightmost: Boolean): (IntSlice, Option[K], Iterator[K], Boolean)", "member" : "com.github.arturopala.tree.internal.ArrayTree.followPath", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTree$.html#followPath[T,K](path:Iterable[K],tree:com.github.arturopala.tree.Tree.ArrayTree[T],toPathItem:T=>K,rightmost:Boolean):(com.github.arturopala.bufferandslice.IntSlice,Option[K],Iterator[K],Boolean)", "kind" : "final def"}, {"label" : "followPath", "tail" : "(path: Iterable[T1], tree: ArrayTree[T], rightmost: Boolean): (IntSlice, Option[T1], Iterator[T1], Boolean)", "member" : "com.github.arturopala.tree.internal.ArrayTree.followPath", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTree$.html#followPath[T,T1>:T](path:Iterable[T1],tree:com.github.arturopala.tree.Tree.ArrayTree[T],rightmost:Boolean):(com.github.arturopala.bufferandslice.IntSlice,Option[T1],Iterator[T1],Boolean)", "kind" : "final def"}, {"label" : "treesAndLevelsIteratorWithLimit", "tail" : "(startIndex: Int, treeStructure: IntSlice, treeValues: Slice[T], pred: (Tree[T]) => Boolean, maxDepth: Int, depthFirst: Boolean)(arg0: ClassTag[T]): Iterator[(Int, Tree[T])]", "member" : "com.github.arturopala.tree.internal.ArrayTree.treesAndLevelsIteratorWithLimit", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTree$.html#treesAndLevelsIteratorWithLimit[T](startIndex:Int,treeStructure:com.github.arturopala.bufferandslice.IntSlice,treeValues:com.github.arturopala.bufferandslice.Slice[T],pred:com.github.arturopala.tree.Tree[T]=>Boolean,maxDepth:Int,depthFirst:Boolean)(implicitevidence$10:scala.reflect.ClassTag[T]):Iterator[(Int,com.github.arturopala.tree.Tree[T])]", "kind" : "final def"}, {"label" : "treesIteratorWithLimit", "tail" : "(startIndex: Int, treeStructure: IntSlice, treeValues: Slice[T], pred: (Tree[T]) => Boolean, maxDepth: Int, depthFirst: Boolean)(arg0: ClassTag[T]): Iterator[Tree[T]]", "member" : "com.github.arturopala.tree.internal.ArrayTree.treesIteratorWithLimit", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTree$.html#treesIteratorWithLimit[T](startIndex:Int,treeStructure:com.github.arturopala.bufferandslice.IntSlice,treeValues:com.github.arturopala.bufferandslice.Slice[T],pred:com.github.arturopala.tree.Tree[T]=>Boolean,maxDepth:Int,depthFirst:Boolean)(implicitevidence$9:scala.reflect.ClassTag[T]):Iterator[com.github.arturopala.tree.Tree[T]]", "kind" : "final def"}, {"label" : "treesIteratorWithFilter", "tail" : "(startIndex: Int, treeStructure: IntSlice, treeValues: Slice[T], pred: (Tree[T]) => Boolean, depthFirst: Boolean)(arg0: ClassTag[T]): Iterator[Tree[T]]", "member" : "com.github.arturopala.tree.internal.ArrayTree.treesIteratorWithFilter", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTree$.html#treesIteratorWithFilter[T](startIndex:Int,treeStructure:com.github.arturopala.bufferandslice.IntSlice,treeValues:com.github.arturopala.bufferandslice.Slice[T],pred:com.github.arturopala.tree.Tree[T]=>Boolean,depthFirst:Boolean)(implicitevidence$8:scala.reflect.ClassTag[T]):Iterator[com.github.arturopala.tree.Tree[T]]", "kind" : "final def"}, {"label" : "treesIterator", "tail" : "(startIndex: Int, treeStructure: IntSlice, treeValues: Slice[T], depthFirst: Boolean)(arg0: ClassTag[T]): Iterator[Tree[T]]", "member" : "com.github.arturopala.tree.internal.ArrayTree.treesIterator", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTree$.html#treesIterator[T](startIndex:Int,treeStructure:com.github.arturopala.bufferandslice.IntSlice,treeValues:com.github.arturopala.bufferandslice.Slice[T],depthFirst:Boolean)(implicitevidence$7:scala.reflect.ClassTag[T]):Iterator[com.github.arturopala.tree.Tree[T]]", "kind" : "final def"}, {"label" : "branchesIteratorWithLimit", "tail" : "(startIndex: Int, treeStructure: (Int) => Int, treeValues: (Int) => T, pred: (Iterable[T]) => Boolean, maxDepth: Int)(arg0: ClassTag[T]): Iterator[Iterable[T]]", "member" : "com.github.arturopala.tree.internal.ArrayTree.branchesIteratorWithLimit", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTree$.html#branchesIteratorWithLimit[T](startIndex:Int,treeStructure:Int=>Int,treeValues:Int=>T,pred:Iterable[T]=>Boolean,maxDepth:Int)(implicitevidence$6:scala.reflect.ClassTag[T]):Iterator[Iterable[T]]", "kind" : "final def"}, {"label" : "branchesIteratorWithFilter", "tail" : "(startIndex: Int, treeStructure: (Int) => Int, treeValues: (Int) => T, pred: (Iterable[T]) => Boolean)(arg0: ClassTag[T]): Iterator[Iterable[T]]", "member" : "com.github.arturopala.tree.internal.ArrayTree.branchesIteratorWithFilter", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTree$.html#branchesIteratorWithFilter[T](startIndex:Int,treeStructure:Int=>Int,treeValues:Int=>T,pred:Iterable[T]=>Boolean)(implicitevidence$5:scala.reflect.ClassTag[T]):Iterator[Iterable[T]]", "kind" : "final def"}, {"label" : "branchesIterator", "tail" : "(startIndex: Int, treeStructure: (Int) => Int, treeValues: (Int) => T)(arg0: ClassTag[T]): Iterator[Iterable[T]]", "member" : "com.github.arturopala.tree.internal.ArrayTree.branchesIterator", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTree$.html#branchesIterator[T](startIndex:Int,treeStructure:Int=>Int,treeValues:Int=>T)(implicitevidence$4:scala.reflect.ClassTag[T]):Iterator[Iterable[T]]", "kind" : "final def"}, {"label" : "valuesAndLevelsIteratorWithLimit", "tail" : "(startIndex: Int, treeStructure: (Int) => Int, treeValues: (Int) => T, pred: (T) => Boolean, maxDepth: Int, depthFirst: Boolean)(arg0: ClassTag[T]): Iterator[(Int, T, Boolean)]", "member" : "com.github.arturopala.tree.internal.ArrayTree.valuesAndLevelsIteratorWithLimit", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTree$.html#valuesAndLevelsIteratorWithLimit[T](startIndex:Int,treeStructure:Int=>Int,treeValues:Int=>T,pred:T=>Boolean,maxDepth:Int,depthFirst:Boolean)(implicitevidence$3:scala.reflect.ClassTag[T]):Iterator[(Int,T,Boolean)]", "kind" : "final def"}, {"label" : "valuesIteratorWithLimit", "tail" : "(startIndex: Int, treeStructure: (Int) => Int, treeValues: (Int) => T, pred: (T) => Boolean, maxDepth: Int, depthFirst: Boolean)(arg0: ClassTag[T]): Iterator[T]", "member" : "com.github.arturopala.tree.internal.ArrayTree.valuesIteratorWithLimit", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTree$.html#valuesIteratorWithLimit[T](startIndex:Int,treeStructure:Int=>Int,treeValues:Int=>T,pred:T=>Boolean,maxDepth:Int,depthFirst:Boolean)(implicitevidence$2:scala.reflect.ClassTag[T]):Iterator[T]", "kind" : "final def"}, {"label" : "valuesIterator", "tail" : "(startIndex: Int, treeStructure: (Int) => Int, treeValues: (Int) => T, depthFirst: Boolean)(arg0: ClassTag[T]): Iterator[T]", "member" : "com.github.arturopala.tree.internal.ArrayTree.valuesIterator", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTree$.html#valuesIterator[T](startIndex:Int,treeStructure:Int=>Int,treeValues:Int=>T,depthFirst:Boolean)(implicitevidence$1:scala.reflect.ClassTag[T]):Iterator[T]", "kind" : "final def"}, {"label" : "leavesIterator", "tail" : "(startIndex: Int, treeStructure: IntSlice, treeValues: (Int) => T): Iterator[T]", "member" : "com.github.arturopala.tree.internal.ArrayTree.leavesIterator", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTree$.html#leavesIterator[T](startIndex:Int,treeStructure:com.github.arturopala.bufferandslice.IntSlice,treeValues:Int=>T):Iterator[T]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTree$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTree$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTree$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTree$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTree$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTree$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTree$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTree$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTree$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTree$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTree$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTree$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTree$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTree$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTree$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTree$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTree$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTree$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTree$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.github.arturopala.tree.internal.ArrayTreeFunctions", "shortDescription" : "Essential low-level operations on the linear encoding of the tree.", "object" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeFunctions$.html", "members_object" : [{"label" : "mergeShallowTwoTrees", "tail" : "(recipientIndex: Int, donorIndex: Int, structureBuffer: IntBuffer, valuesBuffer: Buffer[T], indexesToTrack: IntBuffer*): (Int, Int)", "member" : "com.github.arturopala.tree.internal.ArrayTreeFunctions.mergeShallowTwoTrees", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeFunctions$.html#mergeShallowTwoTrees[T](recipientIndex:Int,donorIndex:Int,structureBuffer:com.github.arturopala.bufferandslice.IntBuffer,valuesBuffer:com.github.arturopala.bufferandslice.Buffer[T],indexesToTrack:com.github.arturopala.bufferandslice.IntBuffer*):(Int,Int)", "kind" : "final def"}, {"label" : "mergeDeeplyTwoTrees", "tail" : "(recipientIndex: Int, donorIndex: Int, structureBuffer: IntBuffer, valuesBuffer: Buffer[T], indexesToTrack: IntBuffer): Int", "member" : "com.github.arturopala.tree.internal.ArrayTreeFunctions.mergeDeeplyTwoTrees", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeFunctions$.html#mergeDeeplyTwoTrees[T](recipientIndex:Int,donorIndex:Int,structureBuffer:com.github.arturopala.bufferandslice.IntBuffer,valuesBuffer:com.github.arturopala.bufferandslice.Buffer[T],indexesToTrack:com.github.arturopala.bufferandslice.IntBuffer):Int", "kind" : "final def"}, {"label" : "findFirstDuplicatePair", "tail" : "(values: Slice[T], keyOf: (T) => K, rightToLeft: Boolean): Option[(T, T)]", "member" : "com.github.arturopala.tree.internal.ArrayTreeFunctions.findFirstDuplicatePair", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeFunctions$.html#findFirstDuplicatePair[T,K](values:com.github.arturopala.bufferandslice.Slice[T],keyOf:T=>K,rightToLeft:Boolean):Option[(T,T)]", "kind" : "final def"}, {"label" : "makeChildrenDistinct", "tail" : "(parentIndex: Int, pullUp: Boolean, structureBuffer: IntBuffer, valuesBuffer: Buffer[T], indexesToTrack: IntBuffer): Int", "member" : "com.github.arturopala.tree.internal.ArrayTreeFunctions.makeChildrenDistinct", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeFunctions$.html#makeChildrenDistinct[T](parentIndex:Int,pullUp:Boolean,structureBuffer:com.github.arturopala.bufferandslice.IntBuffer,valuesBuffer:com.github.arturopala.bufferandslice.Buffer[T],indexesToTrack:com.github.arturopala.bufferandslice.IntBuffer):Int", "kind" : "final def"}, {"label" : "ensureChildDistinct", "tail" : "(index: Int, structureBuffer: IntBuffer, valuesBuffer: Buffer[T], indexesToTrack: IntBuffer): Int", "member" : "com.github.arturopala.tree.internal.ArrayTreeFunctions.ensureChildDistinct", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeFunctions$.html#ensureChildDistinct[T](index:Int,structureBuffer:com.github.arturopala.bufferandslice.IntBuffer,valuesBuffer:com.github.arturopala.bufferandslice.Buffer[T],indexesToTrack:com.github.arturopala.bufferandslice.IntBuffer):Int", "kind" : "final def"}, {"label" : "expandValueIntoTreeDistinct", "tail" : "(index: Int, parentIndex: Int, treeStructure: IntSlice, treeValues: Slice[T], structureBuffer: IntBuffer, valuesBuffer: Buffer[T]): Int", "member" : "com.github.arturopala.tree.internal.ArrayTreeFunctions.expandValueIntoTreeDistinct", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeFunctions$.html#expandValueIntoTreeDistinct[T](index:Int,parentIndex:Int,treeStructure:com.github.arturopala.bufferandslice.IntSlice,treeValues:com.github.arturopala.bufferandslice.Slice[T],structureBuffer:com.github.arturopala.bufferandslice.IntBuffer,valuesBuffer:com.github.arturopala.bufferandslice.Buffer[T]):Int", "kind" : "final def"}, {"label" : "expandValueIntoTreeLax", "tail" : "(index: Int, treeStructure: IntSlice, treeValues: Slice[T], structureBuffer: IntBuffer, valuesBuffer: Buffer[T]): Int", "member" : "com.github.arturopala.tree.internal.ArrayTreeFunctions.expandValueIntoTreeLax", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeFunctions$.html#expandValueIntoTreeLax[T](index:Int,treeStructure:com.github.arturopala.bufferandslice.IntSlice,treeValues:com.github.arturopala.bufferandslice.Slice[T],structureBuffer:com.github.arturopala.bufferandslice.IntBuffer,valuesBuffer:com.github.arturopala.bufferandslice.Buffer[T]):Int", "kind" : "final def"}, {"label" : "shiftFromWithFlag", "tail" : "(b: Int, d: Int): ((Int, IntSlice, Slice[T], Boolean)) => (Int, IntSlice, Slice[T], Boolean)", "member" : "com.github.arturopala.tree.internal.ArrayTreeFunctions.shiftFromWithFlag", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeFunctions$.html#shiftFromWithFlag[T](b:Int,d:Int):((Int,com.github.arturopala.bufferandslice.IntSlice,com.github.arturopala.bufferandslice.Slice[T],Boolean))=>(Int,com.github.arturopala.bufferandslice.IntSlice,com.github.arturopala.bufferandslice.Slice[T],Boolean)", "kind" : "final def"}, {"label" : "shiftFrom", "tail" : "(b: Int, d: Int): ((Int, IntSlice, Slice[T])) => (Int, IntSlice, Slice[T])", "member" : "com.github.arturopala.tree.internal.ArrayTreeFunctions.shiftFrom", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeFunctions$.html#shiftFrom[T](b:Int,d:Int):((Int,com.github.arturopala.bufferandslice.IntSlice,com.github.arturopala.bufferandslice.Slice[T]))=>(Int,com.github.arturopala.bufferandslice.IntSlice,com.github.arturopala.bufferandslice.Slice[T])", "kind" : "final def"}, {"label" : "shiftIfGreaterOrEqualTo", "tail" : "(i: Int, b: Int, d: Int): Int", "member" : "com.github.arturopala.tree.internal.ArrayTreeFunctions.shiftIfGreaterOrEqualTo", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeFunctions$.html#shiftIfGreaterOrEqualTo(i:Int,b:Int,d:Int):Int", "kind" : "final def"}, {"label" : "insertChildDistinct", "tail" : "(parentIndex: Int, insertIndex: Int, childStructure: IntSlice, childValues: Slice[T], structureBuffer: IntBuffer, valuesBuffer: Buffer[T]): Int", "member" : "com.github.arturopala.tree.internal.ArrayTreeFunctions.insertChildDistinct", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeFunctions$.html#insertChildDistinct[T](parentIndex:Int,insertIndex:Int,childStructure:com.github.arturopala.bufferandslice.IntSlice,childValues:com.github.arturopala.bufferandslice.Slice[T],structureBuffer:com.github.arturopala.bufferandslice.IntBuffer,valuesBuffer:com.github.arturopala.bufferandslice.Buffer[T]):Int", "kind" : "final def"}, {"label" : "insertAfterChildrenDistinct", "tail" : "(parentIndex: Int, children: Iterable[(IntSlice, Slice[T])], structureBuffer: IntBuffer, valuesBuffer: Buffer[T]): Int", "member" : "com.github.arturopala.tree.internal.ArrayTreeFunctions.insertAfterChildrenDistinct", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeFunctions$.html#insertAfterChildrenDistinct[T](parentIndex:Int,children:Iterable[(com.github.arturopala.bufferandslice.IntSlice,com.github.arturopala.bufferandslice.Slice[T])],structureBuffer:com.github.arturopala.bufferandslice.IntBuffer,valuesBuffer:com.github.arturopala.bufferandslice.Buffer[T]):Int", "kind" : "final def"}, {"label" : "insertAfterChildDistinct", "tail" : "(parentIndex: Int, childStructure: IntSlice, childValues: Slice[T], structureBuffer: IntBuffer, valuesBuffer: Buffer[T]): Int", "member" : "com.github.arturopala.tree.internal.ArrayTreeFunctions.insertAfterChildDistinct", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeFunctions$.html#insertAfterChildDistinct[T](parentIndex:Int,childStructure:com.github.arturopala.bufferandslice.IntSlice,childValues:com.github.arturopala.bufferandslice.Slice[T],structureBuffer:com.github.arturopala.bufferandslice.IntBuffer,valuesBuffer:com.github.arturopala.bufferandslice.Buffer[T]):Int", "kind" : "final def"}, {"label" : "insertAfterChildren", "tail" : "(parentIndex: Int, newChildren: Iterable[(IntSlice, Slice[T])], structureBuffer: IntBuffer, valuesBuffer: Buffer[T], keepDistinct: Boolean): Int", "member" : "com.github.arturopala.tree.internal.ArrayTreeFunctions.insertAfterChildren", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeFunctions$.html#insertAfterChildren[T](parentIndex:Int,newChildren:Iterable[(com.github.arturopala.bufferandslice.IntSlice,com.github.arturopala.bufferandslice.Slice[T])],structureBuffer:com.github.arturopala.bufferandslice.IntBuffer,valuesBuffer:com.github.arturopala.bufferandslice.Buffer[T],keepDistinct:Boolean):Int", "kind" : "final def"}, {"label" : "insertBeforeChildrenDistinct", "tail" : "(parentIndex: Int, children: Iterable[(IntSlice, Slice[T])], structureBuffer: IntBuffer, valuesBuffer: Buffer[T]): Int", "member" : "com.github.arturopala.tree.internal.ArrayTreeFunctions.insertBeforeChildrenDistinct", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeFunctions$.html#insertBeforeChildrenDistinct[T](parentIndex:Int,children:Iterable[(com.github.arturopala.bufferandslice.IntSlice,com.github.arturopala.bufferandslice.Slice[T])],structureBuffer:com.github.arturopala.bufferandslice.IntBuffer,valuesBuffer:com.github.arturopala.bufferandslice.Buffer[T]):Int", "kind" : "final def"}, {"label" : "insertBeforeChildDistinct", "tail" : "(parentIndex: Int, childStructure: IntSlice, childValues: Slice[T], structureBuffer: IntBuffer, valuesBuffer: Buffer[T]): Int", "member" : "com.github.arturopala.tree.internal.ArrayTreeFunctions.insertBeforeChildDistinct", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeFunctions$.html#insertBeforeChildDistinct[T](parentIndex:Int,childStructure:com.github.arturopala.bufferandslice.IntSlice,childValues:com.github.arturopala.bufferandslice.Slice[T],structureBuffer:com.github.arturopala.bufferandslice.IntBuffer,valuesBuffer:com.github.arturopala.bufferandslice.Buffer[T]):Int", "kind" : "final def"}, {"label" : "insertBeforeChildren", "tail" : "(parentIndex: Int, newChildren: Iterable[(IntSlice, Slice[T])], structureBuffer: IntBuffer, valuesBuffer: Buffer[T], keepDistinct: Boolean): Int", "member" : "com.github.arturopala.tree.internal.ArrayTreeFunctions.insertBeforeChildren", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeFunctions$.html#insertBeforeChildren[T](parentIndex:Int,newChildren:Iterable[(com.github.arturopala.bufferandslice.IntSlice,com.github.arturopala.bufferandslice.Slice[T])],structureBuffer:com.github.arturopala.bufferandslice.IntBuffer,valuesBuffer:com.github.arturopala.bufferandslice.Buffer[T],keepDistinct:Boolean):Int", "kind" : "final def"}, {"label" : "insertChildrenDistinct", "tail" : "(parentIndex: Int, childStructure: IntSlice, childValues: Slice[T], structureBuffer: IntBuffer, valuesBuffer: Buffer[T], append: Boolean): Int", "member" : "com.github.arturopala.tree.internal.ArrayTreeFunctions.insertChildrenDistinct", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeFunctions$.html#insertChildrenDistinct[T](parentIndex:Int,childStructure:com.github.arturopala.bufferandslice.IntSlice,childValues:com.github.arturopala.bufferandslice.Slice[T],structureBuffer:com.github.arturopala.bufferandslice.IntBuffer,valuesBuffer:com.github.arturopala.bufferandslice.Buffer[T],append:Boolean):Int", "kind" : "final def"}, {"label" : "insertChildren", "tail" : "(parentIndex: Int, newChildren: Iterable[(IntSlice, Slice[T])], structureBuffer: IntBuffer, valuesBuffer: Buffer[T], append: Boolean, keepDistinct: Boolean): Int", "member" : "com.github.arturopala.tree.internal.ArrayTreeFunctions.insertChildren", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeFunctions$.html#insertChildren[T](parentIndex:Int,newChildren:Iterable[(com.github.arturopala.bufferandslice.IntSlice,com.github.arturopala.bufferandslice.Slice[T])],structureBuffer:com.github.arturopala.bufferandslice.IntBuffer,valuesBuffer:com.github.arturopala.bufferandslice.Buffer[T],append:Boolean,keepDistinct:Boolean):Int", "kind" : "final def"}, {"label" : "wrapWithValueAndSiblings", "tail" : "(index: Int, value: T, beforeSiblings: Iterable[(IntSlice, Slice[T])], afterSiblings: Iterable[(IntSlice, Slice[T])], structureBuffer: IntBuffer, valuesBuffer: Buffer[T], keepDistinct: Boolean): Int", "member" : "com.github.arturopala.tree.internal.ArrayTreeFunctions.wrapWithValueAndSiblings", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeFunctions$.html#wrapWithValueAndSiblings[T](index:Int,value:T,beforeSiblings:Iterable[(com.github.arturopala.bufferandslice.IntSlice,com.github.arturopala.bufferandslice.Slice[T])],afterSiblings:Iterable[(com.github.arturopala.bufferandslice.IntSlice,com.github.arturopala.bufferandslice.Slice[T])],structureBuffer:com.github.arturopala.bufferandslice.IntBuffer,valuesBuffer:com.github.arturopala.bufferandslice.Buffer[T],keepDistinct:Boolean):Int", "kind" : "final def"}, {"label" : "insertBetweenChildrenDistinct", "tail" : "(childIndex: Int, childStructure: IntSlice, childValues: Slice[T], insertAfter: Boolean, structureBuffer: IntBuffer, valuesBuffer: Buffer[T], indexesToTrack: IntBuffer): Int", "member" : "com.github.arturopala.tree.internal.ArrayTreeFunctions.insertBetweenChildrenDistinct", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeFunctions$.html#insertBetweenChildrenDistinct[T](childIndex:Int,childStructure:com.github.arturopala.bufferandslice.IntSlice,childValues:com.github.arturopala.bufferandslice.Slice[T],insertAfter:Boolean,structureBuffer:com.github.arturopala.bufferandslice.IntBuffer,valuesBuffer:com.github.arturopala.bufferandslice.Buffer[T],indexesToTrack:com.github.arturopala.bufferandslice.IntBuffer):Int", "kind" : "final def"}, {"label" : "insertChildDistinctUnsafe", "tail" : "(childStructure: IntSlice, childValues: Slice[T], index: Int, structureBuffer: IntBuffer, valuesBuffer: Buffer[T]): Int", "member" : "com.github.arturopala.tree.internal.ArrayTreeFunctions.insertChildDistinctUnsafe", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeFunctions$.html#insertChildDistinctUnsafe[T](childStructure:com.github.arturopala.bufferandslice.IntSlice,childValues:com.github.arturopala.bufferandslice.Slice[T],index:Int,structureBuffer:com.github.arturopala.bufferandslice.IntBuffer,valuesBuffer:com.github.arturopala.bufferandslice.Buffer[T]):Int", "kind" : "final def"}, {"label" : "insertBranch", "tail" : "(branchIterator: Iterator[T], parentIndex: Int, append: Boolean, structureBuffer: IntBuffer, valuesBuffer: Buffer[T], offset: Int): Int", "member" : "com.github.arturopala.tree.internal.ArrayTreeFunctions.insertBranch", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeFunctions$.html#insertBranch[T](branchIterator:Iterator[T],parentIndex:Int,append:Boolean,structureBuffer:com.github.arturopala.bufferandslice.IntBuffer,valuesBuffer:com.github.arturopala.bufferandslice.Buffer[T],offset:Int):Int", "kind" : "final def"}, {"label" : "removeChildren", "tail" : "(index: Int, parentIndex: Int, structureBuffer: IntBuffer, valuesBuffer: Buffer[T]): Int", "member" : "com.github.arturopala.tree.internal.ArrayTreeFunctions.removeChildren", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeFunctions$.html#removeChildren[T](index:Int,parentIndex:Int,structureBuffer:com.github.arturopala.bufferandslice.IntBuffer,valuesBuffer:com.github.arturopala.bufferandslice.Buffer[T]):Int", "kind" : "final def"}, {"label" : "removeTree", "tail" : "(index: Int, parentIndex: Int, structureBuffer: IntBuffer, valuesBuffer: Buffer[T]): Int", "member" : "com.github.arturopala.tree.internal.ArrayTreeFunctions.removeTree", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeFunctions$.html#removeTree[T](index:Int,parentIndex:Int,structureBuffer:com.github.arturopala.bufferandslice.IntBuffer,valuesBuffer:com.github.arturopala.bufferandslice.Buffer[T]):Int", "kind" : "final def"}, {"label" : "removeValue", "tail" : "(index: Int, parentIndex: Int, structureBuffer: IntBuffer, valuesBuffer: Buffer[T]): Int", "member" : "com.github.arturopala.tree.internal.ArrayTreeFunctions.removeValue", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeFunctions$.html#removeValue[T](index:Int,parentIndex:Int,structureBuffer:com.github.arturopala.bufferandslice.IntBuffer,valuesBuffer:com.github.arturopala.bufferandslice.Buffer[T]):Int", "kind" : "final def"}, {"label" : "removeValue", "tail" : "(index: Int, parentIndex: Int, structureBuffer: IntBuffer, valuesBuffer: Buffer[T], keepDistinct: Boolean): Int", "member" : "com.github.arturopala.tree.internal.ArrayTreeFunctions.removeValue", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeFunctions$.html#removeValue[T](index:Int,parentIndex:Int,structureBuffer:com.github.arturopala.bufferandslice.IntBuffer,valuesBuffer:com.github.arturopala.bufferandslice.Buffer[T],keepDistinct:Boolean):Int", "kind" : "final def"}, {"label" : "insertFromIteratorReverse", "tail" : "(index: Int, length: Int, structure: Iterator[Int], values: Iterator[T], structureBuffer: IntBuffer, valuesBuffer: Buffer[T]): Int", "member" : "com.github.arturopala.tree.internal.ArrayTreeFunctions.insertFromIteratorReverse", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeFunctions$.html#insertFromIteratorReverse[T](index:Int,length:Int,structure:Iterator[Int],values:Iterator[T],structureBuffer:com.github.arturopala.bufferandslice.IntBuffer,valuesBuffer:com.github.arturopala.bufferandslice.Buffer[T]):Int", "kind" : "final def"}, {"label" : "insertFromIterator", "tail" : "(index: Int, length: Int, structure: Iterator[Int], values: Iterator[T], structureBuffer: IntBuffer, valuesBuffer: Buffer[T]): Int", "member" : "com.github.arturopala.tree.internal.ArrayTreeFunctions.insertFromIterator", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeFunctions$.html#insertFromIterator[T](index:Int,length:Int,structure:Iterator[Int],values:Iterator[T],structureBuffer:com.github.arturopala.bufferandslice.IntBuffer,valuesBuffer:com.github.arturopala.bufferandslice.Buffer[T]):Int", "kind" : "final def"}, {"label" : "insertSlice", "tail" : "(index: Int, structure: IntSlice, values: Slice[T], structureBuffer: IntBuffer, valuesBuffer: Buffer[T]): Int", "member" : "com.github.arturopala.tree.internal.ArrayTreeFunctions.insertSlice", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeFunctions$.html#insertSlice[T](index:Int,structure:com.github.arturopala.bufferandslice.IntSlice,values:com.github.arturopala.bufferandslice.Slice[T],structureBuffer:com.github.arturopala.bufferandslice.IntBuffer,valuesBuffer:com.github.arturopala.bufferandslice.Buffer[T]):Int", "kind" : "final def"}, {"label" : "insertValue", "tail" : "(index: Int, parentIndex: Int, value: T, structureBuffer: IntBuffer, valuesBuffer: Buffer[T]): Int", "member" : "com.github.arturopala.tree.internal.ArrayTreeFunctions.insertValue", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeFunctions$.html#insertValue[T](index:Int,parentIndex:Int,value:T,structureBuffer:com.github.arturopala.bufferandslice.IntBuffer,valuesBuffer:com.github.arturopala.bufferandslice.Buffer[T]):Int", "kind" : "def"}, {"label" : "followPath", "tail" : "(path: Iterable[K], startIndex: Int, treeStructure: (Int) => Int, treeValues: (Int) => T, toPathItem: (T) => K, rightmost: Boolean): (IntSlice, Option[K], Iterator[K], Boolean)", "member" : "com.github.arturopala.tree.internal.ArrayTreeFunctions.followPath", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeFunctions$.html#followPath[T,K](path:Iterable[K],startIndex:Int,treeStructure:Int=>Int,treeValues:Int=>T,toPathItem:T=>K,rightmost:Boolean):(com.github.arturopala.bufferandslice.IntSlice,Option[K],Iterator[K],Boolean)", "kind" : "final def"}, {"label" : "followEntirePath", "tail" : "(path: Iterable[K], startIndex: Int, treeStructure: (Int) => Int, treeValues: (Int) => T, toPathItem: (T) => K, rightmost: Boolean): Option[IntSlice]", "member" : "com.github.arturopala.tree.internal.ArrayTreeFunctions.followEntirePath", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeFunctions$.html#followEntirePath[T,K](path:Iterable[K],startIndex:Int,treeStructure:Int=>Int,treeValues:Int=>T,toPathItem:T=>K,rightmost:Boolean):Option[com.github.arturopala.bufferandslice.IntSlice]", "kind" : "final def"}, {"label" : "followPath", "tail" : "(path: Iterable[T1], startIndex: Int, treeStructure: (Int) => Int, treeValues: (Int) => T, rightmost: Boolean): (IntSlice, Option[T1], Iterator[T1], Boolean)", "member" : "com.github.arturopala.tree.internal.ArrayTreeFunctions.followPath", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeFunctions$.html#followPath[T,T1>:T](path:Iterable[T1],startIndex:Int,treeStructure:Int=>Int,treeValues:Int=>T,rightmost:Boolean):(com.github.arturopala.bufferandslice.IntSlice,Option[T1],Iterator[T1],Boolean)", "kind" : "final def"}, {"label" : "followEntirePath", "tail" : "(path: Iterable[T1], startIndex: Int, treeStructure: (Int) => Int, treeValues: (Int) => T, rightmost: Boolean): Option[IntSlice]", "member" : "com.github.arturopala.tree.internal.ArrayTreeFunctions.followEntirePath", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeFunctions$.html#followEntirePath[T,T1>:T](path:Iterable[T1],startIndex:Int,treeStructure:Int=>Int,treeValues:Int=>T,rightmost:Boolean):Option[com.github.arturopala.bufferandslice.IntSlice]", "kind" : "final def"}, {"label" : "mkStringFromBranches", "tail" : "(startIndex: Int, treeStructure: (Int) => Int, treeValues: (Int) => T, show: (T) => String, valueSeparator: String, branchSeparator: String, branchStart: String, branchEnd: String, maxDepth: Int): StringBuilder", "member" : "com.github.arturopala.tree.internal.ArrayTreeFunctions.mkStringFromBranches", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeFunctions$.html#mkStringFromBranches[T](startIndex:Int,treeStructure:Int=>Int,treeValues:Int=>T,show:T=>String,valueSeparator:String,branchSeparator:String,branchStart:String,branchEnd:String,maxDepth:Int):StringBuilder", "kind" : "final def"}, {"label" : "calculateHeight", "tail" : "(startIndex: Int, treeStructure: (Int) => Int): Int", "member" : "com.github.arturopala.tree.internal.ArrayTreeFunctions.calculateHeight", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeFunctions$.html#calculateHeight(startIndex:Int,treeStructure:Int=>Int):Int", "kind" : "final def"}, {"label" : "calculateHeight", "tail" : "(treeStructure: IntSlice): Int", "member" : "com.github.arturopala.tree.internal.ArrayTreeFunctions.calculateHeight", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeFunctions$.html#calculateHeight(treeStructure:com.github.arturopala.bufferandslice.IntSlice):Int", "kind" : "final def"}, {"label" : "calculateWidth", "tail" : "(treeStructure: IntSlice): Int", "member" : "com.github.arturopala.tree.internal.ArrayTreeFunctions.calculateWidth", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeFunctions$.html#calculateWidth(treeStructure:com.github.arturopala.bufferandslice.IntSlice):Int", "kind" : "final def"}, {"label" : "foldLeftBranches", "tail" : "(startIndex: Int, treeStructure: (Int) => Int, initialValue: A, read: (IntBuffer, IntBuffer, Int) => R, fold: (A, R, Int) => A, maxDepth: Int): A", "member" : "com.github.arturopala.tree.internal.ArrayTreeFunctions.foldLeftBranches", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeFunctions$.html#foldLeftBranches[A,R](startIndex:Int,treeStructure:Int=>Int,initialValue:A,read:(com.github.arturopala.bufferandslice.IntBuffer,com.github.arturopala.bufferandslice.IntBuffer,Int)=>R,fold:(A,R,Int)=>A,maxDepth:Int):A", "kind" : "final def"}, {"label" : "foldLeftBranchesLengths", "tail" : "(startIndex: Int, treeStructure: (Int) => Int, initialValue: A, fold: (A, Int, Int) => A): A", "member" : "com.github.arturopala.tree.internal.ArrayTreeFunctions.foldLeftBranchesLengths", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeFunctions$.html#foldLeftBranchesLengths[A](startIndex:Int,treeStructure:Int=>Int,initialValue:A,fold:(A,Int,Int)=>A):A", "kind" : "final def"}, {"label" : "readBranchLength", "tail" : ": (IntBuffer, IntBuffer, Int) => Int", "member" : "com.github.arturopala.tree.internal.ArrayTreeFunctions.readBranchLength", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeFunctions$.html#readBranchLength:(com.github.arturopala.bufferandslice.IntBuffer,com.github.arturopala.bufferandslice.IntBuffer,Int)=>Int", "kind" : "final val"}, {"label" : "foldLeftBranchesIndexLists", "tail" : "(startIndex: Int, treeStructure: (Int) => Int, initialValue: A, fold: (A, IntSlice, Int) => A, maxDepth: Int): A", "member" : "com.github.arturopala.tree.internal.ArrayTreeFunctions.foldLeftBranchesIndexLists", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeFunctions$.html#foldLeftBranchesIndexLists[A](startIndex:Int,treeStructure:Int=>Int,initialValue:A,fold:(A,com.github.arturopala.bufferandslice.IntSlice,Int)=>A,maxDepth:Int):A", "kind" : "final def"}, {"label" : "readBranchSlice", "tail" : ": (IntBuffer, IntBuffer, Int) => IntSlice", "member" : "com.github.arturopala.tree.internal.ArrayTreeFunctions.readBranchSlice", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeFunctions$.html#readBranchSlice:(com.github.arturopala.bufferandslice.IntBuffer,com.github.arturopala.bufferandslice.IntBuffer,Int)=>com.github.arturopala.bufferandslice.IntSlice", "kind" : "final val"}, {"label" : "branchesIndexListIterator", "tail" : "(startIndex: Int, treeStructure: (Int) => Int, maxDepth: Int): Iterator[IntBuffer]", "member" : "com.github.arturopala.tree.internal.ArrayTreeFunctions.branchesIndexListIterator", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeFunctions$.html#branchesIndexListIterator(startIndex:Int,treeStructure:Int=>Int,maxDepth:Int):Iterator[com.github.arturopala.bufferandslice.IntBuffer]", "kind" : "final def"}, {"label" : "nodesIndexAndLevelIteratorBreadthFirstWithLimit", "tail" : "(startIndex: Int, treeStructure: (Int) => Int, maxDepth: Int): Iterator[(Int, Int)]", "member" : "com.github.arturopala.tree.internal.ArrayTreeFunctions.nodesIndexAndLevelIteratorBreadthFirstWithLimit", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeFunctions$.html#nodesIndexAndLevelIteratorBreadthFirstWithLimit(startIndex:Int,treeStructure:Int=>Int,maxDepth:Int):Iterator[(Int,Int)]", "kind" : "final def"}, {"label" : "nodesIndexIteratorBreadthFirstWithLimit", "tail" : "(startIndex: Int, treeStructure: (Int) => Int, maxDepth: Int): Iterator[Int]", "member" : "com.github.arturopala.tree.internal.ArrayTreeFunctions.nodesIndexIteratorBreadthFirstWithLimit", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeFunctions$.html#nodesIndexIteratorBreadthFirstWithLimit(startIndex:Int,treeStructure:Int=>Int,maxDepth:Int):Iterator[Int]", "kind" : "final def"}, {"label" : "nodesIndexAndLevelIteratorDepthFirstWithLimit", "tail" : "(startIndex: Int, treeStructure: (Int) => Int, maxDepth: Int): Iterator[(Int, Int)]", "member" : "com.github.arturopala.tree.internal.ArrayTreeFunctions.nodesIndexAndLevelIteratorDepthFirstWithLimit", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeFunctions$.html#nodesIndexAndLevelIteratorDepthFirstWithLimit(startIndex:Int,treeStructure:Int=>Int,maxDepth:Int):Iterator[(Int,Int)]", "kind" : "final def"}, {"label" : "nodesIndexIteratorDepthFirstWithLimit", "tail" : "(startIndex: Int, treeStructure: (Int) => Int, maxDepth: Int): Iterator[Int]", "member" : "com.github.arturopala.tree.internal.ArrayTreeFunctions.nodesIndexIteratorDepthFirstWithLimit", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeFunctions$.html#nodesIndexIteratorDepthFirstWithLimit(startIndex:Int,treeStructure:Int=>Int,maxDepth:Int):Iterator[Int]", "kind" : "final def"}, {"label" : "nodesIndexIteratorBreadthFirst", "tail" : "(startIndex: Int, treeStructure: (Int) => Int): Iterator[Int]", "member" : "com.github.arturopala.tree.internal.ArrayTreeFunctions.nodesIndexIteratorBreadthFirst", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeFunctions$.html#nodesIndexIteratorBreadthFirst(startIndex:Int,treeStructure:Int=>Int):Iterator[Int]", "kind" : "final def"}, {"label" : "nodesIndexIteratorDepthFirst", "tail" : "(startIndex: Int, treeStructure: (Int) => Int): Iterator[Int]", "member" : "com.github.arturopala.tree.internal.ArrayTreeFunctions.nodesIndexIteratorDepthFirst", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeFunctions$.html#nodesIndexIteratorDepthFirst(startIndex:Int,treeStructure:Int=>Int):Iterator[Int]", "kind" : "final def"}, {"label" : "childrenHavingValue", "tail" : "(value: T, parentIndex: Int, treeStructure: (Int) => Int, treeValues: (Int) => T): IntSlice", "member" : "com.github.arturopala.tree.internal.ArrayTreeFunctions.childrenHavingValue", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeFunctions$.html#childrenHavingValue[T](value:T,parentIndex:Int,treeStructure:Int=>Int,treeValues:Int=>T):com.github.arturopala.bufferandslice.IntSlice", "kind" : "final def"}, {"label" : "lastChildHavingValue", "tail" : "(value: T, parentIndex: Int, size: Int, treeStructure: (Int) => Int, treeValues: (Int) => T): Option[Int]", "member" : "com.github.arturopala.tree.internal.ArrayTreeFunctions.lastChildHavingValue", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeFunctions$.html#lastChildHavingValue[T](value:T,parentIndex:Int,size:Int,treeStructure:Int=>Int,treeValues:Int=>T):Option[Int]", "kind" : "final def"}, {"label" : "firstChildHavingValue", "tail" : "(value: T, parentIndex: Int, size: Int, treeStructure: (Int) => Int, treeValues: (Int) => T): Option[Int]", "member" : "com.github.arturopala.tree.internal.ArrayTreeFunctions.firstChildHavingValue", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeFunctions$.html#firstChildHavingValue[T](value:T,parentIndex:Int,size:Int,treeStructure:Int=>Int,treeValues:Int=>T):Option[Int]", "kind" : "final def"}, {"label" : "findNearestSiblingHavingValue", "tail" : "(parentIndex: Int, value: T, childIndex: Int, treeStructure: (Int) => Int, treeValues: (Int) => T): Option[Int]", "member" : "com.github.arturopala.tree.internal.ArrayTreeFunctions.findNearestSiblingHavingValue", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeFunctions$.html#findNearestSiblingHavingValue[T](parentIndex:Int,value:T,childIndex:Int,treeStructure:Int=>Int,treeValues:Int=>T):Option[Int]", "kind" : "final def"}, {"label" : "nearestSiblingHavingValue", "tail" : "(value: T, childIndex: Int, size: Int, treeStructure: (Int) => Int, treeValues: (Int) => T): Option[Int]", "member" : "com.github.arturopala.tree.internal.ArrayTreeFunctions.nearestSiblingHavingValue", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeFunctions$.html#nearestSiblingHavingValue[T](value:T,childIndex:Int,size:Int,treeStructure:Int=>Int,treeValues:Int=>T):Option[Int]", "kind" : "final def"}, {"label" : "writeChildrenIndexesToBuffer", "tail" : "(parentIndex: Int, treeStructure: (Int) => Int, buffer: IntBuffer, position: Int, reverse: Boolean): Int", "member" : "com.github.arturopala.tree.internal.ArrayTreeFunctions.writeChildrenIndexesToBuffer", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeFunctions$.html#writeChildrenIndexesToBuffer(parentIndex:Int,treeStructure:Int=>Int,buffer:com.github.arturopala.bufferandslice.IntBuffer,position:Int,reverse:Boolean):Int", "kind" : "final def"}, {"label" : "treeAt", "tail" : "(index: Int, treeStructure: IntBuffer, treeValues: Buffer[T]): (IntSlice, Slice[T])", "member" : "com.github.arturopala.tree.internal.ArrayTreeFunctions.treeAt", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeFunctions$.html#treeAt[T](index:Int,treeStructure:com.github.arturopala.bufferandslice.IntBuffer,treeValues:com.github.arturopala.bufferandslice.Buffer[T]):(com.github.arturopala.bufferandslice.IntSlice,com.github.arturopala.bufferandslice.Slice[T])", "kind" : "final def"}, {"label" : "treeAt", "tail" : "(index: Int, treeStructure: IntSlice, treeValues: Slice[T]): (IntSlice, Slice[T])", "member" : "com.github.arturopala.tree.internal.ArrayTreeFunctions.treeAt", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeFunctions$.html#treeAt[T](index:Int,treeStructure:com.github.arturopala.bufferandslice.IntSlice,treeValues:com.github.arturopala.bufferandslice.Slice[T]):(com.github.arturopala.bufferandslice.IntSlice,com.github.arturopala.bufferandslice.Slice[T])", "kind" : "final def"}, {"label" : "reversedChildrenOf", "tail" : "(treeStructure: IntSlice, treeValues: Slice[T]): Iterator[(IntSlice, Slice[T])]", "member" : "com.github.arturopala.tree.internal.ArrayTreeFunctions.reversedChildrenOf", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeFunctions$.html#reversedChildrenOf[T](treeStructure:com.github.arturopala.bufferandslice.IntSlice,treeValues:com.github.arturopala.bufferandslice.Slice[T]):Iterator[(com.github.arturopala.bufferandslice.IntSlice,com.github.arturopala.bufferandslice.Slice[T])]", "kind" : "final def"}, {"label" : "childrenOf", "tail" : "(treeStructure: IntSlice, treeValues: Slice[T]): Iterator[(IntSlice, Slice[T])]", "member" : "com.github.arturopala.tree.internal.ArrayTreeFunctions.childrenOf", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeFunctions$.html#childrenOf[T](treeStructure:com.github.arturopala.bufferandslice.IntSlice,treeValues:com.github.arturopala.bufferandslice.Slice[T]):Iterator[(com.github.arturopala.bufferandslice.IntSlice,com.github.arturopala.bufferandslice.Slice[T])]", "kind" : "final def"}, {"label" : "childrenIndexesReverse", "tail" : "(parentIndex: Int, treeStructure: (Int) => Int): IntBuffer", "member" : "com.github.arturopala.tree.internal.ArrayTreeFunctions.childrenIndexesReverse", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeFunctions$.html#childrenIndexesReverse(parentIndex:Int,treeStructure:Int=>Int):com.github.arturopala.bufferandslice.IntBuffer", "kind" : "final def"}, {"label" : "childrenIndexesIterator", "tail" : "(parentIndex: Int, treeStructure: (Int) => Int): Iterator[Int]", "member" : "com.github.arturopala.tree.internal.ArrayTreeFunctions.childrenIndexesIterator", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeFunctions$.html#childrenIndexesIterator(parentIndex:Int,treeStructure:Int=>Int):Iterator[Int]", "kind" : "final def"}, {"label" : "childrenIndexes", "tail" : "(parentIndex: Int, treeStructure: (Int) => Int): IntBuffer", "member" : "com.github.arturopala.tree.internal.ArrayTreeFunctions.childrenIndexes", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeFunctions$.html#childrenIndexes(parentIndex:Int,treeStructure:Int=>Int):com.github.arturopala.bufferandslice.IntBuffer", "kind" : "final def"}, {"label" : "lastChildIndex", "tail" : "(parentIndex: Int, treeStructure: (Int) => Int): Option[Int]", "member" : "com.github.arturopala.tree.internal.ArrayTreeFunctions.lastChildIndex", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeFunctions$.html#lastChildIndex(parentIndex:Int,treeStructure:Int=>Int):Option[Int]", "kind" : "final def"}, {"label" : "firstChildIndex", "tail" : "(parentIndex: Int, treeStructure: (Int) => Int): Option[Int]", "member" : "com.github.arturopala.tree.internal.ArrayTreeFunctions.firstChildIndex", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeFunctions$.html#firstChildIndex(parentIndex:Int,treeStructure:Int=>Int):Option[Int]", "kind" : "final def"}, {"label" : "treeSize", "tail" : "(index: Int, treeStructure: (Int) => Int): Int", "member" : "com.github.arturopala.tree.internal.ArrayTreeFunctions.treeSize", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeFunctions$.html#treeSize(index:Int,treeStructure:Int=>Int):Int", "kind" : "final def"}, {"label" : "bottomIndex", "tail" : "(index: Int, treeStructure: (Int) => Int): Int", "member" : "com.github.arturopala.tree.internal.ArrayTreeFunctions.bottomIndex", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeFunctions$.html#bottomIndex(index:Int,treeStructure:Int=>Int):Int", "kind" : "final def"}, {"label" : "parentIndex", "tail" : "(index: Int, size: Int, treeStructure: (Int) => Int): Int", "member" : "com.github.arturopala.tree.internal.ArrayTreeFunctions.parentIndex", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeFunctions$.html#parentIndex(index:Int,size:Int,treeStructure:Int=>Int):Int", "kind" : "final def"}, {"label" : "parentIndex", "tail" : "(index: Int, treeStructure: IntSlice): Int", "member" : "com.github.arturopala.tree.internal.ArrayTreeFunctions.parentIndex", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeFunctions$.html#parentIndex(index:Int,treeStructure:com.github.arturopala.bufferandslice.IntSlice):Int", "kind" : "final def"}, {"label" : "parentIndex", "tail" : "(index: Int, treeStructure: IntBuffer): Int", "member" : "com.github.arturopala.tree.internal.ArrayTreeFunctions.parentIndex", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeFunctions$.html#parentIndex(index:Int,treeStructure:com.github.arturopala.bufferandslice.IntBuffer):Int", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeFunctions$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeFunctions$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeFunctions$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeFunctions$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeFunctions$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeFunctions$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeFunctions$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeFunctions$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeFunctions$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeFunctions$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeFunctions$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeFunctions$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeFunctions$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeFunctions$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeFunctions$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeFunctions$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeFunctions$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeFunctions$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeFunctions$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.github.arturopala.tree.internal.ArrayTreeLike", "shortDescription" : "The Tree.ArrayTree final functions set.", "members_class" : [{"label" : "deflated", "tail" : "(tag: ClassTag[T1]): ArrayTree[T1]", "member" : "com.github.arturopala.tree.internal.ArrayTreeLike.deflated", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeLike.html#deflated[T1>:T](implicittag:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree.ArrayTree[T1]", "kind" : "final def"}, {"label" : "inflated", "tail" : "(): Tree[T]", "member" : "com.github.arturopala.tree.internal.ArrayTreeLike.inflated", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeLike.html#inflated:com.github.arturopala.tree.Tree[T]", "kind" : "final def"}, {"label" : "mkStringFromBranches", "tail" : "(show: (T) => String, valueSeparator: String, branchSeparator: String, branchStart: String, branchEnd: String, maxDepth: Int): String", "member" : "com.github.arturopala.tree.internal.ArrayTreeLike.mkStringFromBranches", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeLike.html#mkStringFromBranches(show:T=>String,valueSeparator:String,branchSeparator:String,branchStart:String,branchEnd:String,maxDepth:Int):String", "kind" : "final def"}, {"label" : "toStructureArray", "tail" : "(): Array[Int]", "member" : "com.github.arturopala.tree.internal.ArrayTreeLike.toStructureArray", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeLike.html#toStructureArray:Array[Int]", "kind" : "final def"}, {"label" : "toBuffers", "tail" : "(arg0: ClassTag[T1]): (IntBuffer, Buffer[T1])", "member" : "com.github.arturopala.tree.internal.ArrayTreeLike.toBuffers", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeLike.html#toBuffers[T1>:T](implicitevidence$38:scala.reflect.ClassTag[T1]):(com.github.arturopala.bufferandslice.IntBuffer,com.github.arturopala.bufferandslice.Buffer[T1])", "kind" : "final def"}, {"label" : "toSlices", "tail" : "(arg0: ClassTag[T1]): (IntSlice, Slice[T1])", "member" : "com.github.arturopala.tree.internal.ArrayTreeLike.toSlices", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeLike.html#toSlices[T1>:T](implicitevidence$37:scala.reflect.ClassTag[T1]):(com.github.arturopala.bufferandslice.IntSlice,com.github.arturopala.bufferandslice.Slice[T1])", "kind" : "final def"}, {"label" : "toArrays", "tail" : "(arg0: ClassTag[T1]): (Array[Int], Array[T1])", "member" : "com.github.arturopala.tree.internal.ArrayTreeLike.toArrays", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeLike.html#toArrays[T1>:T](implicitevidence$36:scala.reflect.ClassTag[T1]):(Array[Int],Array[T1])", "kind" : "final def"}, {"label" : "toPairsIterator", "tail" : "(): Iterator[(Int, T)]", "member" : "com.github.arturopala.tree.internal.ArrayTreeLike.toPairsIterator", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeLike.html#toPairsIterator:Iterator[(Int,T)]", "kind" : "final def"}, {"label" : "containsPath", "tail" : "(path: Iterable[K], toPathItem: (T) => K): Boolean", "member" : "com.github.arturopala.tree.internal.ArrayTreeLike.containsPath", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeLike.html#containsPath[K](path:Iterable[K],toPathItem:T=>K):Boolean", "kind" : "final def"}, {"label" : "containsPath", "tail" : "(path: Iterable[T1]): Boolean", "member" : "com.github.arturopala.tree.internal.ArrayTreeLike.containsPath", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeLike.html#containsPath[T1>:T](path:Iterable[T1]):Boolean", "kind" : "final def"}, {"label" : "containsBranch", "tail" : "(branch: Iterable[K], toPathItem: (T) => K): Boolean", "member" : "com.github.arturopala.tree.internal.ArrayTreeLike.containsBranch", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeLike.html#containsBranch[K](branch:Iterable[K],toPathItem:T=>K):Boolean", "kind" : "final def"}, {"label" : "containsBranch", "tail" : "(branch: Iterable[T1]): Boolean", "member" : "com.github.arturopala.tree.internal.ArrayTreeLike.containsBranch", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeLike.html#containsBranch[T1>:T](branch:Iterable[T1]):Boolean", "kind" : "final def"}, {"label" : "containsChild", "tail" : "(value: T1): Boolean", "member" : "com.github.arturopala.tree.internal.ArrayTreeLike.containsChild", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeLike.html#containsChild[T1>:T](value:T1):Boolean", "kind" : "final def"}, {"label" : "selectTree", "tail" : "(path: Iterable[K], toPathItem: (T) => K, rightmost: Boolean): Option[Tree[T]]", "member" : "com.github.arturopala.tree.internal.ArrayTreeLike.selectTree", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeLike.html#selectTree[K](path:Iterable[K],toPathItem:T=>K,rightmost:Boolean):Option[com.github.arturopala.tree.Tree[T]]", "kind" : "final def"}, {"label" : "selectTree", "tail" : "(path: Iterable[T1], rightmost: Boolean)(arg0: ClassTag[T1]): Option[Tree[T]]", "member" : "com.github.arturopala.tree.internal.ArrayTreeLike.selectTree", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeLike.html#selectTree[T1>:T](path:Iterable[T1],rightmost:Boolean)(implicitevidence$35:scala.reflect.ClassTag[T1]):Option[com.github.arturopala.tree.Tree[T]]", "kind" : "final def"}, {"label" : "selectValue", "tail" : "(path: Iterable[K], toPathItem: (T) => K, rightmost: Boolean): Option[T]", "member" : "com.github.arturopala.tree.internal.ArrayTreeLike.selectValue", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeLike.html#selectValue[K](path:Iterable[K],toPathItem:T=>K,rightmost:Boolean):Option[T]", "kind" : "final def"}, {"label" : "map", "tail" : "(f: (T) => K)(arg0: ClassTag[K]): Tree[K]", "member" : "com.github.arturopala.tree.internal.ArrayTreeLike.map", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeLike.html#map[K](f:T=>K)(implicitevidence$34:scala.reflect.ClassTag[K]):com.github.arturopala.tree.Tree[K]", "kind" : "final def"}, {"label" : "removeTreeAt", "tail" : "(path: Iterable[K], toPathItem: (T) => K)(arg0: ClassTag[T1]): Tree[T]", "member" : "com.github.arturopala.tree.internal.ArrayTreeLike.removeTreeAt", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeLike.html#removeTreeAt[K,T1>:T](path:Iterable[K],toPathItem:T=>K)(implicitevidence$33:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T]", "kind" : "final def"}, {"label" : "removeTreeAt", "tail" : "(path: Iterable[T1])(arg0: ClassTag[T1]): Tree[T]", "member" : "com.github.arturopala.tree.internal.ArrayTreeLike.removeTreeAt", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeLike.html#removeTreeAt[T1>:T](path:Iterable[T1])(implicitevidence$32:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T]", "kind" : "final def"}, {"label" : "removeChild", "tail" : "(value: T1)(arg0: ClassTag[T1]): Tree[T]", "member" : "com.github.arturopala.tree.internal.ArrayTreeLike.removeChild", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeLike.html#removeChild[T1>:T](value:T1)(implicitevidence$31:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T]", "kind" : "final def"}, {"label" : "removeValueAt", "tail" : "(path: Iterable[K], toPathItem: (T) => K)(arg0: ClassTag[T1]): Tree[T]", "member" : "com.github.arturopala.tree.internal.ArrayTreeLike.removeValueAt", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeLike.html#removeValueAt[K,T1>:T](path:Iterable[K],toPathItem:T=>K)(implicitevidence$30:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T]", "kind" : "final def"}, {"label" : "removeValueAt", "tail" : "(path: Iterable[T1])(arg0: ClassTag[T1]): Tree[T]", "member" : "com.github.arturopala.tree.internal.ArrayTreeLike.removeValueAt", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeLike.html#removeValueAt[T1>:T](path:Iterable[T1])(implicitevidence$29:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T]", "kind" : "final def"}, {"label" : "removeChildValue", "tail" : "(value: T1)(arg0: ClassTag[T1]): Tree[T]", "member" : "com.github.arturopala.tree.internal.ArrayTreeLike.removeChildValue", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeLike.html#removeChildValue[T1>:T](value:T1)(implicitevidence$28:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T]", "kind" : "final def"}, {"label" : "modifyTreeAt", "tail" : "(path: Iterable[K], modify: (Tree[T]) => Tree[T1], toPathItem: (T) => K)(arg0: ClassTag[T1]): Either[Tree[T], Tree[T1]]", "member" : "com.github.arturopala.tree.internal.ArrayTreeLike.modifyTreeAt", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeLike.html#modifyTreeAt[K,T1>:T](path:Iterable[K],modify:com.github.arturopala.tree.Tree[T]=>com.github.arturopala.tree.Tree[T1],toPathItem:T=>K)(implicitevidence$27:scala.reflect.ClassTag[T1]):Either[com.github.arturopala.tree.Tree[T],com.github.arturopala.tree.Tree[T1]]", "kind" : "final def"}, {"label" : "modifyTreeAt", "tail" : "(path: Iterable[T1], modify: (Tree[T]) => Tree[T1])(arg0: ClassTag[T1]): Either[Tree[T], Tree[T1]]", "member" : "com.github.arturopala.tree.internal.ArrayTreeLike.modifyTreeAt", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeLike.html#modifyTreeAt[T1>:T](path:Iterable[T1],modify:com.github.arturopala.tree.Tree[T]=>com.github.arturopala.tree.Tree[T1])(implicitevidence$26:scala.reflect.ClassTag[T1]):Either[com.github.arturopala.tree.Tree[T],com.github.arturopala.tree.Tree[T1]]", "kind" : "final def"}, {"label" : "modifyChild", "tail" : "(value: T1, modify: (Tree[T]) => Tree[T1])(arg0: ClassTag[T1]): Tree[T1]", "member" : "com.github.arturopala.tree.internal.ArrayTreeLike.modifyChild", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeLike.html#modifyChild[T1>:T](value:T1,modify:com.github.arturopala.tree.Tree[T]=>com.github.arturopala.tree.Tree[T1])(implicitevidence$25:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T1]", "kind" : "final def"}, {"label" : "modifyValueAt", "tail" : "(path: Iterable[K], modify: (T) => T1, toPathItem: (T) => K)(arg0: ClassTag[T1]): Either[Tree[T], Tree[T1]]", "member" : "com.github.arturopala.tree.internal.ArrayTreeLike.modifyValueAt", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeLike.html#modifyValueAt[K,T1>:T](path:Iterable[K],modify:T=>T1,toPathItem:T=>K)(implicitevidence$24:scala.reflect.ClassTag[T1]):Either[com.github.arturopala.tree.Tree[T],com.github.arturopala.tree.Tree[T1]]", "kind" : "final def"}, {"label" : "modifyValueAt", "tail" : "(path: Iterable[T1], modify: (T) => T1)(arg0: ClassTag[T1]): Either[Tree[T], Tree[T1]]", "member" : "com.github.arturopala.tree.internal.ArrayTreeLike.modifyValueAt", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeLike.html#modifyValueAt[T1>:T](path:Iterable[T1],modify:T=>T1)(implicitevidence$23:scala.reflect.ClassTag[T1]):Either[com.github.arturopala.tree.Tree[T],com.github.arturopala.tree.Tree[T1]]", "kind" : "final def"}, {"label" : "modifyChildValue", "tail" : "(value: T1, modify: (T) => T1)(arg0: ClassTag[T1]): Tree[T1]", "member" : "com.github.arturopala.tree.internal.ArrayTreeLike.modifyChildValue", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeLike.html#modifyChildValue[T1>:T](value:T1,modify:T=>T1)(implicitevidence$22:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T1]", "kind" : "final def"}, {"label" : "modifyHead", "tail" : "(modify: (T) => T1)(arg0: ClassTag[T1]): Tree[T1]", "member" : "com.github.arturopala.tree.internal.ArrayTreeLike.modifyHead", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeLike.html#modifyHead[T1>:T](modify:T=>T1)(implicitevidence$21:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T1]", "kind" : "final def"}, {"label" : "updateTreeAt", "tail" : "(path: Iterable[K], replacement: Tree[T1], toPathItem: (T) => K)(arg0: ClassTag[T1]): Either[Tree[T], Tree[T1]]", "member" : "com.github.arturopala.tree.internal.ArrayTreeLike.updateTreeAt", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeLike.html#updateTreeAt[K,T1>:T](path:Iterable[K],replacement:com.github.arturopala.tree.Tree[T1],toPathItem:T=>K)(implicitevidence$20:scala.reflect.ClassTag[T1]):Either[com.github.arturopala.tree.Tree[T],com.github.arturopala.tree.Tree[T1]]", "kind" : "final def"}, {"label" : "updateTreeAt", "tail" : "(path: Iterable[T1], replacement: Tree[T1])(arg0: ClassTag[T1]): Either[Tree[T], Tree[T1]]", "member" : "com.github.arturopala.tree.internal.ArrayTreeLike.updateTreeAt", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeLike.html#updateTreeAt[T1>:T](path:Iterable[T1],replacement:com.github.arturopala.tree.Tree[T1])(implicitevidence$19:scala.reflect.ClassTag[T1]):Either[com.github.arturopala.tree.Tree[T],com.github.arturopala.tree.Tree[T1]]", "kind" : "final def"}, {"label" : "updateChild", "tail" : "(value: T1, replacement: Tree[T1])(arg0: ClassTag[T1]): Tree[T1]", "member" : "com.github.arturopala.tree.internal.ArrayTreeLike.updateChild", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeLike.html#updateChild[T1>:T](value:T1,replacement:com.github.arturopala.tree.Tree[T1])(implicitevidence$18:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T1]", "kind" : "final def"}, {"label" : "updateValueAt", "tail" : "(path: Iterable[K], replacement: T1, toPathItem: (T) => K)(arg0: ClassTag[T1]): Either[Tree[T], Tree[T1]]", "member" : "com.github.arturopala.tree.internal.ArrayTreeLike.updateValueAt", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeLike.html#updateValueAt[K,T1>:T](path:Iterable[K],replacement:T1,toPathItem:T=>K)(implicitevidence$17:scala.reflect.ClassTag[T1]):Either[com.github.arturopala.tree.Tree[T],com.github.arturopala.tree.Tree[T1]]", "kind" : "final def"}, {"label" : "updateValueAt", "tail" : "(path: Iterable[T1], replacement: T1)(arg0: ClassTag[T1]): Either[Tree[T], Tree[T1]]", "member" : "com.github.arturopala.tree.internal.ArrayTreeLike.updateValueAt", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeLike.html#updateValueAt[T1>:T](path:Iterable[T1],replacement:T1)(implicitevidence$16:scala.reflect.ClassTag[T1]):Either[com.github.arturopala.tree.Tree[T],com.github.arturopala.tree.Tree[T1]]", "kind" : "final def"}, {"label" : "updateChildValue", "tail" : "(existingValue: T1, replacement: T1)(arg0: ClassTag[T1]): Tree[T1]", "member" : "com.github.arturopala.tree.internal.ArrayTreeLike.updateChildValue", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeLike.html#updateChildValue[T1>:T](existingValue:T1,replacement:T1)(implicitevidence$15:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T1]", "kind" : "final def"}, {"label" : "updateHead", "tail" : "(replacement: T1)(arg0: ClassTag[T1]): Tree[T1]", "member" : "com.github.arturopala.tree.internal.ArrayTreeLike.updateHead", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeLike.html#updateHead[T1>:T](replacement:T1)(implicitevidence$14:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T1]", "kind" : "final def"}, {"label" : "insertBranch", "tail" : "(branch: Iterable[T1], append: Boolean)(arg0: ClassTag[T1]): Tree[T1]", "member" : "com.github.arturopala.tree.internal.ArrayTreeLike.insertBranch", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeLike.html#insertBranch[T1>:T](branch:Iterable[T1],append:Boolean)(implicitevidence$13:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T1]", "kind" : "final def"}, {"label" : "insertChildrenAt", "tail" : "(path: Iterable[K], children: Iterable[Tree[T1]], toPathItem: (T) => K, append: Boolean)(arg0: ClassTag[T1]): Either[Tree[T], Tree[T1]]", "member" : "com.github.arturopala.tree.internal.ArrayTreeLike.insertChildrenAt", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeLike.html#insertChildrenAt[K,T1>:T](path:Iterable[K],children:Iterable[com.github.arturopala.tree.Tree[T1]],toPathItem:T=>K,append:Boolean)(implicitevidence$12:scala.reflect.ClassTag[T1]):Either[com.github.arturopala.tree.Tree[T],com.github.arturopala.tree.Tree[T1]]", "kind" : "final def"}, {"label" : "insertChildrenAt", "tail" : "(path: Iterable[T1], children: Iterable[Tree[T1]], append: Boolean)(arg0: ClassTag[T1]): Tree[T1]", "member" : "com.github.arturopala.tree.internal.ArrayTreeLike.insertChildrenAt", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeLike.html#insertChildrenAt[T1>:T](path:Iterable[T1],children:Iterable[com.github.arturopala.tree.Tree[T1]],append:Boolean)(implicitevidence$11:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T1]", "kind" : "final def"}, {"label" : "insertChildAt", "tail" : "(path: Iterable[K], child: Tree[T1], toPathItem: (T) => K, append: Boolean)(arg0: ClassTag[T1]): Either[Tree[T], Tree[T1]]", "member" : "com.github.arturopala.tree.internal.ArrayTreeLike.insertChildAt", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeLike.html#insertChildAt[K,T1>:T](path:Iterable[K],child:com.github.arturopala.tree.Tree[T1],toPathItem:T=>K,append:Boolean)(implicitevidence$10:scala.reflect.ClassTag[T1]):Either[com.github.arturopala.tree.Tree[T],com.github.arturopala.tree.Tree[T1]]", "kind" : "final def"}, {"label" : "insertChildAt", "tail" : "(path: Iterable[T1], child: Tree[T1], append: Boolean)(arg0: ClassTag[T1]): Tree[T1]", "member" : "com.github.arturopala.tree.internal.ArrayTreeLike.insertChildAt", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeLike.html#insertChildAt[T1>:T](path:Iterable[T1],child:com.github.arturopala.tree.Tree[T1],append:Boolean)(implicitevidence$9:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T1]", "kind" : "final def"}, {"label" : "insertChildren", "tail" : "(children: Iterable[Tree[T1]], append: Boolean)(arg0: ClassTag[T1]): Tree[T1]", "member" : "com.github.arturopala.tree.internal.ArrayTreeLike.insertChildren", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeLike.html#insertChildren[T1>:T](children:Iterable[com.github.arturopala.tree.Tree[T1]],append:Boolean)(implicitevidence$8:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T1]", "kind" : "final def"}, {"label" : "insertChild", "tail" : "(child: Tree[T1], append: Boolean)(arg0: ClassTag[T1]): Tree[T1]", "member" : "com.github.arturopala.tree.internal.ArrayTreeLike.insertChild", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeLike.html#insertChild[T1>:T](child:com.github.arturopala.tree.Tree[T1],append:Boolean)(implicitevidence$7:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T1]", "kind" : "final def"}, {"label" : "insertLeafAt", "tail" : "(path: Iterable[K], value: T1, toPathItem: (T) => K, append: Boolean)(arg0: ClassTag[T1]): Either[Tree[T], Tree[T1]]", "member" : "com.github.arturopala.tree.internal.ArrayTreeLike.insertLeafAt", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeLike.html#insertLeafAt[K,T1>:T](path:Iterable[K],value:T1,toPathItem:T=>K,append:Boolean)(implicitevidence$6:scala.reflect.ClassTag[T1]):Either[com.github.arturopala.tree.Tree[T],com.github.arturopala.tree.Tree[T1]]", "kind" : "final def"}, {"label" : "insertLeafAt", "tail" : "(path: Iterable[T1], value: T1, append: Boolean)(arg0: ClassTag[T1]): Tree[T1]", "member" : "com.github.arturopala.tree.internal.ArrayTreeLike.insertLeafAt", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeLike.html#insertLeafAt[T1>:T](path:Iterable[T1],value:T1,append:Boolean)(implicitevidence$5:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T1]", "kind" : "final def"}, {"label" : "insertLeaves", "tail" : "(values: Iterable[T1], append: Boolean)(arg0: ClassTag[T1]): Tree[T1]", "member" : "com.github.arturopala.tree.internal.ArrayTreeLike.insertLeaves", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeLike.html#insertLeaves[T1>:T](values:Iterable[T1],append:Boolean)(implicitevidence$4:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T1]", "kind" : "final def"}, {"label" : "insertLeaf", "tail" : "(value: T1, append: Boolean)(arg0: ClassTag[T1]): Tree[T1]", "member" : "com.github.arturopala.tree.internal.ArrayTreeLike.insertLeaf", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeLike.html#insertLeaf[T1>:T](value:T1,append:Boolean)(implicitevidence$3:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T1]", "kind" : "final def"}, {"label" : "prepend", "tail" : "(value: T1)(arg0: ClassTag[T1]): ArrayTree[T1]", "member" : "com.github.arturopala.tree.internal.ArrayTreeLike.prepend", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeLike.html#prepend[T1>:T](value:T1)(implicitevidence$2:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree.ArrayTree[T1]", "kind" : "final def"}, {"label" : "countBranches", "tail" : "(pred: (Iterable[T]) => Boolean): Int", "member" : "com.github.arturopala.tree.internal.ArrayTreeLike.countBranches", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeLike.html#countBranches(pred:Iterable[T]=>Boolean):Int", "kind" : "final def"}, {"label" : "branchesWithFilter", "tail" : "(pred: (Iterable[T]) => Boolean, maxDepth: Int): Iterable[Iterable[T]]", "member" : "com.github.arturopala.tree.internal.ArrayTreeLike.branchesWithFilter", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeLike.html#branchesWithFilter(pred:Iterable[T]=>Boolean,maxDepth:Int):Iterable[Iterable[T]]", "kind" : "final def"}, {"label" : "branches", "tail" : "(): Iterable[Iterable[T]]", "member" : "com.github.arturopala.tree.internal.ArrayTreeLike.branches", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeLike.html#branches:Iterable[Iterable[T]]", "kind" : "final def"}, {"label" : "treesAndLevelsWithFilter", "tail" : "(pred: (Tree[T]) => Boolean, mode: TraversingMode, maxDepth: Int): Iterable[(Int, Tree[T])]", "member" : "com.github.arturopala.tree.internal.ArrayTreeLike.treesAndLevelsWithFilter", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeLike.html#treesAndLevelsWithFilter(pred:com.github.arturopala.tree.Tree[T]=>Boolean,mode:com.github.arturopala.tree.TreeOptions.TraversingMode,maxDepth:Int):Iterable[(Int,com.github.arturopala.tree.Tree[T])]", "kind" : "def"}, {"label" : "treesWithFilter", "tail" : "(pred: (Tree[T]) => Boolean, mode: TraversingMode, maxDepth: Int): Iterable[Tree[T]]", "member" : "com.github.arturopala.tree.internal.ArrayTreeLike.treesWithFilter", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeLike.html#treesWithFilter(pred:com.github.arturopala.tree.Tree[T]=>Boolean,mode:com.github.arturopala.tree.TreeOptions.TraversingMode,maxDepth:Int):Iterable[com.github.arturopala.tree.Tree[T]]", "kind" : "final def"}, {"label" : "trees", "tail" : "(mode: TraversingMode): Iterable[Tree[T]]", "member" : "com.github.arturopala.tree.internal.ArrayTreeLike.trees", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeLike.html#trees(mode:com.github.arturopala.tree.TreeOptions.TraversingMode):Iterable[com.github.arturopala.tree.Tree[T]]", "kind" : "final def"}, {"label" : "children", "tail" : "(): Iterable[Tree[T]]", "member" : "com.github.arturopala.tree.internal.ArrayTreeLike.children", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeLike.html#children:Iterable[com.github.arturopala.tree.Tree[T]]", "kind" : "final def"}, {"label" : "childrenValues", "tail" : "(): Iterable[T]", "member" : "com.github.arturopala.tree.internal.ArrayTreeLike.childrenValues", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeLike.html#childrenValues:Iterable[T]", "kind" : "final def"}, {"label" : "valuesAndLevelsWithFilter", "tail" : "(pred: (T) => Boolean, mode: TraversingMode, maxDepth: Int): Iterable[(Int, T, Boolean)]", "member" : "com.github.arturopala.tree.internal.ArrayTreeLike.valuesAndLevelsWithFilter", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeLike.html#valuesAndLevelsWithFilter(pred:T=>Boolean,mode:com.github.arturopala.tree.TreeOptions.TraversingMode,maxDepth:Int):Iterable[(Int,T,Boolean)]", "kind" : "def"}, {"label" : "valuesWithFilter", "tail" : "(pred: (T) => Boolean, mode: TraversingMode, maxDepth: Int): Iterable[T]", "member" : "com.github.arturopala.tree.internal.ArrayTreeLike.valuesWithFilter", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeLike.html#valuesWithFilter(pred:T=>Boolean,mode:com.github.arturopala.tree.TreeOptions.TraversingMode,maxDepth:Int):Iterable[T]", "kind" : "final def"}, {"label" : "leaves", "tail" : "(): Iterable[T]", "member" : "com.github.arturopala.tree.internal.ArrayTreeLike.leaves", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeLike.html#leaves:Iterable[T]", "kind" : "final def"}, {"label" : "values", "tail" : "(mode: TraversingMode): Iterable[T]", "member" : "com.github.arturopala.tree.internal.ArrayTreeLike.values", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeLike.html#values(mode:com.github.arturopala.tree.TreeOptions.TraversingMode):Iterable[T]", "kind" : "final def"}, {"label" : "headOption", "tail" : "(): Option[T]", "member" : "com.github.arturopala.tree.internal.ArrayTreeLike.headOption", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeLike.html#headOption:Option[T]", "kind" : "final def"}, {"label" : "head", "tail" : "(): T", "member" : "com.github.arturopala.tree.internal.ArrayTreeLike.head", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeLike.html#head:T", "kind" : "final def"}, {"member" : "com.github.arturopala.tree.internal.ArrayTreeLike#<init>", "error" : "unsupported entity"}, {"label" : "removeChildrenAt", "tail" : "(path: Iterable[K], toPathItem: (T) => K)(arg0: ClassTag[T1]): Tree[T]", "member" : "com.github.arturopala.tree.TreeLike.removeChildrenAt", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeLike.html#removeChildrenAt[K,T1>:T](path:Iterable[K],toPathItem:T=>K)(implicitevidence$46:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T]", "kind" : "def"}, {"label" : "removeChildrenAt", "tail" : "(path: Iterable[T1])(arg0: ClassTag[T1]): Tree[T]", "member" : "com.github.arturopala.tree.TreeLike.removeChildrenAt", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeLike.html#removeChildrenAt[T1>:T](path:Iterable[T1])(implicitevidence$45:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T]", "kind" : "def"}, {"label" : "removeChildren", "tail" : "()(arg0: ClassTag[T1]): Tree[T]", "member" : "com.github.arturopala.tree.TreeLike.removeChildren", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeLike.html#removeChildren[T1>:T]()(implicitevidence$42:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T]", "kind" : "def"}, {"label" : "modifyChildrenAt", "tail" : "(path: Iterable[K], modify: (Iterable[Tree[T]]) => Iterable[Tree[T1]], toPathItem: (T) => K)(arg0: ClassTag[T1]): Either[Tree[T], Tree[T1]]", "member" : "com.github.arturopala.tree.TreeLike.modifyChildrenAt", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeLike.html#modifyChildrenAt[K,T1>:T](path:Iterable[K],modify:Iterable[com.github.arturopala.tree.Tree[T]]=>Iterable[com.github.arturopala.tree.Tree[T1]],toPathItem:T=>K)(implicitevidence$37:scala.reflect.ClassTag[T1]):Either[com.github.arturopala.tree.Tree[T],com.github.arturopala.tree.Tree[T1]]", "kind" : "def"}, {"label" : "modifyChildrenAt", "tail" : "(path: Iterable[T1], modify: (Iterable[Tree[T]]) => Iterable[Tree[T1]])(arg0: ClassTag[T1]): Either[Tree[T], Tree[T1]]", "member" : "com.github.arturopala.tree.TreeLike.modifyChildrenAt", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeLike.html#modifyChildrenAt[T1>:T](path:Iterable[T1],modify:Iterable[com.github.arturopala.tree.Tree[T]]=>Iterable[com.github.arturopala.tree.Tree[T1]])(implicitevidence$36:scala.reflect.ClassTag[T1]):Either[com.github.arturopala.tree.Tree[T],com.github.arturopala.tree.Tree[T1]]", "kind" : "def"}, {"label" : "insertBranches", "tail" : "(branches: Iterable[Iterable[T1]], append: Boolean)(arg0: ClassTag[T1]): Tree[T1]", "member" : "com.github.arturopala.tree.TreeLike.insertBranches", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeLike.html#insertBranches[T1>:T](branches:Iterable[Iterable[T1]],append:Boolean)(implicitevidence$21:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T1]", "kind" : "def"}, {"label" : "diff", "tail" : "(other: Tree[T1]): Tree[T1]", "member" : "com.github.arturopala.tree.TreeLike.diff", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeLike.html#diff[T1>:T](other:com.github.arturopala.tree.Tree[T1]):com.github.arturopala.tree.Tree[T1]", "kind" : "def"}, {"label" : "intersect", "tail" : "(other: Tree[T1]): Tree[T1]", "member" : "com.github.arturopala.tree.TreeLike.intersect", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeLike.html#intersect[T1>:T](other:com.github.arturopala.tree.Tree[T1]):com.github.arturopala.tree.Tree[T1]", "kind" : "def"}, {"label" : "union", "tail" : "(other: Tree[T1], keepDistinct: Boolean): Tree[T1]", "member" : "com.github.arturopala.tree.TreeLike.union", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeLike.html#union[T1>:T](other:com.github.arturopala.tree.Tree[T1],keepDistinct:Boolean):com.github.arturopala.tree.Tree[T1]", "kind" : "def"}, {"label" : "foldBranches", "tail" : "(initial: A, maxDepth: Int)(f: (A, Iterable[T]) => A): A", "member" : "com.github.arturopala.tree.TreeLike.foldBranches", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeLike.html#foldBranches[A](initial:A,maxDepth:Int)(f:(A,Iterable[T])=>A):A", "kind" : "def"}, {"label" : "foldTreesWithLevel", "tail" : "(initial: A, maxDepth: Int)(f: (A, Int, Tree[T]) => A): A", "member" : "com.github.arturopala.tree.TreeLike.foldTreesWithLevel", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeLike.html#foldTreesWithLevel[A](initial:A,maxDepth:Int)(f:(A,Int,com.github.arturopala.tree.Tree[T])=>A):A", "kind" : "def"}, {"label" : "foldTrees", "tail" : "(initial: A, maxDepth: Int)(f: (A, Tree[T]) => A): A", "member" : "com.github.arturopala.tree.TreeLike.foldTrees", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeLike.html#foldTrees[A](initial:A,maxDepth:Int)(f:(A,com.github.arturopala.tree.Tree[T])=>A):A", "kind" : "def"}, {"label" : "foldValuesWithLevel", "tail" : "(initial: A, maxDepth: Int)(f: (A, Int, T) => A): A", "member" : "com.github.arturopala.tree.TreeLike.foldValuesWithLevel", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeLike.html#foldValuesWithLevel[A](initial:A,maxDepth:Int)(f:(A,Int,T)=>A):A", "kind" : "def"}, {"label" : "foldValues", "tail" : "(initial: A, maxDepth: Int)(f: (A, T) => A): A", "member" : "com.github.arturopala.tree.TreeLike.foldValues", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeLike.html#foldValues[A](initial:A,maxDepth:Int)(f:(A,T)=>A):A", "kind" : "def"}, {"label" : "filterChildrenAt", "tail" : "(path: Iterable[K], pred: (Tree[T]) => Boolean, toPathItem: (T) => K)(arg0: ClassTag[T1]): Tree[T]", "member" : "com.github.arturopala.tree.TreeLike.filterChildrenAt", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeLike.html#filterChildrenAt[K,T1>:T](path:Iterable[K],pred:com.github.arturopala.tree.Tree[T]=>Boolean,toPathItem:T=>K)(implicitevidence$8:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T]", "kind" : "def"}, {"label" : "filterChildrenAt", "tail" : "(path: Iterable[T1], pred: (Tree[T]) => Boolean)(arg0: ClassTag[T1]): Tree[T]", "member" : "com.github.arturopala.tree.TreeLike.filterChildrenAt", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeLike.html#filterChildrenAt[T1>:T](path:Iterable[T1],pred:com.github.arturopala.tree.Tree[T]=>Boolean)(implicitevidence$7:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T]", "kind" : "def"}, {"label" : "filterChildren", "tail" : "(pred: (Tree[T]) => Boolean)(arg0: ClassTag[T1]): Tree[T]", "member" : "com.github.arturopala.tree.TreeLike.filterChildren", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeLike.html#filterChildren[T1>:T](pred:com.github.arturopala.tree.Tree[T]=>Boolean)(implicitevidence$6:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T]", "kind" : "def"}, {"label" : "filterBranches", "tail" : "(f: (Iterable[T]) => Boolean): Tree[T]", "member" : "com.github.arturopala.tree.TreeLike.filterBranches", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeLike.html#filterBranches(f:Iterable[T]=>Boolean):com.github.arturopala.tree.Tree[T]", "kind" : "def"}, {"label" : "filterTrees", "tail" : "(f: (Tree[T]) => Boolean, keepDistinct: Boolean): Tree[T]", "member" : "com.github.arturopala.tree.TreeLike.filterTrees", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeLike.html#filterTrees(f:com.github.arturopala.tree.Tree[T]=>Boolean,keepDistinct:Boolean):com.github.arturopala.tree.Tree[T]", "kind" : "def"}, {"label" : "filterValues", "tail" : "(f: (T) => Boolean, keepDistinct: Boolean): Tree[T]", "member" : "com.github.arturopala.tree.TreeLike.filterValues", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeLike.html#filterValues(f:T=>Boolean,keepDistinct:Boolean):com.github.arturopala.tree.Tree[T]", "kind" : "def"}, {"label" : "distinct", "tail" : "(): Tree[T]", "member" : "com.github.arturopala.tree.TreeLike.distinct", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeLike.html#distinct:com.github.arturopala.tree.Tree[T]", "kind" : "def"}, {"label" : "dropLeaves", "tail" : "(): Tree[T]", "member" : "com.github.arturopala.tree.TreeLike.dropLeaves", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeLike.html#dropLeaves:com.github.arturopala.tree.Tree[T]", "kind" : "def"}, {"label" : "trim", "tail" : "(height: Int): Tree[T]", "member" : "com.github.arturopala.tree.TreeLike.trim", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeLike.html#trim(height:Int):com.github.arturopala.tree.Tree[T]", "kind" : "def"}, {"label" : "mapChildren", "tail" : "(f: (Iterable[Tree[T]]) => Iterable[Tree[K]])(arg0: ClassTag[K]): Tree[K]", "member" : "com.github.arturopala.tree.TreeLike.mapChildren", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeLike.html#mapChildren[K](f:Iterable[com.github.arturopala.tree.Tree[T]]=>Iterable[com.github.arturopala.tree.Tree[K]])(implicitevidence$5:scala.reflect.ClassTag[K]):com.github.arturopala.tree.Tree[K]", "kind" : "def"}, {"label" : "mapBranches", "tail" : "(f: (Iterable[T]) => Iterable[K])(arg0: ClassTag[K]): Tree[K]", "member" : "com.github.arturopala.tree.TreeLike.mapBranches", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeLike.html#mapBranches[K](f:Iterable[T]=>Iterable[K])(implicitevidence$4:scala.reflect.ClassTag[K]):com.github.arturopala.tree.Tree[K]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (T) => Tree[K])(arg0: ClassTag[K]): Tree[K]", "member" : "com.github.arturopala.tree.TreeLike.flatMap", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeLike.html#flatMap[K](f:T=>com.github.arturopala.tree.Tree[K])(implicitevidence$3:scala.reflect.ClassTag[K]):com.github.arturopala.tree.Tree[K]", "kind" : "def"}, {"label" : "findPathsLeadingTo", "tail" : "(value: T1): Iterator[Iterable[T]]", "member" : "com.github.arturopala.tree.TreeLike.findPathsLeadingTo", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeLike.html#findPathsLeadingTo[T1>:T](value:T1):Iterator[Iterable[T]]", "kind" : "def"}, {"label" : "existsPath", "tail" : "(path: (Iterable[K]) => Boolean, toPathItem: (T) => K): Boolean", "member" : "com.github.arturopala.tree.TreeLike.existsPath", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeLike.html#existsPath[K](path:Iterable[K]=>Boolean,toPathItem:T=>K):Boolean", "kind" : "def"}, {"label" : "existsPath", "tail" : "(path: (Iterable[T]) => Boolean): Boolean", "member" : "com.github.arturopala.tree.TreeLike.existsPath", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeLike.html#existsPath(path:Iterable[T]=>Boolean):Boolean", "kind" : "def"}, {"label" : "existsBranch", "tail" : "(branch: (Iterable[K]) => Boolean, toPathItem: (T) => K): Boolean", "member" : "com.github.arturopala.tree.TreeLike.existsBranch", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeLike.html#existsBranch[K](branch:Iterable[K]=>Boolean,toPathItem:T=>K):Boolean", "kind" : "def"}, {"label" : "existsBranch", "tail" : "(branch: (Iterable[T]) => Boolean): Boolean", "member" : "com.github.arturopala.tree.TreeLike.existsBranch", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeLike.html#existsBranch(branch:Iterable[T]=>Boolean):Boolean", "kind" : "def"}, {"label" : "existsChild", "tail" : "(pred: (T) => Boolean): Boolean", "member" : "com.github.arturopala.tree.TreeLike.existsChild", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeLike.html#existsChild(pred:T=>Boolean):Boolean", "kind" : "def"}, {"label" : "existsValue", "tail" : "(pred: (T) => Boolean): Boolean", "member" : "com.github.arturopala.tree.TreeLike.existsValue", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeLike.html#existsValue(pred:T=>Boolean):Boolean", "kind" : "def"}, {"label" : "containsValue", "tail" : "(value: T1): Boolean", "member" : "com.github.arturopala.tree.TreeLike.containsValue", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeLike.html#containsValue[T1>:T](value:T1):Boolean", "kind" : "def"}, {"label" : "paths", "tail" : "(): Iterable[Iterable[T]]", "member" : "com.github.arturopala.tree.TreeLike.paths", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeLike.html#paths:Iterable[Iterable[T]]", "kind" : "def"}, {"label" : "lastChild", "tail" : "(): Option[Tree[T]]", "member" : "com.github.arturopala.tree.TreeLike.lastChild", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeLike.html#lastChild:Option[com.github.arturopala.tree.Tree[T]]", "kind" : "def"}, {"label" : "firstChild", "tail" : "(): Option[Tree[T]]", "member" : "com.github.arturopala.tree.TreeLike.firstChild", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeLike.html#firstChild:Option[com.github.arturopala.tree.Tree[T]]", "kind" : "def"}, {"label" : "lastChildValue", "tail" : "(): Option[T]", "member" : "com.github.arturopala.tree.TreeLike.lastChildValue", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeLike.html#lastChildValue:Option[T]", "kind" : "def"}, {"label" : "firstChildValue", "tail" : "(): Option[T]", "member" : "com.github.arturopala.tree.TreeLike.firstChildValue", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeLike.html#firstChildValue:Option[T]", "kind" : "def"}, {"label" : "nonEmpty", "tail" : "(): Boolean", "member" : "com.github.arturopala.tree.TreeLike.nonEmpty", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeLike.html#nonEmpty:Boolean", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeLike.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeLike.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeLike.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeLike.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeLike.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeLike.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeLike.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeLike.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeLike.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeLike.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeLike.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeLike.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeLike.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeLike.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeLike.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeLike.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeLike.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeLike.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeLike.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "tree", "tail" : ": ArrayTree[T]", "member" : "com.github.arturopala.tree.internal.ArrayTreeLike.tree", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeLike.html#tree:com.github.arturopala.tree.Tree.ArrayTree[T]", "kind" : "abstract val"}, {"label" : "childrenCount", "tail" : "(): Int", "member" : "com.github.arturopala.tree.TreeLike.childrenCount", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeLike.html#childrenCount:Int", "kind" : "abstract def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "com.github.arturopala.tree.TreeLike.isEmpty", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeLike.html#isEmpty:Boolean", "kind" : "abstract def"}, {"label" : "isLeaf", "tail" : "(): Boolean", "member" : "com.github.arturopala.tree.TreeLike.isLeaf", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeLike.html#isLeaf:Boolean", "kind" : "abstract def"}, {"label" : "height", "tail" : "(): Int", "member" : "com.github.arturopala.tree.TreeLike.height", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeLike.html#height:Int", "kind" : "abstract def"}, {"label" : "width", "tail" : "(): Int", "member" : "com.github.arturopala.tree.TreeLike.width", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeLike.html#width:Int", "kind" : "abstract def"}, {"label" : "size", "tail" : "(): Int", "member" : "com.github.arturopala.tree.TreeLike.size", "link" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeLike.html#size:Int", "kind" : "abstract def"}], "class" : "com\/github\/arturopala\/tree\/internal\/ArrayTreeLike.html", "kind" : "class"}, {"name" : "com.github.arturopala.tree.internal.Compare", "shortDescription" : "Tree comparison and equality helpers", "object" : "com\/github\/arturopala\/tree\/internal\/Compare$.html", "members_object" : [{"label" : "sameElements", "tail" : "(iterator1: Iterator[T], iterator2: Iterator[T]): Boolean", "member" : "com.github.arturopala.tree.internal.Compare.sameElements", "link" : "com\/github\/arturopala\/tree\/internal\/Compare$.html#sameElements[T](iterator1:Iterator[T],iterator2:Iterator[T]):Boolean", "kind" : "final def"}, {"label" : "sameTrees", "tail" : "(tree1: Tree[T], tree2: Tree[T]): Boolean", "member" : "com.github.arturopala.tree.internal.Compare.sameTrees", "link" : "com\/github\/arturopala\/tree\/internal\/Compare$.html#sameTrees[T](tree1:com.github.arturopala.tree.Tree[T],tree2:com.github.arturopala.tree.Tree[T]):Boolean", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/arturopala\/tree\/internal\/Compare$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/arturopala\/tree\/internal\/Compare$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/arturopala\/tree\/internal\/Compare$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/arturopala\/tree\/internal\/Compare$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/arturopala\/tree\/internal\/Compare$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/arturopala\/tree\/internal\/Compare$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/arturopala\/tree\/internal\/Compare$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/arturopala\/tree\/internal\/Compare$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/arturopala\/tree\/internal\/Compare$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/arturopala\/tree\/internal\/Compare$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/arturopala\/tree\/internal\/Compare$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/arturopala\/tree\/internal\/Compare$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/arturopala\/tree\/internal\/Compare$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/arturopala\/tree\/internal\/Compare$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/arturopala\/tree\/internal\/Compare$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/arturopala\/tree\/internal\/Compare$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/arturopala\/tree\/internal\/Compare$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/arturopala\/tree\/internal\/Compare$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/arturopala\/tree\/internal\/Compare$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.github.arturopala.tree.internal.EmptyTreeLike", "trait" : "com\/github\/arturopala\/tree\/internal\/EmptyTreeLike.html", "kind" : "trait", "members_trait" : [{"label" : "deflated", "tail" : "(tag: ClassTag[T1]): Tree[T1]", "member" : "com.github.arturopala.tree.internal.EmptyTreeLike.deflated", "link" : "com\/github\/arturopala\/tree\/internal\/EmptyTreeLike.html#deflated[T1](implicittag:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T1]", "kind" : "final def"}, {"label" : "inflated", "tail" : ": Tree[Nothing]", "member" : "com.github.arturopala.tree.internal.EmptyTreeLike.inflated", "link" : "com\/github\/arturopala\/tree\/internal\/EmptyTreeLike.html#inflated:com.github.arturopala.tree.Tree[Nothing]", "kind" : "final val"}, {"label" : "mkStringFromBranches", "tail" : "(show: (Nothing) => String, nodeSeparator: String, branchSeparator: String, branchStart: String, branchEnd: String, maxDepth: Int): String", "member" : "com.github.arturopala.tree.internal.EmptyTreeLike.mkStringFromBranches", "link" : "com\/github\/arturopala\/tree\/internal\/EmptyTreeLike.html#mkStringFromBranches(show:Nothing=>String,nodeSeparator:String,branchSeparator:String,branchStart:String,branchEnd:String,maxDepth:Int):String", "kind" : "final def"}, {"label" : "toStructureArray", "tail" : ": Array[Int]", "member" : "com.github.arturopala.tree.internal.EmptyTreeLike.toStructureArray", "link" : "com\/github\/arturopala\/tree\/internal\/EmptyTreeLike.html#toStructureArray:Array[Int]", "kind" : "final val"}, {"label" : "toBuffers", "tail" : "(arg0: ClassTag[T1]): (IntBuffer, Buffer[T1])", "member" : "com.github.arturopala.tree.internal.EmptyTreeLike.toBuffers", "link" : "com\/github\/arturopala\/tree\/internal\/EmptyTreeLike.html#toBuffers[T1](implicitevidence$37:scala.reflect.ClassTag[T1]):(com.github.arturopala.bufferandslice.IntBuffer,com.github.arturopala.bufferandslice.Buffer[T1])", "kind" : "final def"}, {"label" : "toSlices", "tail" : "(arg0: ClassTag[T1]): (IntSlice, Slice[T1])", "member" : "com.github.arturopala.tree.internal.EmptyTreeLike.toSlices", "link" : "com\/github\/arturopala\/tree\/internal\/EmptyTreeLike.html#toSlices[T1](implicitevidence$36:scala.reflect.ClassTag[T1]):(com.github.arturopala.bufferandslice.IntSlice,com.github.arturopala.bufferandslice.Slice[T1])", "kind" : "final def"}, {"label" : "toArrays", "tail" : "(arg0: ClassTag[T1]): (Array[Int], Array[T1])", "member" : "com.github.arturopala.tree.internal.EmptyTreeLike.toArrays", "link" : "com\/github\/arturopala\/tree\/internal\/EmptyTreeLike.html#toArrays[T1](implicitevidence$35:scala.reflect.ClassTag[T1]):(Array[Int],Array[T1])", "kind" : "final def"}, {"label" : "toPairsIterator", "tail" : "(): Iterator[(Int, Nothing)]", "member" : "com.github.arturopala.tree.internal.EmptyTreeLike.toPairsIterator", "link" : "com\/github\/arturopala\/tree\/internal\/EmptyTreeLike.html#toPairsIterator:Iterator[(Int,Nothing)]", "kind" : "final def"}, {"label" : "map", "tail" : "(f: (Nothing) => K)(arg0: ClassTag[K]): Tree[K]", "member" : "com.github.arturopala.tree.internal.EmptyTreeLike.map", "link" : "com\/github\/arturopala\/tree\/internal\/EmptyTreeLike.html#map[K](f:Nothing=>K)(implicitevidence$34:scala.reflect.ClassTag[K]):com.github.arturopala.tree.Tree[K]", "kind" : "final def"}, {"label" : "removeTreeAt", "tail" : "(path: Iterable[K], toPathItem: (Nothing) => K)(arg0: ClassTag[T1]): Tree[Nothing]", "member" : "com.github.arturopala.tree.internal.EmptyTreeLike.removeTreeAt", "link" : "com\/github\/arturopala\/tree\/internal\/EmptyTreeLike.html#removeTreeAt[K,T1](path:Iterable[K],toPathItem:Nothing=>K)(implicitevidence$33:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[Nothing]", "kind" : "final def"}, {"label" : "removeTreeAt", "tail" : "(path: Iterable[T1])(arg0: ClassTag[T1]): Tree[Nothing]", "member" : "com.github.arturopala.tree.internal.EmptyTreeLike.removeTreeAt", "link" : "com\/github\/arturopala\/tree\/internal\/EmptyTreeLike.html#removeTreeAt[T1](path:Iterable[T1])(implicitevidence$32:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[Nothing]", "kind" : "final def"}, {"label" : "removeChild", "tail" : "(value: T1)(arg0: ClassTag[T1]): Tree[Nothing]", "member" : "com.github.arturopala.tree.internal.EmptyTreeLike.removeChild", "link" : "com\/github\/arturopala\/tree\/internal\/EmptyTreeLike.html#removeChild[T1](value:T1)(implicitevidence$31:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[Nothing]", "kind" : "final def"}, {"label" : "removeValueAt", "tail" : "(path: Iterable[K], toPathItem: (Nothing) => K)(arg0: ClassTag[T1]): Tree[Nothing]", "member" : "com.github.arturopala.tree.internal.EmptyTreeLike.removeValueAt", "link" : "com\/github\/arturopala\/tree\/internal\/EmptyTreeLike.html#removeValueAt[K,T1](path:Iterable[K],toPathItem:Nothing=>K)(implicitevidence$30:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[Nothing]", "kind" : "final def"}, {"label" : "removeValueAt", "tail" : "(path: Iterable[T1])(arg0: ClassTag[T1]): Tree[Nothing]", "member" : "com.github.arturopala.tree.internal.EmptyTreeLike.removeValueAt", "link" : "com\/github\/arturopala\/tree\/internal\/EmptyTreeLike.html#removeValueAt[T1](path:Iterable[T1])(implicitevidence$29:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[Nothing]", "kind" : "final def"}, {"label" : "removeChildValue", "tail" : "(value: T1)(arg0: ClassTag[T1]): Tree[Nothing]", "member" : "com.github.arturopala.tree.internal.EmptyTreeLike.removeChildValue", "link" : "com\/github\/arturopala\/tree\/internal\/EmptyTreeLike.html#removeChildValue[T1](value:T1)(implicitevidence$28:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[Nothing]", "kind" : "final def"}, {"label" : "modifyTreeAt", "tail" : "(path: Iterable[K], modify: (Tree[Nothing]) => Tree[T1], toPathItem: (Nothing) => K)(arg0: ClassTag[T1]): Either[Tree[Nothing], Tree[T1]]", "member" : "com.github.arturopala.tree.internal.EmptyTreeLike.modifyTreeAt", "link" : "com\/github\/arturopala\/tree\/internal\/EmptyTreeLike.html#modifyTreeAt[K,T1](path:Iterable[K],modify:com.github.arturopala.tree.Tree[Nothing]=>com.github.arturopala.tree.Tree[T1],toPathItem:Nothing=>K)(implicitevidence$27:scala.reflect.ClassTag[T1]):Either[com.github.arturopala.tree.Tree[Nothing],com.github.arturopala.tree.Tree[T1]]", "kind" : "final def"}, {"label" : "modifyTreeAt", "tail" : "(path: Iterable[T1], modify: (Tree[Nothing]) => Tree[T1])(arg0: ClassTag[T1]): Either[Tree[Nothing], Tree[T1]]", "member" : "com.github.arturopala.tree.internal.EmptyTreeLike.modifyTreeAt", "link" : "com\/github\/arturopala\/tree\/internal\/EmptyTreeLike.html#modifyTreeAt[T1](path:Iterable[T1],modify:com.github.arturopala.tree.Tree[Nothing]=>com.github.arturopala.tree.Tree[T1])(implicitevidence$26:scala.reflect.ClassTag[T1]):Either[com.github.arturopala.tree.Tree[Nothing],com.github.arturopala.tree.Tree[T1]]", "kind" : "final def"}, {"label" : "modifyChild", "tail" : "(value: T1, modify: (Tree[Nothing]) => Tree[T1])(arg0: ClassTag[T1]): Tree[T1]", "member" : "com.github.arturopala.tree.internal.EmptyTreeLike.modifyChild", "link" : "com\/github\/arturopala\/tree\/internal\/EmptyTreeLike.html#modifyChild[T1](value:T1,modify:com.github.arturopala.tree.Tree[Nothing]=>com.github.arturopala.tree.Tree[T1])(implicitevidence$25:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T1]", "kind" : "final def"}, {"label" : "modifyValueAt", "tail" : "(path: Iterable[K], modify: (Nothing) => T1, toPathItem: (Nothing) => K)(arg0: ClassTag[T1]): Either[Tree[Nothing], Tree[T1]]", "member" : "com.github.arturopala.tree.internal.EmptyTreeLike.modifyValueAt", "link" : "com\/github\/arturopala\/tree\/internal\/EmptyTreeLike.html#modifyValueAt[K,T1](path:Iterable[K],modify:Nothing=>T1,toPathItem:Nothing=>K)(implicitevidence$24:scala.reflect.ClassTag[T1]):Either[com.github.arturopala.tree.Tree[Nothing],com.github.arturopala.tree.Tree[T1]]", "kind" : "final def"}, {"label" : "modifyValueAt", "tail" : "(path: Iterable[T1], modify: (Nothing) => T1)(arg0: ClassTag[T1]): Either[Tree[Nothing], Tree[T1]]", "member" : "com.github.arturopala.tree.internal.EmptyTreeLike.modifyValueAt", "link" : "com\/github\/arturopala\/tree\/internal\/EmptyTreeLike.html#modifyValueAt[T1](path:Iterable[T1],modify:Nothing=>T1)(implicitevidence$23:scala.reflect.ClassTag[T1]):Either[com.github.arturopala.tree.Tree[Nothing],com.github.arturopala.tree.Tree[T1]]", "kind" : "final def"}, {"label" : "modifyChildValue", "tail" : "(value: T1, modify: (Nothing) => T1)(arg0: ClassTag[T1]): Tree[T1]", "member" : "com.github.arturopala.tree.internal.EmptyTreeLike.modifyChildValue", "link" : "com\/github\/arturopala\/tree\/internal\/EmptyTreeLike.html#modifyChildValue[T1](value:T1,modify:Nothing=>T1)(implicitevidence$22:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T1]", "kind" : "final def"}, {"label" : "modifyHead", "tail" : "(modify: (Nothing) => T1)(arg0: ClassTag[T1]): Tree[T1]", "member" : "com.github.arturopala.tree.internal.EmptyTreeLike.modifyHead", "link" : "com\/github\/arturopala\/tree\/internal\/EmptyTreeLike.html#modifyHead[T1](modify:Nothing=>T1)(implicitevidence$21:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T1]", "kind" : "final def"}, {"label" : "updateTreeAt", "tail" : "(path: Iterable[K], replacement: Tree[T1], toPathItem: (Nothing) => K)(arg0: ClassTag[T1]): Either[Tree[Nothing], Tree[T1]]", "member" : "com.github.arturopala.tree.internal.EmptyTreeLike.updateTreeAt", "link" : "com\/github\/arturopala\/tree\/internal\/EmptyTreeLike.html#updateTreeAt[K,T1](path:Iterable[K],replacement:com.github.arturopala.tree.Tree[T1],toPathItem:Nothing=>K)(implicitevidence$20:scala.reflect.ClassTag[T1]):Either[com.github.arturopala.tree.Tree[Nothing],com.github.arturopala.tree.Tree[T1]]", "kind" : "final def"}, {"label" : "updateTreeAt", "tail" : "(path: Iterable[T1], replacement: Tree[T1])(arg0: ClassTag[T1]): Either[Tree[Nothing], Tree[T1]]", "member" : "com.github.arturopala.tree.internal.EmptyTreeLike.updateTreeAt", "link" : "com\/github\/arturopala\/tree\/internal\/EmptyTreeLike.html#updateTreeAt[T1](path:Iterable[T1],replacement:com.github.arturopala.tree.Tree[T1])(implicitevidence$19:scala.reflect.ClassTag[T1]):Either[com.github.arturopala.tree.Tree[Nothing],com.github.arturopala.tree.Tree[T1]]", "kind" : "final def"}, {"label" : "updateChild", "tail" : "(value: T1, replacement: Tree[T1])(arg0: ClassTag[T1]): Tree[T1]", "member" : "com.github.arturopala.tree.internal.EmptyTreeLike.updateChild", "link" : "com\/github\/arturopala\/tree\/internal\/EmptyTreeLike.html#updateChild[T1](value:T1,replacement:com.github.arturopala.tree.Tree[T1])(implicitevidence$18:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T1]", "kind" : "final def"}, {"label" : "updateValueAt", "tail" : "(path: Iterable[K], replacement: T1, toPathItem: (Nothing) => K)(arg0: ClassTag[T1]): Either[Tree[Nothing], Tree[T1]]", "member" : "com.github.arturopala.tree.internal.EmptyTreeLike.updateValueAt", "link" : "com\/github\/arturopala\/tree\/internal\/EmptyTreeLike.html#updateValueAt[K,T1](path:Iterable[K],replacement:T1,toPathItem:Nothing=>K)(implicitevidence$17:scala.reflect.ClassTag[T1]):Either[com.github.arturopala.tree.Tree[Nothing],com.github.arturopala.tree.Tree[T1]]", "kind" : "final def"}, {"label" : "updateValueAt", "tail" : "(path: Iterable[T1], replacement: T1)(arg0: ClassTag[T1]): Either[Tree[Nothing], Tree[T1]]", "member" : "com.github.arturopala.tree.internal.EmptyTreeLike.updateValueAt", "link" : "com\/github\/arturopala\/tree\/internal\/EmptyTreeLike.html#updateValueAt[T1](path:Iterable[T1],replacement:T1)(implicitevidence$16:scala.reflect.ClassTag[T1]):Either[com.github.arturopala.tree.Tree[Nothing],com.github.arturopala.tree.Tree[T1]]", "kind" : "final def"}, {"label" : "updateChildValue", "tail" : "(existingValue: T1, replacement: T1)(arg0: ClassTag[T1]): Tree[T1]", "member" : "com.github.arturopala.tree.internal.EmptyTreeLike.updateChildValue", "link" : "com\/github\/arturopala\/tree\/internal\/EmptyTreeLike.html#updateChildValue[T1](existingValue:T1,replacement:T1)(implicitevidence$15:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T1]", "kind" : "final def"}, {"label" : "updateHead", "tail" : "(replacement: T1)(arg0: ClassTag[T1]): Tree[T1]", "member" : "com.github.arturopala.tree.internal.EmptyTreeLike.updateHead", "link" : "com\/github\/arturopala\/tree\/internal\/EmptyTreeLike.html#updateHead[T1](replacement:T1)(implicitevidence$14:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T1]", "kind" : "final def"}, {"label" : "insertBranch", "tail" : "(branch: Iterable[T1], append: Boolean)(arg0: ClassTag[T1]): Tree[T1]", "member" : "com.github.arturopala.tree.internal.EmptyTreeLike.insertBranch", "link" : "com\/github\/arturopala\/tree\/internal\/EmptyTreeLike.html#insertBranch[T1](branch:Iterable[T1],append:Boolean)(implicitevidence$13:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T1]", "kind" : "final def"}, {"label" : "insertChildrenAt", "tail" : "(path: Iterable[K], children: Iterable[Tree[T1]], toPathItem: (Nothing) => K, append: Boolean)(arg0: ClassTag[T1]): Either[Tree[Nothing], Tree[T1]]", "member" : "com.github.arturopala.tree.internal.EmptyTreeLike.insertChildrenAt", "link" : "com\/github\/arturopala\/tree\/internal\/EmptyTreeLike.html#insertChildrenAt[K,T1](path:Iterable[K],children:Iterable[com.github.arturopala.tree.Tree[T1]],toPathItem:Nothing=>K,append:Boolean)(implicitevidence$12:scala.reflect.ClassTag[T1]):Either[com.github.arturopala.tree.Tree[Nothing],com.github.arturopala.tree.Tree[T1]]", "kind" : "final def"}, {"label" : "insertChildrenAt", "tail" : "(path: Iterable[T1], children: Iterable[Tree[T1]], append: Boolean)(arg0: ClassTag[T1]): Tree[T1]", "member" : "com.github.arturopala.tree.internal.EmptyTreeLike.insertChildrenAt", "link" : "com\/github\/arturopala\/tree\/internal\/EmptyTreeLike.html#insertChildrenAt[T1](path:Iterable[T1],children:Iterable[com.github.arturopala.tree.Tree[T1]],append:Boolean)(implicitevidence$11:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T1]", "kind" : "final def"}, {"label" : "insertChildAt", "tail" : "(path: Iterable[K], child: Tree[T1], toPathItem: (Nothing) => K, append: Boolean)(arg0: ClassTag[T1]): Either[Tree[Nothing], Tree[T1]]", "member" : "com.github.arturopala.tree.internal.EmptyTreeLike.insertChildAt", "link" : "com\/github\/arturopala\/tree\/internal\/EmptyTreeLike.html#insertChildAt[K,T1](path:Iterable[K],child:com.github.arturopala.tree.Tree[T1],toPathItem:Nothing=>K,append:Boolean)(implicitevidence$10:scala.reflect.ClassTag[T1]):Either[com.github.arturopala.tree.Tree[Nothing],com.github.arturopala.tree.Tree[T1]]", "kind" : "final def"}, {"label" : "insertChildAt", "tail" : "(path: Iterable[T1], child: Tree[T1], append: Boolean)(arg0: ClassTag[T1]): Tree[T1]", "member" : "com.github.arturopala.tree.internal.EmptyTreeLike.insertChildAt", "link" : "com\/github\/arturopala\/tree\/internal\/EmptyTreeLike.html#insertChildAt[T1](path:Iterable[T1],child:com.github.arturopala.tree.Tree[T1],append:Boolean)(implicitevidence$9:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T1]", "kind" : "final def"}, {"label" : "insertChildren", "tail" : "(children: Iterable[Tree[T1]], append: Boolean)(arg0: ClassTag[T1]): Tree[T1]", "member" : "com.github.arturopala.tree.internal.EmptyTreeLike.insertChildren", "link" : "com\/github\/arturopala\/tree\/internal\/EmptyTreeLike.html#insertChildren[T1](children:Iterable[com.github.arturopala.tree.Tree[T1]],append:Boolean)(implicitevidence$8:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T1]", "kind" : "final def"}, {"label" : "insertChild", "tail" : "(child: Tree[T1], append: Boolean)(arg0: ClassTag[T1]): Tree[T1]", "member" : "com.github.arturopala.tree.internal.EmptyTreeLike.insertChild", "link" : "com\/github\/arturopala\/tree\/internal\/EmptyTreeLike.html#insertChild[T1](child:com.github.arturopala.tree.Tree[T1],append:Boolean)(implicitevidence$7:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T1]", "kind" : "final def"}, {"label" : "insertLeafAt", "tail" : "(path: Iterable[K], value: T1, toPathItem: (Nothing) => K, append: Boolean)(arg0: ClassTag[T1]): Either[Tree[Nothing], Tree[T1]]", "member" : "com.github.arturopala.tree.internal.EmptyTreeLike.insertLeafAt", "link" : "com\/github\/arturopala\/tree\/internal\/EmptyTreeLike.html#insertLeafAt[K,T1](path:Iterable[K],value:T1,toPathItem:Nothing=>K,append:Boolean)(implicitevidence$6:scala.reflect.ClassTag[T1]):Either[com.github.arturopala.tree.Tree[Nothing],com.github.arturopala.tree.Tree[T1]]", "kind" : "final def"}, {"label" : "insertLeafAt", "tail" : "(path: Iterable[T1], value: T1, append: Boolean)(arg0: ClassTag[T1]): Tree[T1]", "member" : "com.github.arturopala.tree.internal.EmptyTreeLike.insertLeafAt", "link" : "com\/github\/arturopala\/tree\/internal\/EmptyTreeLike.html#insertLeafAt[T1](path:Iterable[T1],value:T1,append:Boolean)(implicitevidence$5:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T1]", "kind" : "final def"}, {"label" : "insertLeaves", "tail" : "(values: Iterable[T1], append: Boolean)(arg0: ClassTag[T1]): Tree[T1]", "member" : "com.github.arturopala.tree.internal.EmptyTreeLike.insertLeaves", "link" : "com\/github\/arturopala\/tree\/internal\/EmptyTreeLike.html#insertLeaves[T1](values:Iterable[T1],append:Boolean)(implicitevidence$4:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T1]", "kind" : "final def"}, {"label" : "insertLeaf", "tail" : "(value: T1, append: Boolean)(arg0: ClassTag[T1]): Tree[T1]", "member" : "com.github.arturopala.tree.internal.EmptyTreeLike.insertLeaf", "link" : "com\/github\/arturopala\/tree\/internal\/EmptyTreeLike.html#insertLeaf[T1](value:T1,append:Boolean)(implicitevidence$3:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T1]", "kind" : "final def"}, {"label" : "prepend", "tail" : "(value: T1)(arg0: ClassTag[T1]): Tree[T1]", "member" : "com.github.arturopala.tree.internal.EmptyTreeLike.prepend", "link" : "com\/github\/arturopala\/tree\/internal\/EmptyTreeLike.html#prepend[T1](value:T1)(implicitevidence$2:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T1]", "kind" : "final def"}, {"label" : "containsPath", "tail" : "(path: Iterable[K], toPathItem: (Nothing) => K): Boolean", "member" : "com.github.arturopala.tree.internal.EmptyTreeLike.containsPath", "link" : "com\/github\/arturopala\/tree\/internal\/EmptyTreeLike.html#containsPath[K](path:Iterable[K],toPathItem:Nothing=>K):Boolean", "kind" : "final def"}, {"label" : "containsPath", "tail" : "(path: Iterable[T1]): Boolean", "member" : "com.github.arturopala.tree.internal.EmptyTreeLike.containsPath", "link" : "com\/github\/arturopala\/tree\/internal\/EmptyTreeLike.html#containsPath[T1](path:Iterable[T1]):Boolean", "kind" : "final def"}, {"label" : "containsBranch", "tail" : "(branch: Iterable[K], toPathItem: (Nothing) => K): Boolean", "member" : "com.github.arturopala.tree.internal.EmptyTreeLike.containsBranch", "link" : "com\/github\/arturopala\/tree\/internal\/EmptyTreeLike.html#containsBranch[K](branch:Iterable[K],toPathItem:Nothing=>K):Boolean", "kind" : "final def"}, {"label" : "containsBranch", "tail" : "(branch: Iterable[T1]): Boolean", "member" : "com.github.arturopala.tree.internal.EmptyTreeLike.containsBranch", "link" : "com\/github\/arturopala\/tree\/internal\/EmptyTreeLike.html#containsBranch[T1](branch:Iterable[T1]):Boolean", "kind" : "final def"}, {"label" : "containsChild", "tail" : "(value: T1): Boolean", "member" : "com.github.arturopala.tree.internal.EmptyTreeLike.containsChild", "link" : "com\/github\/arturopala\/tree\/internal\/EmptyTreeLike.html#containsChild[T1](value:T1):Boolean", "kind" : "final def"}, {"label" : "selectTree", "tail" : "(path: Iterable[K], toPathItem: (Nothing) => K, rightmost: Boolean): Option[Tree[Nothing]]", "member" : "com.github.arturopala.tree.internal.EmptyTreeLike.selectTree", "link" : "com\/github\/arturopala\/tree\/internal\/EmptyTreeLike.html#selectTree[K](path:Iterable[K],toPathItem:Nothing=>K,rightmost:Boolean):Option[com.github.arturopala.tree.Tree[Nothing]]", "kind" : "final def"}, {"label" : "selectTree", "tail" : "(path: Iterable[T1], rightmost: Boolean)(arg0: ClassTag[T1]): Option[Tree[Nothing]]", "member" : "com.github.arturopala.tree.internal.EmptyTreeLike.selectTree", "link" : "com\/github\/arturopala\/tree\/internal\/EmptyTreeLike.html#selectTree[T1](path:Iterable[T1],rightmost:Boolean)(implicitevidence$1:scala.reflect.ClassTag[T1]):Option[com.github.arturopala.tree.Tree[Nothing]]", "kind" : "final def"}, {"label" : "selectValue", "tail" : "(path: Iterable[K], toPathItem: (Nothing) => K, rightmost: Boolean): Option[Nothing]", "member" : "com.github.arturopala.tree.internal.EmptyTreeLike.selectValue", "link" : "com\/github\/arturopala\/tree\/internal\/EmptyTreeLike.html#selectValue[K](path:Iterable[K],toPathItem:Nothing=>K,rightmost:Boolean):Option[Nothing]", "kind" : "final def"}, {"label" : "countBranches", "tail" : "(pred: (Iterable[Nothing]) => Boolean): Int", "member" : "com.github.arturopala.tree.internal.EmptyTreeLike.countBranches", "link" : "com\/github\/arturopala\/tree\/internal\/EmptyTreeLike.html#countBranches(pred:Iterable[Nothing]=>Boolean):Int", "kind" : "final def"}, {"label" : "branchesWithFilter", "tail" : "(pred: (Iterable[Nothing]) => Boolean, maxDepth: Int): Iterable[Iterable[Nothing]]", "member" : "com.github.arturopala.tree.internal.EmptyTreeLike.branchesWithFilter", "link" : "com\/github\/arturopala\/tree\/internal\/EmptyTreeLike.html#branchesWithFilter(pred:Iterable[Nothing]=>Boolean,maxDepth:Int):Iterable[Iterable[Nothing]]", "kind" : "final def"}, {"label" : "branches", "tail" : ": Iterable[Iterable[Nothing]]", "member" : "com.github.arturopala.tree.internal.EmptyTreeLike.branches", "link" : "com\/github\/arturopala\/tree\/internal\/EmptyTreeLike.html#branches:Iterable[Iterable[Nothing]]", "kind" : "final val"}, {"label" : "treesAndLevelsWithFilter", "tail" : "(pred: (Tree[Nothing]) => Boolean, mode: TraversingMode, maxDepth: Int): Iterable[(Int, Tree[Nothing])]", "member" : "com.github.arturopala.tree.internal.EmptyTreeLike.treesAndLevelsWithFilter", "link" : "com\/github\/arturopala\/tree\/internal\/EmptyTreeLike.html#treesAndLevelsWithFilter(pred:com.github.arturopala.tree.Tree[Nothing]=>Boolean,mode:com.github.arturopala.tree.TreeOptions.TraversingMode,maxDepth:Int):Iterable[(Int,com.github.arturopala.tree.Tree[Nothing])]", "kind" : "def"}, {"label" : "treesWithFilter", "tail" : "(pred: (Tree[Nothing]) => Boolean, mode: TraversingMode, maxDepth: Int): Iterable[Tree[Nothing]]", "member" : "com.github.arturopala.tree.internal.EmptyTreeLike.treesWithFilter", "link" : "com\/github\/arturopala\/tree\/internal\/EmptyTreeLike.html#treesWithFilter(pred:com.github.arturopala.tree.Tree[Nothing]=>Boolean,mode:com.github.arturopala.tree.TreeOptions.TraversingMode,maxDepth:Int):Iterable[com.github.arturopala.tree.Tree[Nothing]]", "kind" : "final def"}, {"label" : "trees", "tail" : "(mode: TraversingMode): Iterable[Tree[Nothing]]", "member" : "com.github.arturopala.tree.internal.EmptyTreeLike.trees", "link" : "com\/github\/arturopala\/tree\/internal\/EmptyTreeLike.html#trees(mode:com.github.arturopala.tree.TreeOptions.TraversingMode):Iterable[com.github.arturopala.tree.Tree[Nothing]]", "kind" : "final def"}, {"label" : "children", "tail" : ": Iterable[Tree[Nothing]]", "member" : "com.github.arturopala.tree.internal.EmptyTreeLike.children", "link" : "com\/github\/arturopala\/tree\/internal\/EmptyTreeLike.html#children:Iterable[com.github.arturopala.tree.Tree[Nothing]]", "kind" : "final val"}, {"label" : "childrenValues", "tail" : ": Iterable[Nothing]", "member" : "com.github.arturopala.tree.internal.EmptyTreeLike.childrenValues", "link" : "com\/github\/arturopala\/tree\/internal\/EmptyTreeLike.html#childrenValues:Iterable[Nothing]", "kind" : "final val"}, {"label" : "valuesAndLevelsWithFilter", "tail" : "(pred: (Nothing) => Boolean, mode: TraversingMode, maxDepth: Int): Iterable[(Int, Nothing, Boolean)]", "member" : "com.github.arturopala.tree.internal.EmptyTreeLike.valuesAndLevelsWithFilter", "link" : "com\/github\/arturopala\/tree\/internal\/EmptyTreeLike.html#valuesAndLevelsWithFilter(pred:Nothing=>Boolean,mode:com.github.arturopala.tree.TreeOptions.TraversingMode,maxDepth:Int):Iterable[(Int,Nothing,Boolean)]", "kind" : "def"}, {"label" : "valuesWithFilter", "tail" : "(pred: (Nothing) => Boolean, mode: TraversingMode, maxDepth: Int): Iterable[Nothing]", "member" : "com.github.arturopala.tree.internal.EmptyTreeLike.valuesWithFilter", "link" : "com\/github\/arturopala\/tree\/internal\/EmptyTreeLike.html#valuesWithFilter(pred:Nothing=>Boolean,mode:com.github.arturopala.tree.TreeOptions.TraversingMode,maxDepth:Int):Iterable[Nothing]", "kind" : "def"}, {"label" : "leaves", "tail" : "(): Iterable[Nothing]", "member" : "com.github.arturopala.tree.internal.EmptyTreeLike.leaves", "link" : "com\/github\/arturopala\/tree\/internal\/EmptyTreeLike.html#leaves:Iterable[Nothing]", "kind" : "final def"}, {"label" : "values", "tail" : "(mode: TraversingMode): Iterable[Nothing]", "member" : "com.github.arturopala.tree.internal.EmptyTreeLike.values", "link" : "com\/github\/arturopala\/tree\/internal\/EmptyTreeLike.html#values(mode:com.github.arturopala.tree.TreeOptions.TraversingMode):Iterable[Nothing]", "kind" : "final def"}, {"label" : "headOption", "tail" : ": Option[Nothing]", "member" : "com.github.arturopala.tree.internal.EmptyTreeLike.headOption", "link" : "com\/github\/arturopala\/tree\/internal\/EmptyTreeLike.html#headOption:Option[Nothing]", "kind" : "final val"}, {"label" : "head", "tail" : "(): Nothing", "member" : "com.github.arturopala.tree.internal.EmptyTreeLike.head", "link" : "com\/github\/arturopala\/tree\/internal\/EmptyTreeLike.html#head:Nothing", "kind" : "final def"}, {"label" : "childrenCount", "tail" : ": Int", "member" : "com.github.arturopala.tree.internal.EmptyTreeLike.childrenCount", "link" : "com\/github\/arturopala\/tree\/internal\/EmptyTreeLike.html#childrenCount:Int", "kind" : "final val"}, {"label" : "isEmpty", "tail" : ": Boolean", "member" : "com.github.arturopala.tree.internal.EmptyTreeLike.isEmpty", "link" : "com\/github\/arturopala\/tree\/internal\/EmptyTreeLike.html#isEmpty:Boolean", "kind" : "final val"}, {"label" : "isLeaf", "tail" : ": Boolean", "member" : "com.github.arturopala.tree.internal.EmptyTreeLike.isLeaf", "link" : "com\/github\/arturopala\/tree\/internal\/EmptyTreeLike.html#isLeaf:Boolean", "kind" : "final val"}, {"label" : "height", "tail" : ": Int", "member" : "com.github.arturopala.tree.internal.EmptyTreeLike.height", "link" : "com\/github\/arturopala\/tree\/internal\/EmptyTreeLike.html#height:Int", "kind" : "final val"}, {"label" : "width", "tail" : ": Int", "member" : "com.github.arturopala.tree.internal.EmptyTreeLike.width", "link" : "com\/github\/arturopala\/tree\/internal\/EmptyTreeLike.html#width:Int", "kind" : "final val"}, {"label" : "size", "tail" : ": Int", "member" : "com.github.arturopala.tree.internal.EmptyTreeLike.size", "link" : "com\/github\/arturopala\/tree\/internal\/EmptyTreeLike.html#size:Int", "kind" : "final val"}, {"label" : "removeChildrenAt", "tail" : "(path: Iterable[K], toPathItem: (Nothing) => K)(arg0: ClassTag[T1]): Tree[Nothing]", "member" : "com.github.arturopala.tree.TreeLike.removeChildrenAt", "link" : "com\/github\/arturopala\/tree\/internal\/EmptyTreeLike.html#removeChildrenAt[K,T1>:T](path:Iterable[K],toPathItem:T=>K)(implicitevidence$46:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T]", "kind" : "def"}, {"label" : "removeChildrenAt", "tail" : "(path: Iterable[T1])(arg0: ClassTag[T1]): Tree[Nothing]", "member" : "com.github.arturopala.tree.TreeLike.removeChildrenAt", "link" : "com\/github\/arturopala\/tree\/internal\/EmptyTreeLike.html#removeChildrenAt[T1>:T](path:Iterable[T1])(implicitevidence$45:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T]", "kind" : "def"}, {"label" : "removeChildren", "tail" : "()(arg0: ClassTag[T1]): Tree[Nothing]", "member" : "com.github.arturopala.tree.TreeLike.removeChildren", "link" : "com\/github\/arturopala\/tree\/internal\/EmptyTreeLike.html#removeChildren[T1>:T]()(implicitevidence$42:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T]", "kind" : "def"}, {"label" : "modifyChildrenAt", "tail" : "(path: Iterable[K], modify: (Iterable[Tree[Nothing]]) => Iterable[Tree[T1]], toPathItem: (Nothing) => K)(arg0: ClassTag[T1]): Either[Tree[Nothing], Tree[T1]]", "member" : "com.github.arturopala.tree.TreeLike.modifyChildrenAt", "link" : "com\/github\/arturopala\/tree\/internal\/EmptyTreeLike.html#modifyChildrenAt[K,T1>:T](path:Iterable[K],modify:Iterable[com.github.arturopala.tree.Tree[T]]=>Iterable[com.github.arturopala.tree.Tree[T1]],toPathItem:T=>K)(implicitevidence$37:scala.reflect.ClassTag[T1]):Either[com.github.arturopala.tree.Tree[T],com.github.arturopala.tree.Tree[T1]]", "kind" : "def"}, {"label" : "modifyChildrenAt", "tail" : "(path: Iterable[T1], modify: (Iterable[Tree[Nothing]]) => Iterable[Tree[T1]])(arg0: ClassTag[T1]): Either[Tree[Nothing], Tree[T1]]", "member" : "com.github.arturopala.tree.TreeLike.modifyChildrenAt", "link" : "com\/github\/arturopala\/tree\/internal\/EmptyTreeLike.html#modifyChildrenAt[T1>:T](path:Iterable[T1],modify:Iterable[com.github.arturopala.tree.Tree[T]]=>Iterable[com.github.arturopala.tree.Tree[T1]])(implicitevidence$36:scala.reflect.ClassTag[T1]):Either[com.github.arturopala.tree.Tree[T],com.github.arturopala.tree.Tree[T1]]", "kind" : "def"}, {"label" : "insertBranches", "tail" : "(branches: Iterable[Iterable[T1]], append: Boolean)(arg0: ClassTag[T1]): Tree[T1]", "member" : "com.github.arturopala.tree.TreeLike.insertBranches", "link" : "com\/github\/arturopala\/tree\/internal\/EmptyTreeLike.html#insertBranches[T1>:T](branches:Iterable[Iterable[T1]],append:Boolean)(implicitevidence$21:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T1]", "kind" : "def"}, {"label" : "diff", "tail" : "(other: Tree[T1]): Tree[T1]", "member" : "com.github.arturopala.tree.TreeLike.diff", "link" : "com\/github\/arturopala\/tree\/internal\/EmptyTreeLike.html#diff[T1>:T](other:com.github.arturopala.tree.Tree[T1]):com.github.arturopala.tree.Tree[T1]", "kind" : "def"}, {"label" : "intersect", "tail" : "(other: Tree[T1]): Tree[T1]", "member" : "com.github.arturopala.tree.TreeLike.intersect", "link" : "com\/github\/arturopala\/tree\/internal\/EmptyTreeLike.html#intersect[T1>:T](other:com.github.arturopala.tree.Tree[T1]):com.github.arturopala.tree.Tree[T1]", "kind" : "def"}, {"label" : "union", "tail" : "(other: Tree[T1], keepDistinct: Boolean): Tree[T1]", "member" : "com.github.arturopala.tree.TreeLike.union", "link" : "com\/github\/arturopala\/tree\/internal\/EmptyTreeLike.html#union[T1>:T](other:com.github.arturopala.tree.Tree[T1],keepDistinct:Boolean):com.github.arturopala.tree.Tree[T1]", "kind" : "def"}, {"label" : "foldBranches", "tail" : "(initial: A, maxDepth: Int)(f: (A, Iterable[Nothing]) => A): A", "member" : "com.github.arturopala.tree.TreeLike.foldBranches", "link" : "com\/github\/arturopala\/tree\/internal\/EmptyTreeLike.html#foldBranches[A](initial:A,maxDepth:Int)(f:(A,Iterable[T])=>A):A", "kind" : "def"}, {"label" : "foldTreesWithLevel", "tail" : "(initial: A, maxDepth: Int)(f: (A, Int, Tree[Nothing]) => A): A", "member" : "com.github.arturopala.tree.TreeLike.foldTreesWithLevel", "link" : "com\/github\/arturopala\/tree\/internal\/EmptyTreeLike.html#foldTreesWithLevel[A](initial:A,maxDepth:Int)(f:(A,Int,com.github.arturopala.tree.Tree[T])=>A):A", "kind" : "def"}, {"label" : "foldTrees", "tail" : "(initial: A, maxDepth: Int)(f: (A, Tree[Nothing]) => A): A", "member" : "com.github.arturopala.tree.TreeLike.foldTrees", "link" : "com\/github\/arturopala\/tree\/internal\/EmptyTreeLike.html#foldTrees[A](initial:A,maxDepth:Int)(f:(A,com.github.arturopala.tree.Tree[T])=>A):A", "kind" : "def"}, {"label" : "foldValuesWithLevel", "tail" : "(initial: A, maxDepth: Int)(f: (A, Int, Nothing) => A): A", "member" : "com.github.arturopala.tree.TreeLike.foldValuesWithLevel", "link" : "com\/github\/arturopala\/tree\/internal\/EmptyTreeLike.html#foldValuesWithLevel[A](initial:A,maxDepth:Int)(f:(A,Int,T)=>A):A", "kind" : "def"}, {"label" : "foldValues", "tail" : "(initial: A, maxDepth: Int)(f: (A, Nothing) => A): A", "member" : "com.github.arturopala.tree.TreeLike.foldValues", "link" : "com\/github\/arturopala\/tree\/internal\/EmptyTreeLike.html#foldValues[A](initial:A,maxDepth:Int)(f:(A,T)=>A):A", "kind" : "def"}, {"label" : "filterChildrenAt", "tail" : "(path: Iterable[K], pred: (Tree[Nothing]) => Boolean, toPathItem: (Nothing) => K)(arg0: ClassTag[T1]): Tree[Nothing]", "member" : "com.github.arturopala.tree.TreeLike.filterChildrenAt", "link" : "com\/github\/arturopala\/tree\/internal\/EmptyTreeLike.html#filterChildrenAt[K,T1>:T](path:Iterable[K],pred:com.github.arturopala.tree.Tree[T]=>Boolean,toPathItem:T=>K)(implicitevidence$8:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T]", "kind" : "def"}, {"label" : "filterChildrenAt", "tail" : "(path: Iterable[T1], pred: (Tree[Nothing]) => Boolean)(arg0: ClassTag[T1]): Tree[Nothing]", "member" : "com.github.arturopala.tree.TreeLike.filterChildrenAt", "link" : "com\/github\/arturopala\/tree\/internal\/EmptyTreeLike.html#filterChildrenAt[T1>:T](path:Iterable[T1],pred:com.github.arturopala.tree.Tree[T]=>Boolean)(implicitevidence$7:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T]", "kind" : "def"}, {"label" : "filterChildren", "tail" : "(pred: (Tree[Nothing]) => Boolean)(arg0: ClassTag[T1]): Tree[Nothing]", "member" : "com.github.arturopala.tree.TreeLike.filterChildren", "link" : "com\/github\/arturopala\/tree\/internal\/EmptyTreeLike.html#filterChildren[T1>:T](pred:com.github.arturopala.tree.Tree[T]=>Boolean)(implicitevidence$6:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T]", "kind" : "def"}, {"label" : "filterBranches", "tail" : "(f: (Iterable[Nothing]) => Boolean): Tree[Nothing]", "member" : "com.github.arturopala.tree.TreeLike.filterBranches", "link" : "com\/github\/arturopala\/tree\/internal\/EmptyTreeLike.html#filterBranches(f:Iterable[T]=>Boolean):com.github.arturopala.tree.Tree[T]", "kind" : "def"}, {"label" : "filterTrees", "tail" : "(f: (Tree[Nothing]) => Boolean, keepDistinct: Boolean): Tree[Nothing]", "member" : "com.github.arturopala.tree.TreeLike.filterTrees", "link" : "com\/github\/arturopala\/tree\/internal\/EmptyTreeLike.html#filterTrees(f:com.github.arturopala.tree.Tree[T]=>Boolean,keepDistinct:Boolean):com.github.arturopala.tree.Tree[T]", "kind" : "def"}, {"label" : "filterValues", "tail" : "(f: (Nothing) => Boolean, keepDistinct: Boolean): Tree[Nothing]", "member" : "com.github.arturopala.tree.TreeLike.filterValues", "link" : "com\/github\/arturopala\/tree\/internal\/EmptyTreeLike.html#filterValues(f:T=>Boolean,keepDistinct:Boolean):com.github.arturopala.tree.Tree[T]", "kind" : "def"}, {"label" : "distinct", "tail" : "(): Tree[Nothing]", "member" : "com.github.arturopala.tree.TreeLike.distinct", "link" : "com\/github\/arturopala\/tree\/internal\/EmptyTreeLike.html#distinct:com.github.arturopala.tree.Tree[T]", "kind" : "def"}, {"label" : "dropLeaves", "tail" : "(): Tree[Nothing]", "member" : "com.github.arturopala.tree.TreeLike.dropLeaves", "link" : "com\/github\/arturopala\/tree\/internal\/EmptyTreeLike.html#dropLeaves:com.github.arturopala.tree.Tree[T]", "kind" : "def"}, {"label" : "trim", "tail" : "(height: Int): Tree[Nothing]", "member" : "com.github.arturopala.tree.TreeLike.trim", "link" : "com\/github\/arturopala\/tree\/internal\/EmptyTreeLike.html#trim(height:Int):com.github.arturopala.tree.Tree[T]", "kind" : "def"}, {"label" : "mapChildren", "tail" : "(f: (Iterable[Tree[Nothing]]) => Iterable[Tree[K]])(arg0: ClassTag[K]): Tree[K]", "member" : "com.github.arturopala.tree.TreeLike.mapChildren", "link" : "com\/github\/arturopala\/tree\/internal\/EmptyTreeLike.html#mapChildren[K](f:Iterable[com.github.arturopala.tree.Tree[T]]=>Iterable[com.github.arturopala.tree.Tree[K]])(implicitevidence$5:scala.reflect.ClassTag[K]):com.github.arturopala.tree.Tree[K]", "kind" : "def"}, {"label" : "mapBranches", "tail" : "(f: (Iterable[Nothing]) => Iterable[K])(arg0: ClassTag[K]): Tree[K]", "member" : "com.github.arturopala.tree.TreeLike.mapBranches", "link" : "com\/github\/arturopala\/tree\/internal\/EmptyTreeLike.html#mapBranches[K](f:Iterable[T]=>Iterable[K])(implicitevidence$4:scala.reflect.ClassTag[K]):com.github.arturopala.tree.Tree[K]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (Nothing) => Tree[K])(arg0: ClassTag[K]): Tree[K]", "member" : "com.github.arturopala.tree.TreeLike.flatMap", "link" : "com\/github\/arturopala\/tree\/internal\/EmptyTreeLike.html#flatMap[K](f:T=>com.github.arturopala.tree.Tree[K])(implicitevidence$3:scala.reflect.ClassTag[K]):com.github.arturopala.tree.Tree[K]", "kind" : "def"}, {"label" : "findPathsLeadingTo", "tail" : "(value: T1): Iterator[Iterable[Nothing]]", "member" : "com.github.arturopala.tree.TreeLike.findPathsLeadingTo", "link" : "com\/github\/arturopala\/tree\/internal\/EmptyTreeLike.html#findPathsLeadingTo[T1>:T](value:T1):Iterator[Iterable[T]]", "kind" : "def"}, {"label" : "existsPath", "tail" : "(path: (Iterable[K]) => Boolean, toPathItem: (Nothing) => K): Boolean", "member" : "com.github.arturopala.tree.TreeLike.existsPath", "link" : "com\/github\/arturopala\/tree\/internal\/EmptyTreeLike.html#existsPath[K](path:Iterable[K]=>Boolean,toPathItem:T=>K):Boolean", "kind" : "def"}, {"label" : "existsPath", "tail" : "(path: (Iterable[Nothing]) => Boolean): Boolean", "member" : "com.github.arturopala.tree.TreeLike.existsPath", "link" : "com\/github\/arturopala\/tree\/internal\/EmptyTreeLike.html#existsPath(path:Iterable[T]=>Boolean):Boolean", "kind" : "def"}, {"label" : "existsBranch", "tail" : "(branch: (Iterable[K]) => Boolean, toPathItem: (Nothing) => K): Boolean", "member" : "com.github.arturopala.tree.TreeLike.existsBranch", "link" : "com\/github\/arturopala\/tree\/internal\/EmptyTreeLike.html#existsBranch[K](branch:Iterable[K]=>Boolean,toPathItem:T=>K):Boolean", "kind" : "def"}, {"label" : "existsBranch", "tail" : "(branch: (Iterable[Nothing]) => Boolean): Boolean", "member" : "com.github.arturopala.tree.TreeLike.existsBranch", "link" : "com\/github\/arturopala\/tree\/internal\/EmptyTreeLike.html#existsBranch(branch:Iterable[T]=>Boolean):Boolean", "kind" : "def"}, {"label" : "existsChild", "tail" : "(pred: (Nothing) => Boolean): Boolean", "member" : "com.github.arturopala.tree.TreeLike.existsChild", "link" : "com\/github\/arturopala\/tree\/internal\/EmptyTreeLike.html#existsChild(pred:T=>Boolean):Boolean", "kind" : "def"}, {"label" : "existsValue", "tail" : "(pred: (Nothing) => Boolean): Boolean", "member" : "com.github.arturopala.tree.TreeLike.existsValue", "link" : "com\/github\/arturopala\/tree\/internal\/EmptyTreeLike.html#existsValue(pred:T=>Boolean):Boolean", "kind" : "def"}, {"label" : "containsValue", "tail" : "(value: T1): Boolean", "member" : "com.github.arturopala.tree.TreeLike.containsValue", "link" : "com\/github\/arturopala\/tree\/internal\/EmptyTreeLike.html#containsValue[T1>:T](value:T1):Boolean", "kind" : "def"}, {"label" : "paths", "tail" : "(): Iterable[Iterable[Nothing]]", "member" : "com.github.arturopala.tree.TreeLike.paths", "link" : "com\/github\/arturopala\/tree\/internal\/EmptyTreeLike.html#paths:Iterable[Iterable[T]]", "kind" : "def"}, {"label" : "lastChild", "tail" : "(): Option[Tree[Nothing]]", "member" : "com.github.arturopala.tree.TreeLike.lastChild", "link" : "com\/github\/arturopala\/tree\/internal\/EmptyTreeLike.html#lastChild:Option[com.github.arturopala.tree.Tree[T]]", "kind" : "def"}, {"label" : "firstChild", "tail" : "(): Option[Tree[Nothing]]", "member" : "com.github.arturopala.tree.TreeLike.firstChild", "link" : "com\/github\/arturopala\/tree\/internal\/EmptyTreeLike.html#firstChild:Option[com.github.arturopala.tree.Tree[T]]", "kind" : "def"}, {"label" : "lastChildValue", "tail" : "(): Option[Nothing]", "member" : "com.github.arturopala.tree.TreeLike.lastChildValue", "link" : "com\/github\/arturopala\/tree\/internal\/EmptyTreeLike.html#lastChildValue:Option[T]", "kind" : "def"}, {"label" : "firstChildValue", "tail" : "(): Option[Nothing]", "member" : "com.github.arturopala.tree.TreeLike.firstChildValue", "link" : "com\/github\/arturopala\/tree\/internal\/EmptyTreeLike.html#firstChildValue:Option[T]", "kind" : "def"}, {"label" : "nonEmpty", "tail" : "(): Boolean", "member" : "com.github.arturopala.tree.TreeLike.nonEmpty", "link" : "com\/github\/arturopala\/tree\/internal\/EmptyTreeLike.html#nonEmpty:Boolean", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/arturopala\/tree\/internal\/EmptyTreeLike.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/arturopala\/tree\/internal\/EmptyTreeLike.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/arturopala\/tree\/internal\/EmptyTreeLike.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/arturopala\/tree\/internal\/EmptyTreeLike.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/arturopala\/tree\/internal\/EmptyTreeLike.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/arturopala\/tree\/internal\/EmptyTreeLike.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/arturopala\/tree\/internal\/EmptyTreeLike.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/arturopala\/tree\/internal\/EmptyTreeLike.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/arturopala\/tree\/internal\/EmptyTreeLike.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/arturopala\/tree\/internal\/EmptyTreeLike.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/arturopala\/tree\/internal\/EmptyTreeLike.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/arturopala\/tree\/internal\/EmptyTreeLike.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/arturopala\/tree\/internal\/EmptyTreeLike.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/arturopala\/tree\/internal\/EmptyTreeLike.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/arturopala\/tree\/internal\/EmptyTreeLike.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/arturopala\/tree\/internal\/EmptyTreeLike.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/arturopala\/tree\/internal\/EmptyTreeLike.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/arturopala\/tree\/internal\/EmptyTreeLike.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/arturopala\/tree\/internal\/EmptyTreeLike.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "The Tree.empty final functions set."}, {"name" : "com.github.arturopala.tree.internal.FilterIterator", "shortDescription" : "Iterator over items fulfilling the predicate.", "members_class" : [{"label" : "GroupedIterator", "tail" : "", "member" : "scala.collection.Iterator.GroupedIterator", "link" : "com\/github\/arturopala\/tree\/internal\/FilterIterator.html#GroupedIterator[B<:<?>]extendsAbstractIterator[Seq[B]]", "kind" : "class"}, {"label" : "seekNext", "tail" : "(): Unit", "member" : "com.github.arturopala.tree.internal.FilterIterator.seekNext", "link" : "com\/github\/arturopala\/tree\/internal\/FilterIterator.html#seekNext():Unit", "kind" : "final def"}, {"label" : "next", "tail" : "(): A", "member" : "com.github.arturopala.tree.internal.FilterIterator.next", "link" : "com\/github\/arturopala\/tree\/internal\/FilterIterator.html#next():A", "kind" : "final def"}, {"label" : "v", "tail" : ": A", "member" : "com.github.arturopala.tree.internal.FilterIterator.v", "link" : "com\/github\/arturopala\/tree\/internal\/FilterIterator.html#v:A", "kind" : "var"}, {"label" : "hasNext", "tail" : ": Boolean", "member" : "com.github.arturopala.tree.internal.FilterIterator.hasNext", "link" : "com\/github\/arturopala\/tree\/internal\/FilterIterator.html#hasNext:Boolean", "kind" : "var"}, {"member" : "com.github.arturopala.tree.internal.FilterIterator#<init>", "error" : "unsupported entity"}, {"label" : "seq", "tail" : "(): FilterIterator.this.type", "member" : "scala.collection.Iterator.seq", "link" : "com\/github\/arturopala\/tree\/internal\/FilterIterator.html#seq:Iterator.this.type", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.collection.Iterator.toString", "link" : "com\/github\/arturopala\/tree\/internal\/FilterIterator.html#toString():String", "kind" : "def"}, {"label" : "tapEach", "tail" : "(f: (A) => U): Iterator[A]", "member" : "scala.collection.Iterator.tapEach", "link" : "com\/github\/arturopala\/tree\/internal\/FilterIterator.html#tapEach[U](f:A=>U):Iterator[A]", "kind" : "def"}, {"label" : "patch", "tail" : "(from: Int, patchElems: Iterator[B], replaced: Int): Iterator[B]", "member" : "scala.collection.Iterator.patch", "link" : "com\/github\/arturopala\/tree\/internal\/FilterIterator.html#patch[B>:A](from:Int,patchElems:Iterator[B],replaced:Int):Iterator[B]", "kind" : "def"}, {"label" : "duplicate", "tail" : "(): (Iterator[A], Iterator[A])", "member" : "scala.collection.Iterator.duplicate", "link" : "com\/github\/arturopala\/tree\/internal\/FilterIterator.html#duplicate:(Iterator[A],Iterator[A])", "kind" : "def"}, {"label" : "sameElements", "tail" : "(that: IterableOnce[B]): Boolean", "member" : "scala.collection.Iterator.sameElements", "link" : "com\/github\/arturopala\/tree\/internal\/FilterIterator.html#sameElements[B>:A](that:scala.collection.IterableOnce[B]):Boolean", "kind" : "def"}, {"label" : "zipWithIndex", "tail" : "(): Iterator[(A, Int)]", "member" : "scala.collection.Iterator.zipWithIndex", "link" : "com\/github\/arturopala\/tree\/internal\/FilterIterator.html#zipWithIndex:Iterator[(A,Int)]", "kind" : "def"}, {"label" : "zipAll", "tail" : "(that: IterableOnce[B], thisElem: A1, thatElem: B): Iterator[(A1, B)]", "member" : "scala.collection.Iterator.zipAll", "link" : "com\/github\/arturopala\/tree\/internal\/FilterIterator.html#zipAll[A1>:A,B](that:scala.collection.IterableOnce[B],thisElem:A1,thatElem:B):Iterator[(A1,B)]", "kind" : "def"}, {"label" : "zip", "tail" : "(that: IterableOnce[B]): Iterator[(A, B)]", "member" : "scala.collection.Iterator.zip", "link" : "com\/github\/arturopala\/tree\/internal\/FilterIterator.html#zip[B](that:scala.collection.IterableOnce[B]):Iterator[(A,B)]", "kind" : "def"}, {"label" : "sliceIterator", "tail" : "(from: Int, until: Int): Iterator[A]", "member" : "scala.collection.Iterator.sliceIterator", "link" : "com\/github\/arturopala\/tree\/internal\/FilterIterator.html#sliceIterator(from:Int,until:Int):Iterator[A]", "kind" : "def"}, {"label" : "slice", "tail" : "(from: Int, until: Int): Iterator[A]", "member" : "scala.collection.Iterator.slice", "link" : "com\/github\/arturopala\/tree\/internal\/FilterIterator.html#slice(from:Int,until:Int):Iterator[A]", "kind" : "def"}, {"label" : "span", "tail" : "(p: (A) => Boolean): (Iterator[A], Iterator[A])", "member" : "scala.collection.Iterator.span", "link" : "com\/github\/arturopala\/tree\/internal\/FilterIterator.html#span(p:A=>Boolean):(Iterator[A],Iterator[A])", "kind" : "def"}, {"label" : "dropWhile", "tail" : "(p: (A) => Boolean): Iterator[A]", "member" : "scala.collection.Iterator.dropWhile", "link" : "com\/github\/arturopala\/tree\/internal\/FilterIterator.html#dropWhile(p:A=>Boolean):Iterator[A]", "kind" : "def"}, {"label" : "drop", "tail" : "(n: Int): Iterator[A]", "member" : "scala.collection.Iterator.drop", "link" : "com\/github\/arturopala\/tree\/internal\/FilterIterator.html#drop(n:Int):Iterator[A]", "kind" : "def"}, {"label" : "takeWhile", "tail" : "(p: (A) => Boolean): Iterator[A]", "member" : "scala.collection.Iterator.takeWhile", "link" : "com\/github\/arturopala\/tree\/internal\/FilterIterator.html#takeWhile(p:A=>Boolean):Iterator[A]", "kind" : "def"}, {"label" : "take", "tail" : "(n: Int): Iterator[A]", "member" : "scala.collection.Iterator.take", "link" : "com\/github\/arturopala\/tree\/internal\/FilterIterator.html#take(n:Int):Iterator[A]", "kind" : "def"}, {"label" : "++", "tail" : "(xs: => IterableOnce[B]): Iterator[B]", "member" : "scala.collection.Iterator.++", "link" : "com\/github\/arturopala\/tree\/internal\/FilterIterator.html#++[B>:A](xs:=>scala.collection.IterableOnce[B]):Iterator[B]", "kind" : "final def"}, {"label" : "concat", "tail" : "(xs: => IterableOnce[B]): Iterator[B]", "member" : "scala.collection.Iterator.concat", "link" : "com\/github\/arturopala\/tree\/internal\/FilterIterator.html#concat[B>:A](xs:=>scala.collection.IterableOnce[B]):Iterator[B]", "kind" : "def"}, {"label" : "flatten", "tail" : "(ev: (A) => IterableOnce[B]): Iterator[B]", "member" : "scala.collection.Iterator.flatten", "link" : "com\/github\/arturopala\/tree\/internal\/FilterIterator.html#flatten[B](implicitev:A=>scala.collection.IterableOnce[B]):Iterator[B]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (A) => IterableOnce[B]): Iterator[B]", "member" : "scala.collection.Iterator.flatMap", "link" : "com\/github\/arturopala\/tree\/internal\/FilterIterator.html#flatMap[B](f:A=>scala.collection.IterableOnce[B]):Iterator[B]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (A) => B): Iterator[B]", "member" : "scala.collection.Iterator.map", "link" : "com\/github\/arturopala\/tree\/internal\/FilterIterator.html#map[B](f:A=>B):Iterator[B]", "kind" : "def"}, {"label" : "distinctBy", "tail" : "(f: (A) => B): Iterator[A]", "member" : "scala.collection.Iterator.distinctBy", "link" : "com\/github\/arturopala\/tree\/internal\/FilterIterator.html#distinctBy[B](f:A=>B):Iterator[A]", "kind" : "def"}, {"label" : "distinct", "tail" : "(): Iterator[A]", "member" : "scala.collection.Iterator.distinct", "link" : "com\/github\/arturopala\/tree\/internal\/FilterIterator.html#distinct:Iterator[A]", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[A, B]): Iterator[B]", "member" : "scala.collection.Iterator.collect", "link" : "com\/github\/arturopala\/tree\/internal\/FilterIterator.html#collect[B](pf:PartialFunction[A,B]):Iterator[B]", "kind" : "def"}, {"label" : "withFilter", "tail" : "(p: (A) => Boolean): Iterator[A]", "member" : "scala.collection.Iterator.withFilter", "link" : "com\/github\/arturopala\/tree\/internal\/FilterIterator.html#withFilter(p:A=>Boolean):Iterator[A]", "kind" : "def"}, {"label" : "filterNot", "tail" : "(p: (A) => Boolean): Iterator[A]", "member" : "scala.collection.Iterator.filterNot", "link" : "com\/github\/arturopala\/tree\/internal\/FilterIterator.html#filterNot(p:A=>Boolean):Iterator[A]", "kind" : "def"}, {"label" : "filter", "tail" : "(p: (A) => Boolean): Iterator[A]", "member" : "scala.collection.Iterator.filter", "link" : "com\/github\/arturopala\/tree\/internal\/FilterIterator.html#filter(p:A=>Boolean):Iterator[A]", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "scala.collection.Iterator.isEmpty", "link" : "com\/github\/arturopala\/tree\/internal\/FilterIterator.html#isEmpty:Boolean", "kind" : "def"}, {"label" : "length", "tail" : "(): Int", "member" : "scala.collection.Iterator.length", "link" : "com\/github\/arturopala\/tree\/internal\/FilterIterator.html#length:Int", "kind" : "final def"}, {"label" : "indexOf", "tail" : "(elem: B, from: Int): Int", "member" : "scala.collection.Iterator.indexOf", "link" : "com\/github\/arturopala\/tree\/internal\/FilterIterator.html#indexOf[B>:A](elem:B,from:Int):Int", "kind" : "def"}, {"label" : "indexOf", "tail" : "(elem: B): Int", "member" : "scala.collection.Iterator.indexOf", "link" : "com\/github\/arturopala\/tree\/internal\/FilterIterator.html#indexOf[B>:A](elem:B):Int", "kind" : "def"}, {"label" : "indexWhere", "tail" : "(p: (A) => Boolean, from: Int): Int", "member" : "scala.collection.Iterator.indexWhere", "link" : "com\/github\/arturopala\/tree\/internal\/FilterIterator.html#indexWhere(p:A=>Boolean,from:Int):Int", "kind" : "def"}, {"label" : "scanRight", "tail" : "(z: B)(op: (A, B) => B): Iterator[B]", "member" : "scala.collection.Iterator.scanRight", "link" : "com\/github\/arturopala\/tree\/internal\/FilterIterator.html#scanRight[B](z:B)(op:(A,B)=>B):Iterator[B]", "kind" : "def"}, {"label" : "scanLeft", "tail" : "(z: B)(op: (B, A) => B): Iterator[B]", "member" : "scala.collection.Iterator.scanLeft", "link" : "com\/github\/arturopala\/tree\/internal\/FilterIterator.html#scanLeft[B](z:B)(op:(B,A)=>B):Iterator[B]", "kind" : "def"}, {"label" : "sliding", "tail" : "(size: Int, step: Int): GroupedIterator[B]", "member" : "scala.collection.Iterator.sliding", "link" : "com\/github\/arturopala\/tree\/internal\/FilterIterator.html#sliding[B>:A](size:Int,step:Int):Iterator.this.GroupedIterator[B]", "kind" : "def"}, {"label" : "grouped", "tail" : "(size: Int): GroupedIterator[B]", "member" : "scala.collection.Iterator.grouped", "link" : "com\/github\/arturopala\/tree\/internal\/FilterIterator.html#grouped[B>:A](size:Int):Iterator.this.GroupedIterator[B]", "kind" : "def"}, {"label" : "partition", "tail" : "(p: (A) => Boolean): (Iterator[A], Iterator[A])", "member" : "scala.collection.Iterator.partition", "link" : "com\/github\/arturopala\/tree\/internal\/FilterIterator.html#partition(p:A=>Boolean):(Iterator[A],Iterator[A])", "kind" : "def"}, {"label" : "padTo", "tail" : "(len: Int, elem: B): Iterator[B]", "member" : "scala.collection.Iterator.padTo", "link" : "com\/github\/arturopala\/tree\/internal\/FilterIterator.html#padTo[B>:A](len:Int,elem:B):Iterator[B]", "kind" : "def"}, {"label" : "buffered", "tail" : "(): BufferedIterator[A]", "member" : "scala.collection.Iterator.buffered", "link" : "com\/github\/arturopala\/tree\/internal\/FilterIterator.html#buffered:scala.collection.BufferedIterator[A]", "kind" : "def"}, {"label" : "contains", "tail" : "(elem: Any): Boolean", "member" : "scala.collection.Iterator.contains", "link" : "com\/github\/arturopala\/tree\/internal\/FilterIterator.html#contains(elem:Any):Boolean", "kind" : "def"}, {"label" : "nextOption", "tail" : "(): Option[A]", "member" : "scala.collection.Iterator.nextOption", "link" : "com\/github\/arturopala\/tree\/internal\/FilterIterator.html#nextOption():Option[A]", "kind" : "def"}, {"label" : "iterator", "tail" : "(): Iterator[A]", "member" : "scala.collection.Iterator.iterator", "link" : "com\/github\/arturopala\/tree\/internal\/FilterIterator.html#iterator:Iterator[A]", "kind" : "final def"}, {"label" : "hasDefiniteSize", "tail" : "(): Boolean", "member" : "scala.collection.Iterator.hasDefiniteSize", "link" : "com\/github\/arturopala\/tree\/internal\/FilterIterator.html#hasDefiniteSize:Boolean", "kind" : "final def"}, {"label" : "reversed", "tail" : "(): Iterable[A]", "member" : "scala.collection.IterableOnceOps.reversed", "link" : "com\/github\/arturopala\/tree\/internal\/FilterIterator.html#reversed:Iterable[A]", "kind" : "def"}, {"label" : "toArray", "tail" : "(arg0: ClassTag[B]): Array[B]", "member" : "scala.collection.IterableOnceOps.toArray", "link" : "com\/github\/arturopala\/tree\/internal\/FilterIterator.html#toArray[B>:A](implicitevidence$2:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "toBuffer", "tail" : "(): Buffer[B]", "member" : "scala.collection.IterableOnceOps.toBuffer", "link" : "com\/github\/arturopala\/tree\/internal\/FilterIterator.html#toBuffer[B>:A]:scala.collection.mutable.Buffer[B]", "kind" : "final def"}, {"label" : "toStream", "tail" : "(): Stream[A]", "member" : "scala.collection.IterableOnceOps.toStream", "link" : "com\/github\/arturopala\/tree\/internal\/FilterIterator.html#toStream:scala.collection.immutable.Stream[A]", "kind" : "final def"}, {"label" : "toIndexedSeq", "tail" : "(): IndexedSeq[A]", "member" : "scala.collection.IterableOnceOps.toIndexedSeq", "link" : "com\/github\/arturopala\/tree\/internal\/FilterIterator.html#toIndexedSeq:IndexedSeq[A]", "kind" : "def"}, {"label" : "toSeq", "tail" : "(): Seq[A]", "member" : "scala.collection.IterableOnceOps.toSeq", "link" : "com\/github\/arturopala\/tree\/internal\/FilterIterator.html#toSeq:Seq[A]", "kind" : "def"}, {"label" : "toSet", "tail" : "(): Set[B]", "member" : "scala.collection.IterableOnceOps.toSet", "link" : "com\/github\/arturopala\/tree\/internal\/FilterIterator.html#toSet[B>:A]:scala.collection.immutable.Set[B]", "kind" : "def"}, {"label" : "toMap", "tail" : "(ev: <:<[A, (K, V)]): Map[K, V]", "member" : "scala.collection.IterableOnceOps.toMap", "link" : "com\/github\/arturopala\/tree\/internal\/FilterIterator.html#toMap[K,V](implicitev:A<:<(K,V)):scala.collection.immutable.Map[K,V]", "kind" : "def"}, {"label" : "toVector", "tail" : "(): Vector[A]", "member" : "scala.collection.IterableOnceOps.toVector", "link" : "com\/github\/arturopala\/tree\/internal\/FilterIterator.html#toVector:scala.collection.immutable.Vector[A]", "kind" : "def"}, {"label" : "toList", "tail" : "(): List[A]", "member" : "scala.collection.IterableOnceOps.toList", "link" : "com\/github\/arturopala\/tree\/internal\/FilterIterator.html#toList:List[A]", "kind" : "def"}, {"label" : "toIterator", "tail" : "(): Iterator[A]", "member" : "scala.collection.IterableOnceOps.toIterator", "link" : "com\/github\/arturopala\/tree\/internal\/FilterIterator.html#toIterator:Iterator[A]", "kind" : "final def"}, {"label" : "to", "tail" : "(factory: Factory[A, C1]): C1", "member" : "scala.collection.IterableOnceOps.to", "link" : "com\/github\/arturopala\/tree\/internal\/FilterIterator.html#to[C1](factory:scala.collection.Factory[A,C1]):C1", "kind" : "def"}, {"label" : "addString", "tail" : "(b: StringBuilder): StringBuilder", "member" : "scala.collection.IterableOnceOps.addString", "link" : "com\/github\/arturopala\/tree\/internal\/FilterIterator.html#addString(b:StringBuilder):StringBuilder", "kind" : "final def"}, {"label" : "addString", "tail" : "(b: StringBuilder, sep: String): StringBuilder", "member" : "scala.collection.IterableOnceOps.addString", "link" : "com\/github\/arturopala\/tree\/internal\/FilterIterator.html#addString(b:StringBuilder,sep:String):StringBuilder", "kind" : "final def"}, {"label" : "addString", "tail" : "(b: StringBuilder, start: String, sep: String, end: String): StringBuilder", "member" : "scala.collection.IterableOnceOps.addString", "link" : "com\/github\/arturopala\/tree\/internal\/FilterIterator.html#addString(b:StringBuilder,start:String,sep:String,end:String):StringBuilder", "kind" : "def"}, {"label" : "mkString", "tail" : "(): String", "member" : "scala.collection.IterableOnceOps.mkString", "link" : "com\/github\/arturopala\/tree\/internal\/FilterIterator.html#mkString:String", "kind" : "final def"}, {"label" : "mkString", "tail" : "(sep: String): String", "member" : "scala.collection.IterableOnceOps.mkString", "link" : "com\/github\/arturopala\/tree\/internal\/FilterIterator.html#mkString(sep:String):String", "kind" : "final def"}, {"label" : "mkString", "tail" : "(start: String, sep: String, end: String): String", "member" : "scala.collection.IterableOnceOps.mkString", "link" : "com\/github\/arturopala\/tree\/internal\/FilterIterator.html#mkString(start:String,sep:String,end:String):String", "kind" : "final def"}, {"label" : "corresponds", "tail" : "(that: IterableOnce[B])(p: (A, B) => Boolean): Boolean", "member" : "scala.collection.IterableOnceOps.corresponds", "link" : "com\/github\/arturopala\/tree\/internal\/FilterIterator.html#corresponds[B](that:scala.collection.IterableOnce[B])(p:(A,B)=>Boolean):Boolean", "kind" : "def"}, {"label" : "aggregate", "tail" : "(z: => B)(seqop: (B, A) => B, combop: (B, B) => B): B", "member" : "scala.collection.IterableOnceOps.aggregate", "link" : "com\/github\/arturopala\/tree\/internal\/FilterIterator.html#aggregate[B](z:=>B)(seqop:(B,A)=>B,combop:(B,B)=>B):B", "kind" : "def"}, {"label" : "collectFirst", "tail" : "(pf: PartialFunction[A, B]): Option[B]", "member" : "scala.collection.IterableOnceOps.collectFirst", "link" : "com\/github\/arturopala\/tree\/internal\/FilterIterator.html#collectFirst[B](pf:PartialFunction[A,B]):Option[B]", "kind" : "def"}, {"label" : "minByOption", "tail" : "(f: (A) => B)(cmp: Ordering[B]): Option[A]", "member" : "scala.collection.IterableOnceOps.minByOption", "link" : "com\/github\/arturopala\/tree\/internal\/FilterIterator.html#minByOption[B](f:A=>B)(implicitcmp:scala.math.Ordering[B]):Option[A]", "kind" : "def"}, {"label" : "minBy", "tail" : "(f: (A) => B)(cmp: Ordering[B]): A", "member" : "scala.collection.IterableOnceOps.minBy", "link" : "com\/github\/arturopala\/tree\/internal\/FilterIterator.html#minBy[B](f:A=>B)(implicitcmp:scala.math.Ordering[B]):A", "kind" : "def"}, {"label" : "maxByOption", "tail" : "(f: (A) => B)(cmp: Ordering[B]): Option[A]", "member" : "scala.collection.IterableOnceOps.maxByOption", "link" : "com\/github\/arturopala\/tree\/internal\/FilterIterator.html#maxByOption[B](f:A=>B)(implicitcmp:scala.math.Ordering[B]):Option[A]", "kind" : "def"}, {"label" : "maxBy", "tail" : "(f: (A) => B)(cmp: Ordering[B]): A", "member" : "scala.collection.IterableOnceOps.maxBy", "link" : "com\/github\/arturopala\/tree\/internal\/FilterIterator.html#maxBy[B](f:A=>B)(implicitcmp:scala.math.Ordering[B]):A", "kind" : "def"}, {"label" : "maxOption", "tail" : "(ord: Ordering[B]): Option[A]", "member" : "scala.collection.IterableOnceOps.maxOption", "link" : "com\/github\/arturopala\/tree\/internal\/FilterIterator.html#maxOption[B>:A](implicitord:scala.math.Ordering[B]):Option[A]", "kind" : "def"}, {"label" : "max", "tail" : "(ord: Ordering[B]): A", "member" : "scala.collection.IterableOnceOps.max", "link" : "com\/github\/arturopala\/tree\/internal\/FilterIterator.html#max[B>:A](implicitord:scala.math.Ordering[B]):A", "kind" : "def"}, {"label" : "minOption", "tail" : "(ord: Ordering[B]): Option[A]", "member" : "scala.collection.IterableOnceOps.minOption", "link" : "com\/github\/arturopala\/tree\/internal\/FilterIterator.html#minOption[B>:A](implicitord:scala.math.Ordering[B]):Option[A]", "kind" : "def"}, {"label" : "min", "tail" : "(ord: Ordering[B]): A", "member" : "scala.collection.IterableOnceOps.min", "link" : "com\/github\/arturopala\/tree\/internal\/FilterIterator.html#min[B>:A](implicitord:scala.math.Ordering[B]):A", "kind" : "def"}, {"label" : "product", "tail" : "(num: Numeric[B]): B", "member" : "scala.collection.IterableOnceOps.product", "link" : "com\/github\/arturopala\/tree\/internal\/FilterIterator.html#product[B>:A](implicitnum:scala.math.Numeric[B]):B", "kind" : "def"}, {"label" : "sum", "tail" : "(num: Numeric[B]): B", "member" : "scala.collection.IterableOnceOps.sum", "link" : "com\/github\/arturopala\/tree\/internal\/FilterIterator.html#sum[B>:A](implicitnum:scala.math.Numeric[B]):B", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B], start: Int, len: Int): Int", "member" : "scala.collection.IterableOnceOps.copyToArray", "link" : "com\/github\/arturopala\/tree\/internal\/FilterIterator.html#copyToArray[B>:A](xs:Array[B],start:Int,len:Int):Int", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B], start: Int): Int", "member" : "scala.collection.IterableOnceOps.copyToArray", "link" : "com\/github\/arturopala\/tree\/internal\/FilterIterator.html#copyToArray[B>:A](xs:Array[B],start:Int):Int", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B]): Int", "member" : "scala.collection.IterableOnceOps.copyToArray", "link" : "com\/github\/arturopala\/tree\/internal\/FilterIterator.html#copyToArray[B>:A](xs:Array[B]):Int", "kind" : "def"}, {"label" : "copyToBuffer", "tail" : "(dest: Buffer[B]): Unit", "member" : "scala.collection.IterableOnceOps.copyToBuffer", "link" : "com\/github\/arturopala\/tree\/internal\/FilterIterator.html#copyToBuffer[B>:A](dest:scala.collection.mutable.Buffer[B]):Unit", "kind" : "final def"}, {"label" : "size", "tail" : "(): Int", "member" : "scala.collection.IterableOnceOps.size", "link" : "com\/github\/arturopala\/tree\/internal\/FilterIterator.html#size:Int", "kind" : "def"}, {"label" : "nonEmpty", "tail" : "(): Boolean", "member" : "scala.collection.IterableOnceOps.nonEmpty", "link" : "com\/github\/arturopala\/tree\/internal\/FilterIterator.html#nonEmpty:Boolean", "kind" : "def"}, {"label" : "reduceRightOption", "tail" : "(op: (A, B) => B): Option[B]", "member" : "scala.collection.IterableOnceOps.reduceRightOption", "link" : "com\/github\/arturopala\/tree\/internal\/FilterIterator.html#reduceRightOption[B>:A](op:(A,B)=>B):Option[B]", "kind" : "def"}, {"label" : "reduceLeftOption", "tail" : "(op: (B, A) => B): Option[B]", "member" : "scala.collection.IterableOnceOps.reduceLeftOption", "link" : "com\/github\/arturopala\/tree\/internal\/FilterIterator.html#reduceLeftOption[B>:A](op:(B,A)=>B):Option[B]", "kind" : "def"}, {"label" : "reduceRight", "tail" : "(op: (A, B) => B): B", "member" : "scala.collection.IterableOnceOps.reduceRight", "link" : "com\/github\/arturopala\/tree\/internal\/FilterIterator.html#reduceRight[B>:A](op:(A,B)=>B):B", "kind" : "def"}, {"label" : "reduceLeft", "tail" : "(op: (B, A) => B): B", "member" : "scala.collection.IterableOnceOps.reduceLeft", "link" : "com\/github\/arturopala\/tree\/internal\/FilterIterator.html#reduceLeft[B>:A](op:(B,A)=>B):B", "kind" : "def"}, {"label" : "reduceOption", "tail" : "(op: (B, B) => B): Option[B]", "member" : "scala.collection.IterableOnceOps.reduceOption", "link" : "com\/github\/arturopala\/tree\/internal\/FilterIterator.html#reduceOption[B>:A](op:(B,B)=>B):Option[B]", "kind" : "def"}, {"label" : "reduce", "tail" : "(op: (B, B) => B): B", "member" : "scala.collection.IterableOnceOps.reduce", "link" : "com\/github\/arturopala\/tree\/internal\/FilterIterator.html#reduce[B>:A](op:(B,B)=>B):B", "kind" : "def"}, {"label" : "fold", "tail" : "(z: A1)(op: (A1, A1) => A1): A1", "member" : "scala.collection.IterableOnceOps.fold", "link" : "com\/github\/arturopala\/tree\/internal\/FilterIterator.html#fold[A1>:A](z:A1)(op:(A1,A1)=>A1):A1", "kind" : "def"}, {"label" : ":\\", "tail" : "(z: B)(op: (A, B) => B): B", "member" : "scala.collection.IterableOnceOps.:\\", "link" : "com\/github\/arturopala\/tree\/internal\/FilterIterator.html#:\\[B](z:B)(op:(A,B)=>B):B", "kind" : "final def"}, {"label" : "\/:", "tail" : "(z: B)(op: (B, A) => B): B", "member" : "scala.collection.IterableOnceOps.\/:", "link" : "com\/github\/arturopala\/tree\/internal\/FilterIterator.html#\/:[B](z:B)(op:(B,A)=>B):B", "kind" : "final def"}, {"label" : "foldRight", "tail" : "(z: B)(op: (A, B) => B): B", "member" : "scala.collection.IterableOnceOps.foldRight", "link" : "com\/github\/arturopala\/tree\/internal\/FilterIterator.html#foldRight[B](z:B)(op:(A,B)=>B):B", "kind" : "def"}, {"label" : "foldLeft", "tail" : "(z: B)(op: (B, A) => B): B", "member" : "scala.collection.IterableOnceOps.foldLeft", "link" : "com\/github\/arturopala\/tree\/internal\/FilterIterator.html#foldLeft[B](z:B)(op:(B,A)=>B):B", "kind" : "def"}, {"label" : "find", "tail" : "(p: (A) => Boolean): Option[A]", "member" : "scala.collection.IterableOnceOps.find", "link" : "com\/github\/arturopala\/tree\/internal\/FilterIterator.html#find(p:A=>Boolean):Option[A]", "kind" : "def"}, {"label" : "count", "tail" : "(p: (A) => Boolean): Int", "member" : "scala.collection.IterableOnceOps.count", "link" : "com\/github\/arturopala\/tree\/internal\/FilterIterator.html#count(p:A=>Boolean):Int", "kind" : "def"}, {"label" : "exists", "tail" : "(p: (A) => Boolean): Boolean", "member" : "scala.collection.IterableOnceOps.exists", "link" : "com\/github\/arturopala\/tree\/internal\/FilterIterator.html#exists(p:A=>Boolean):Boolean", "kind" : "def"}, {"label" : "forall", "tail" : "(p: (A) => Boolean): Boolean", "member" : "scala.collection.IterableOnceOps.forall", "link" : "com\/github\/arturopala\/tree\/internal\/FilterIterator.html#forall(p:A=>Boolean):Boolean", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (A) => U): Unit", "member" : "scala.collection.IterableOnceOps.foreach", "link" : "com\/github\/arturopala\/tree\/internal\/FilterIterator.html#foreach[U](f:A=>U):Unit", "kind" : "def"}, {"label" : "isTraversableAgain", "tail" : "(): Boolean", "member" : "scala.collection.IterableOnceOps.isTraversableAgain", "link" : "com\/github\/arturopala\/tree\/internal\/FilterIterator.html#isTraversableAgain:Boolean", "kind" : "def"}, {"label" : "splitAt", "tail" : "(n: Int): (Iterator[A], Iterator[A])", "member" : "scala.collection.IterableOnceOps.splitAt", "link" : "com\/github\/arturopala\/tree\/internal\/FilterIterator.html#splitAt(n:Int):(C,C)", "kind" : "def"}, {"label" : "knownSize", "tail" : "(): Int", "member" : "scala.collection.IterableOnce.knownSize", "link" : "com\/github\/arturopala\/tree\/internal\/FilterIterator.html#knownSize:Int", "kind" : "def"}, {"label" : "stepper", "tail" : "(shape: StepperShape[A, S]): S", "member" : "scala.collection.IterableOnce.stepper", "link" : "com\/github\/arturopala\/tree\/internal\/FilterIterator.html#stepper[S<:scala.collection.Stepper[_]](implicitshape:scala.collection.StepperShape[A,S]):S", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/arturopala\/tree\/internal\/FilterIterator.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/arturopala\/tree\/internal\/FilterIterator.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/arturopala\/tree\/internal\/FilterIterator.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/arturopala\/tree\/internal\/FilterIterator.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/arturopala\/tree\/internal\/FilterIterator.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/arturopala\/tree\/internal\/FilterIterator.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/arturopala\/tree\/internal\/FilterIterator.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/arturopala\/tree\/internal\/FilterIterator.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/arturopala\/tree\/internal\/FilterIterator.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/arturopala\/tree\/internal\/FilterIterator.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/arturopala\/tree\/internal\/FilterIterator.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/arturopala\/tree\/internal\/FilterIterator.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/arturopala\/tree\/internal\/FilterIterator.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/arturopala\/tree\/internal\/FilterIterator.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/arturopala\/tree\/internal\/FilterIterator.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/arturopala\/tree\/internal\/FilterIterator.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/arturopala\/tree\/internal\/FilterIterator.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/arturopala\/tree\/internal\/FilterIterator.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "com\/github\/arturopala\/tree\/internal\/FilterIterator.html", "kind" : "class"}, {"name" : "com.github.arturopala.tree.internal.IntOps", "shortDescription" : "", "object" : "com\/github\/arturopala\/tree\/internal\/IntOps$.html", "members_object" : [{"label" : "IntExt", "tail" : "", "member" : "com.github.arturopala.tree.internal.IntOps.IntExt", "link" : "com\/github\/arturopala\/tree\/internal\/IntOps$.html#IntExtextendsAnyVal", "kind" : "implicit final class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/arturopala\/tree\/internal\/IntOps$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/arturopala\/tree\/internal\/IntOps$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/arturopala\/tree\/internal\/IntOps$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/arturopala\/tree\/internal\/IntOps$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/arturopala\/tree\/internal\/IntOps$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/arturopala\/tree\/internal\/IntOps$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/arturopala\/tree\/internal\/IntOps$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/arturopala\/tree\/internal\/IntOps$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/arturopala\/tree\/internal\/IntOps$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/arturopala\/tree\/internal\/IntOps$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/arturopala\/tree\/internal\/IntOps$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/arturopala\/tree\/internal\/IntOps$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/arturopala\/tree\/internal\/IntOps$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/arturopala\/tree\/internal\/IntOps$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/arturopala\/tree\/internal\/IntOps$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/arturopala\/tree\/internal\/IntOps$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/arturopala\/tree\/internal\/IntOps$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/arturopala\/tree\/internal\/IntOps$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/arturopala\/tree\/internal\/IntOps$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.github.arturopala.tree.internal.IterableOps", "shortDescription" : "", "object" : "com\/github\/arturopala\/tree\/internal\/IterableOps$.html", "members_object" : [{"label" : "iterableFrom", "tail" : "(createIterator: => Iterator[T]): Iterable[T]", "member" : "com.github.arturopala.tree.internal.IterableOps.iterableFrom", "link" : "com\/github\/arturopala\/tree\/internal\/IterableOps$.html#iterableFrom[T](createIterator:=>Iterator[T]):Iterable[T]", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/arturopala\/tree\/internal\/IterableOps$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/arturopala\/tree\/internal\/IterableOps$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/arturopala\/tree\/internal\/IterableOps$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/arturopala\/tree\/internal\/IterableOps$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/arturopala\/tree\/internal\/IterableOps$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/arturopala\/tree\/internal\/IterableOps$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/arturopala\/tree\/internal\/IterableOps$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/arturopala\/tree\/internal\/IterableOps$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/arturopala\/tree\/internal\/IterableOps$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/arturopala\/tree\/internal\/IterableOps$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/arturopala\/tree\/internal\/IterableOps$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/arturopala\/tree\/internal\/IterableOps$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/arturopala\/tree\/internal\/IterableOps$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/arturopala\/tree\/internal\/IterableOps$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/arturopala\/tree\/internal\/IterableOps$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/arturopala\/tree\/internal\/IterableOps$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/arturopala\/tree\/internal\/IterableOps$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/arturopala\/tree\/internal\/IterableOps$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/arturopala\/tree\/internal\/IterableOps$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.github.arturopala.tree.internal.IteratorOps", "shortDescription" : "Extensions to Iterator enabling lightweight composition.", "object" : "com\/github\/arturopala\/tree\/internal\/IteratorOps$.html", "members_object" : [{"label" : "ChainedIterator", "tail" : "", "member" : "com.github.arturopala.tree.internal.IteratorOps.ChainedIterator", "link" : "com\/github\/arturopala\/tree\/internal\/IteratorOps$.html#ChainedIterator[T]extendsIterator[T]", "kind" : "final class"}, {"label" : "IteratorExt", "tail" : "", "member" : "com.github.arturopala.tree.internal.IteratorOps.IteratorExt", "link" : "com\/github\/arturopala\/tree\/internal\/IteratorOps$.html#IteratorExt[T]extendsAnyVal", "kind" : "implicit final class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/arturopala\/tree\/internal\/IteratorOps$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/arturopala\/tree\/internal\/IteratorOps$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/arturopala\/tree\/internal\/IteratorOps$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/arturopala\/tree\/internal\/IteratorOps$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/arturopala\/tree\/internal\/IteratorOps$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/arturopala\/tree\/internal\/IteratorOps$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/arturopala\/tree\/internal\/IteratorOps$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/arturopala\/tree\/internal\/IteratorOps$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/arturopala\/tree\/internal\/IteratorOps$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/arturopala\/tree\/internal\/IteratorOps$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/arturopala\/tree\/internal\/IteratorOps$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/arturopala\/tree\/internal\/IteratorOps$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/arturopala\/tree\/internal\/IteratorOps$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/arturopala\/tree\/internal\/IteratorOps$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/arturopala\/tree\/internal\/IteratorOps$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/arturopala\/tree\/internal\/IteratorOps$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/arturopala\/tree\/internal\/IteratorOps$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/arturopala\/tree\/internal\/IteratorOps$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/arturopala\/tree\/internal\/IteratorOps$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.github.arturopala.tree.internal.MapFilterIterator", "shortDescription" : "Iterator over mapped items fulfilling the predicate.", "members_class" : [{"label" : "GroupedIterator", "tail" : "", "member" : "scala.collection.Iterator.GroupedIterator", "link" : "com\/github\/arturopala\/tree\/internal\/MapFilterIterator.html#GroupedIterator[B>:A]extendsAbstractIterator[Seq[B]]", "kind" : "class"}, {"label" : "seekNext", "tail" : "(): B", "member" : "com.github.arturopala.tree.internal.MapFilterIterator.seekNext", "link" : "com\/github\/arturopala\/tree\/internal\/MapFilterIterator.html#seekNext:B", "kind" : "final def"}, {"label" : "next", "tail" : "(): B", "member" : "com.github.arturopala.tree.internal.MapFilterIterator.next", "link" : "com\/github\/arturopala\/tree\/internal\/MapFilterIterator.html#next():B", "kind" : "final def"}, {"label" : "v", "tail" : ": B", "member" : "com.github.arturopala.tree.internal.MapFilterIterator.v", "link" : "com\/github\/arturopala\/tree\/internal\/MapFilterIterator.html#v:B", "kind" : "var"}, {"label" : "hasNext", "tail" : ": Boolean", "member" : "com.github.arturopala.tree.internal.MapFilterIterator.hasNext", "link" : "com\/github\/arturopala\/tree\/internal\/MapFilterIterator.html#hasNext:Boolean", "kind" : "var"}, {"member" : "com.github.arturopala.tree.internal.MapFilterIterator#<init>", "error" : "unsupported entity"}, {"label" : "seq", "tail" : "(): MapFilterIterator.this.type", "member" : "scala.collection.Iterator.seq", "link" : "com\/github\/arturopala\/tree\/internal\/MapFilterIterator.html#seq:Iterator.this.type", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.collection.Iterator.toString", "link" : "com\/github\/arturopala\/tree\/internal\/MapFilterIterator.html#toString():String", "kind" : "def"}, {"label" : "tapEach", "tail" : "(f: (B) => U): Iterator[B]", "member" : "scala.collection.Iterator.tapEach", "link" : "com\/github\/arturopala\/tree\/internal\/MapFilterIterator.html#tapEach[U](f:A=>U):Iterator[A]", "kind" : "def"}, {"label" : "patch", "tail" : "(from: Int, patchElems: Iterator[B], replaced: Int): Iterator[B]", "member" : "scala.collection.Iterator.patch", "link" : "com\/github\/arturopala\/tree\/internal\/MapFilterIterator.html#patch[B>:A](from:Int,patchElems:Iterator[B],replaced:Int):Iterator[B]", "kind" : "def"}, {"label" : "duplicate", "tail" : "(): (Iterator[B], Iterator[B])", "member" : "scala.collection.Iterator.duplicate", "link" : "com\/github\/arturopala\/tree\/internal\/MapFilterIterator.html#duplicate:(Iterator[A],Iterator[A])", "kind" : "def"}, {"label" : "sameElements", "tail" : "(that: IterableOnce[B]): Boolean", "member" : "scala.collection.Iterator.sameElements", "link" : "com\/github\/arturopala\/tree\/internal\/MapFilterIterator.html#sameElements[B>:A](that:scala.collection.IterableOnce[B]):Boolean", "kind" : "def"}, {"label" : "zipWithIndex", "tail" : "(): Iterator[(B, Int)]", "member" : "scala.collection.Iterator.zipWithIndex", "link" : "com\/github\/arturopala\/tree\/internal\/MapFilterIterator.html#zipWithIndex:Iterator[(A,Int)]", "kind" : "def"}, {"label" : "zipAll", "tail" : "(that: IterableOnce[B], thisElem: A1, thatElem: B): Iterator[(A1, B)]", "member" : "scala.collection.Iterator.zipAll", "link" : "com\/github\/arturopala\/tree\/internal\/MapFilterIterator.html#zipAll[A1>:A,B](that:scala.collection.IterableOnce[B],thisElem:A1,thatElem:B):Iterator[(A1,B)]", "kind" : "def"}, {"label" : "zip", "tail" : "(that: IterableOnce[B]): Iterator[(B, B)]", "member" : "scala.collection.Iterator.zip", "link" : "com\/github\/arturopala\/tree\/internal\/MapFilterIterator.html#zip[B](that:scala.collection.IterableOnce[B]):Iterator[(A,B)]", "kind" : "def"}, {"label" : "sliceIterator", "tail" : "(from: Int, until: Int): Iterator[B]", "member" : "scala.collection.Iterator.sliceIterator", "link" : "com\/github\/arturopala\/tree\/internal\/MapFilterIterator.html#sliceIterator(from:Int,until:Int):Iterator[A]", "kind" : "def"}, {"label" : "slice", "tail" : "(from: Int, until: Int): Iterator[B]", "member" : "scala.collection.Iterator.slice", "link" : "com\/github\/arturopala\/tree\/internal\/MapFilterIterator.html#slice(from:Int,until:Int):Iterator[A]", "kind" : "def"}, {"label" : "span", "tail" : "(p: (B) => Boolean): (Iterator[B], Iterator[B])", "member" : "scala.collection.Iterator.span", "link" : "com\/github\/arturopala\/tree\/internal\/MapFilterIterator.html#span(p:A=>Boolean):(Iterator[A],Iterator[A])", "kind" : "def"}, {"label" : "dropWhile", "tail" : "(p: (B) => Boolean): Iterator[B]", "member" : "scala.collection.Iterator.dropWhile", "link" : "com\/github\/arturopala\/tree\/internal\/MapFilterIterator.html#dropWhile(p:A=>Boolean):Iterator[A]", "kind" : "def"}, {"label" : "drop", "tail" : "(n: Int): Iterator[B]", "member" : "scala.collection.Iterator.drop", "link" : "com\/github\/arturopala\/tree\/internal\/MapFilterIterator.html#drop(n:Int):Iterator[A]", "kind" : "def"}, {"label" : "takeWhile", "tail" : "(p: (B) => Boolean): Iterator[B]", "member" : "scala.collection.Iterator.takeWhile", "link" : "com\/github\/arturopala\/tree\/internal\/MapFilterIterator.html#takeWhile(p:A=>Boolean):Iterator[A]", "kind" : "def"}, {"label" : "take", "tail" : "(n: Int): Iterator[B]", "member" : "scala.collection.Iterator.take", "link" : "com\/github\/arturopala\/tree\/internal\/MapFilterIterator.html#take(n:Int):Iterator[A]", "kind" : "def"}, {"label" : "++", "tail" : "(xs: => IterableOnce[B]): Iterator[B]", "member" : "scala.collection.Iterator.++", "link" : "com\/github\/arturopala\/tree\/internal\/MapFilterIterator.html#++[B>:A](xs:=>scala.collection.IterableOnce[B]):Iterator[B]", "kind" : "final def"}, {"label" : "concat", "tail" : "(xs: => IterableOnce[B]): Iterator[B]", "member" : "scala.collection.Iterator.concat", "link" : "com\/github\/arturopala\/tree\/internal\/MapFilterIterator.html#concat[B>:A](xs:=>scala.collection.IterableOnce[B]):Iterator[B]", "kind" : "def"}, {"label" : "flatten", "tail" : "(ev: (B) => IterableOnce[B]): Iterator[B]", "member" : "scala.collection.Iterator.flatten", "link" : "com\/github\/arturopala\/tree\/internal\/MapFilterIterator.html#flatten[B](implicitev:A=>scala.collection.IterableOnce[B]):Iterator[B]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (B) => IterableOnce[B]): Iterator[B]", "member" : "scala.collection.Iterator.flatMap", "link" : "com\/github\/arturopala\/tree\/internal\/MapFilterIterator.html#flatMap[B](f:A=>scala.collection.IterableOnce[B]):Iterator[B]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (B) => B): Iterator[B]", "member" : "scala.collection.Iterator.map", "link" : "com\/github\/arturopala\/tree\/internal\/MapFilterIterator.html#map[B](f:A=>B):Iterator[B]", "kind" : "def"}, {"label" : "distinctBy", "tail" : "(f: (B) => B): Iterator[B]", "member" : "scala.collection.Iterator.distinctBy", "link" : "com\/github\/arturopala\/tree\/internal\/MapFilterIterator.html#distinctBy[B](f:A=>B):Iterator[A]", "kind" : "def"}, {"label" : "distinct", "tail" : "(): Iterator[B]", "member" : "scala.collection.Iterator.distinct", "link" : "com\/github\/arturopala\/tree\/internal\/MapFilterIterator.html#distinct:Iterator[A]", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[B, B]): Iterator[B]", "member" : "scala.collection.Iterator.collect", "link" : "com\/github\/arturopala\/tree\/internal\/MapFilterIterator.html#collect[B](pf:PartialFunction[A,B]):Iterator[B]", "kind" : "def"}, {"label" : "withFilter", "tail" : "(p: (B) => Boolean): Iterator[B]", "member" : "scala.collection.Iterator.withFilter", "link" : "com\/github\/arturopala\/tree\/internal\/MapFilterIterator.html#withFilter(p:A=>Boolean):Iterator[A]", "kind" : "def"}, {"label" : "filterNot", "tail" : "(p: (B) => Boolean): Iterator[B]", "member" : "scala.collection.Iterator.filterNot", "link" : "com\/github\/arturopala\/tree\/internal\/MapFilterIterator.html#filterNot(p:A=>Boolean):Iterator[A]", "kind" : "def"}, {"label" : "filter", "tail" : "(p: (B) => Boolean): Iterator[B]", "member" : "scala.collection.Iterator.filter", "link" : "com\/github\/arturopala\/tree\/internal\/MapFilterIterator.html#filter(p:A=>Boolean):Iterator[A]", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "scala.collection.Iterator.isEmpty", "link" : "com\/github\/arturopala\/tree\/internal\/MapFilterIterator.html#isEmpty:Boolean", "kind" : "def"}, {"label" : "length", "tail" : "(): Int", "member" : "scala.collection.Iterator.length", "link" : "com\/github\/arturopala\/tree\/internal\/MapFilterIterator.html#length:Int", "kind" : "final def"}, {"label" : "indexOf", "tail" : "(elem: B, from: Int): Int", "member" : "scala.collection.Iterator.indexOf", "link" : "com\/github\/arturopala\/tree\/internal\/MapFilterIterator.html#indexOf[B>:A](elem:B,from:Int):Int", "kind" : "def"}, {"label" : "indexOf", "tail" : "(elem: B): Int", "member" : "scala.collection.Iterator.indexOf", "link" : "com\/github\/arturopala\/tree\/internal\/MapFilterIterator.html#indexOf[B>:A](elem:B):Int", "kind" : "def"}, {"label" : "indexWhere", "tail" : "(p: (B) => Boolean, from: Int): Int", "member" : "scala.collection.Iterator.indexWhere", "link" : "com\/github\/arturopala\/tree\/internal\/MapFilterIterator.html#indexWhere(p:A=>Boolean,from:Int):Int", "kind" : "def"}, {"label" : "scanRight", "tail" : "(z: B)(op: (B, B) => B): Iterator[B]", "member" : "scala.collection.Iterator.scanRight", "link" : "com\/github\/arturopala\/tree\/internal\/MapFilterIterator.html#scanRight[B](z:B)(op:(A,B)=>B):Iterator[B]", "kind" : "def"}, {"label" : "scanLeft", "tail" : "(z: B)(op: (B, B) => B): Iterator[B]", "member" : "scala.collection.Iterator.scanLeft", "link" : "com\/github\/arturopala\/tree\/internal\/MapFilterIterator.html#scanLeft[B](z:B)(op:(B,A)=>B):Iterator[B]", "kind" : "def"}, {"label" : "sliding", "tail" : "(size: Int, step: Int): GroupedIterator[B]", "member" : "scala.collection.Iterator.sliding", "link" : "com\/github\/arturopala\/tree\/internal\/MapFilterIterator.html#sliding[B>:A](size:Int,step:Int):Iterator.this.GroupedIterator[B]", "kind" : "def"}, {"label" : "grouped", "tail" : "(size: Int): GroupedIterator[B]", "member" : "scala.collection.Iterator.grouped", "link" : "com\/github\/arturopala\/tree\/internal\/MapFilterIterator.html#grouped[B>:A](size:Int):Iterator.this.GroupedIterator[B]", "kind" : "def"}, {"label" : "partition", "tail" : "(p: (B) => Boolean): (Iterator[B], Iterator[B])", "member" : "scala.collection.Iterator.partition", "link" : "com\/github\/arturopala\/tree\/internal\/MapFilterIterator.html#partition(p:A=>Boolean):(Iterator[A],Iterator[A])", "kind" : "def"}, {"label" : "padTo", "tail" : "(len: Int, elem: B): Iterator[B]", "member" : "scala.collection.Iterator.padTo", "link" : "com\/github\/arturopala\/tree\/internal\/MapFilterIterator.html#padTo[B>:A](len:Int,elem:B):Iterator[B]", "kind" : "def"}, {"label" : "buffered", "tail" : "(): BufferedIterator[B]", "member" : "scala.collection.Iterator.buffered", "link" : "com\/github\/arturopala\/tree\/internal\/MapFilterIterator.html#buffered:scala.collection.BufferedIterator[A]", "kind" : "def"}, {"label" : "contains", "tail" : "(elem: Any): Boolean", "member" : "scala.collection.Iterator.contains", "link" : "com\/github\/arturopala\/tree\/internal\/MapFilterIterator.html#contains(elem:Any):Boolean", "kind" : "def"}, {"label" : "nextOption", "tail" : "(): Option[B]", "member" : "scala.collection.Iterator.nextOption", "link" : "com\/github\/arturopala\/tree\/internal\/MapFilterIterator.html#nextOption():Option[A]", "kind" : "def"}, {"label" : "iterator", "tail" : "(): Iterator[B]", "member" : "scala.collection.Iterator.iterator", "link" : "com\/github\/arturopala\/tree\/internal\/MapFilterIterator.html#iterator:Iterator[A]", "kind" : "final def"}, {"label" : "hasDefiniteSize", "tail" : "(): Boolean", "member" : "scala.collection.Iterator.hasDefiniteSize", "link" : "com\/github\/arturopala\/tree\/internal\/MapFilterIterator.html#hasDefiniteSize:Boolean", "kind" : "final def"}, {"label" : "reversed", "tail" : "(): Iterable[B]", "member" : "scala.collection.IterableOnceOps.reversed", "link" : "com\/github\/arturopala\/tree\/internal\/MapFilterIterator.html#reversed:Iterable[A]", "kind" : "def"}, {"label" : "toArray", "tail" : "(arg0: ClassTag[B]): Array[B]", "member" : "scala.collection.IterableOnceOps.toArray", "link" : "com\/github\/arturopala\/tree\/internal\/MapFilterIterator.html#toArray[B>:A](implicitevidence$2:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "toBuffer", "tail" : "(): Buffer[B]", "member" : "scala.collection.IterableOnceOps.toBuffer", "link" : "com\/github\/arturopala\/tree\/internal\/MapFilterIterator.html#toBuffer[B>:A]:scala.collection.mutable.Buffer[B]", "kind" : "final def"}, {"label" : "toStream", "tail" : "(): Stream[B]", "member" : "scala.collection.IterableOnceOps.toStream", "link" : "com\/github\/arturopala\/tree\/internal\/MapFilterIterator.html#toStream:scala.collection.immutable.Stream[A]", "kind" : "final def"}, {"label" : "toIndexedSeq", "tail" : "(): IndexedSeq[B]", "member" : "scala.collection.IterableOnceOps.toIndexedSeq", "link" : "com\/github\/arturopala\/tree\/internal\/MapFilterIterator.html#toIndexedSeq:IndexedSeq[A]", "kind" : "def"}, {"label" : "toSeq", "tail" : "(): Seq[B]", "member" : "scala.collection.IterableOnceOps.toSeq", "link" : "com\/github\/arturopala\/tree\/internal\/MapFilterIterator.html#toSeq:Seq[A]", "kind" : "def"}, {"label" : "toSet", "tail" : "(): Set[B]", "member" : "scala.collection.IterableOnceOps.toSet", "link" : "com\/github\/arturopala\/tree\/internal\/MapFilterIterator.html#toSet[B>:A]:scala.collection.immutable.Set[B]", "kind" : "def"}, {"label" : "toMap", "tail" : "(ev: <:<[B, (K, V)]): Map[K, V]", "member" : "scala.collection.IterableOnceOps.toMap", "link" : "com\/github\/arturopala\/tree\/internal\/MapFilterIterator.html#toMap[K,V](implicitev:A<:<(K,V)):scala.collection.immutable.Map[K,V]", "kind" : "def"}, {"label" : "toVector", "tail" : "(): Vector[B]", "member" : "scala.collection.IterableOnceOps.toVector", "link" : "com\/github\/arturopala\/tree\/internal\/MapFilterIterator.html#toVector:scala.collection.immutable.Vector[A]", "kind" : "def"}, {"label" : "toList", "tail" : "(): List[B]", "member" : "scala.collection.IterableOnceOps.toList", "link" : "com\/github\/arturopala\/tree\/internal\/MapFilterIterator.html#toList:List[A]", "kind" : "def"}, {"label" : "toIterator", "tail" : "(): Iterator[B]", "member" : "scala.collection.IterableOnceOps.toIterator", "link" : "com\/github\/arturopala\/tree\/internal\/MapFilterIterator.html#toIterator:Iterator[A]", "kind" : "final def"}, {"label" : "to", "tail" : "(factory: Factory[B, C1]): C1", "member" : "scala.collection.IterableOnceOps.to", "link" : "com\/github\/arturopala\/tree\/internal\/MapFilterIterator.html#to[C1](factory:scala.collection.Factory[A,C1]):C1", "kind" : "def"}, {"label" : "addString", "tail" : "(b: StringBuilder): StringBuilder", "member" : "scala.collection.IterableOnceOps.addString", "link" : "com\/github\/arturopala\/tree\/internal\/MapFilterIterator.html#addString(b:StringBuilder):StringBuilder", "kind" : "final def"}, {"label" : "addString", "tail" : "(b: StringBuilder, sep: String): StringBuilder", "member" : "scala.collection.IterableOnceOps.addString", "link" : "com\/github\/arturopala\/tree\/internal\/MapFilterIterator.html#addString(b:StringBuilder,sep:String):StringBuilder", "kind" : "final def"}, {"label" : "addString", "tail" : "(b: StringBuilder, start: String, sep: String, end: String): StringBuilder", "member" : "scala.collection.IterableOnceOps.addString", "link" : "com\/github\/arturopala\/tree\/internal\/MapFilterIterator.html#addString(b:StringBuilder,start:String,sep:String,end:String):StringBuilder", "kind" : "def"}, {"label" : "mkString", "tail" : "(): String", "member" : "scala.collection.IterableOnceOps.mkString", "link" : "com\/github\/arturopala\/tree\/internal\/MapFilterIterator.html#mkString:String", "kind" : "final def"}, {"label" : "mkString", "tail" : "(sep: String): String", "member" : "scala.collection.IterableOnceOps.mkString", "link" : "com\/github\/arturopala\/tree\/internal\/MapFilterIterator.html#mkString(sep:String):String", "kind" : "final def"}, {"label" : "mkString", "tail" : "(start: String, sep: String, end: String): String", "member" : "scala.collection.IterableOnceOps.mkString", "link" : "com\/github\/arturopala\/tree\/internal\/MapFilterIterator.html#mkString(start:String,sep:String,end:String):String", "kind" : "final def"}, {"label" : "corresponds", "tail" : "(that: IterableOnce[B])(p: (B, B) => Boolean): Boolean", "member" : "scala.collection.IterableOnceOps.corresponds", "link" : "com\/github\/arturopala\/tree\/internal\/MapFilterIterator.html#corresponds[B](that:scala.collection.IterableOnce[B])(p:(A,B)=>Boolean):Boolean", "kind" : "def"}, {"label" : "aggregate", "tail" : "(z: => B)(seqop: (B, B) => B, combop: (B, B) => B): B", "member" : "scala.collection.IterableOnceOps.aggregate", "link" : "com\/github\/arturopala\/tree\/internal\/MapFilterIterator.html#aggregate[B](z:=>B)(seqop:(B,A)=>B,combop:(B,B)=>B):B", "kind" : "def"}, {"label" : "collectFirst", "tail" : "(pf: PartialFunction[B, B]): Option[B]", "member" : "scala.collection.IterableOnceOps.collectFirst", "link" : "com\/github\/arturopala\/tree\/internal\/MapFilterIterator.html#collectFirst[B](pf:PartialFunction[A,B]):Option[B]", "kind" : "def"}, {"label" : "minByOption", "tail" : "(f: (B) => B)(cmp: Ordering[B]): Option[B]", "member" : "scala.collection.IterableOnceOps.minByOption", "link" : "com\/github\/arturopala\/tree\/internal\/MapFilterIterator.html#minByOption[B](f:A=>B)(implicitcmp:scala.math.Ordering[B]):Option[A]", "kind" : "def"}, {"label" : "minBy", "tail" : "(f: (B) => B)(cmp: Ordering[B]): B", "member" : "scala.collection.IterableOnceOps.minBy", "link" : "com\/github\/arturopala\/tree\/internal\/MapFilterIterator.html#minBy[B](f:A=>B)(implicitcmp:scala.math.Ordering[B]):A", "kind" : "def"}, {"label" : "maxByOption", "tail" : "(f: (B) => B)(cmp: Ordering[B]): Option[B]", "member" : "scala.collection.IterableOnceOps.maxByOption", "link" : "com\/github\/arturopala\/tree\/internal\/MapFilterIterator.html#maxByOption[B](f:A=>B)(implicitcmp:scala.math.Ordering[B]):Option[A]", "kind" : "def"}, {"label" : "maxBy", "tail" : "(f: (B) => B)(cmp: Ordering[B]): B", "member" : "scala.collection.IterableOnceOps.maxBy", "link" : "com\/github\/arturopala\/tree\/internal\/MapFilterIterator.html#maxBy[B](f:A=>B)(implicitcmp:scala.math.Ordering[B]):A", "kind" : "def"}, {"label" : "maxOption", "tail" : "(ord: Ordering[B]): Option[B]", "member" : "scala.collection.IterableOnceOps.maxOption", "link" : "com\/github\/arturopala\/tree\/internal\/MapFilterIterator.html#maxOption[B>:A](implicitord:scala.math.Ordering[B]):Option[A]", "kind" : "def"}, {"label" : "max", "tail" : "(ord: Ordering[B]): B", "member" : "scala.collection.IterableOnceOps.max", "link" : "com\/github\/arturopala\/tree\/internal\/MapFilterIterator.html#max[B>:A](implicitord:scala.math.Ordering[B]):A", "kind" : "def"}, {"label" : "minOption", "tail" : "(ord: Ordering[B]): Option[B]", "member" : "scala.collection.IterableOnceOps.minOption", "link" : "com\/github\/arturopala\/tree\/internal\/MapFilterIterator.html#minOption[B>:A](implicitord:scala.math.Ordering[B]):Option[A]", "kind" : "def"}, {"label" : "min", "tail" : "(ord: Ordering[B]): B", "member" : "scala.collection.IterableOnceOps.min", "link" : "com\/github\/arturopala\/tree\/internal\/MapFilterIterator.html#min[B>:A](implicitord:scala.math.Ordering[B]):A", "kind" : "def"}, {"label" : "product", "tail" : "(num: Numeric[B]): B", "member" : "scala.collection.IterableOnceOps.product", "link" : "com\/github\/arturopala\/tree\/internal\/MapFilterIterator.html#product[B>:A](implicitnum:scala.math.Numeric[B]):B", "kind" : "def"}, {"label" : "sum", "tail" : "(num: Numeric[B]): B", "member" : "scala.collection.IterableOnceOps.sum", "link" : "com\/github\/arturopala\/tree\/internal\/MapFilterIterator.html#sum[B>:A](implicitnum:scala.math.Numeric[B]):B", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B], start: Int, len: Int): Int", "member" : "scala.collection.IterableOnceOps.copyToArray", "link" : "com\/github\/arturopala\/tree\/internal\/MapFilterIterator.html#copyToArray[B>:A](xs:Array[B],start:Int,len:Int):Int", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B], start: Int): Int", "member" : "scala.collection.IterableOnceOps.copyToArray", "link" : "com\/github\/arturopala\/tree\/internal\/MapFilterIterator.html#copyToArray[B>:A](xs:Array[B],start:Int):Int", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B]): Int", "member" : "scala.collection.IterableOnceOps.copyToArray", "link" : "com\/github\/arturopala\/tree\/internal\/MapFilterIterator.html#copyToArray[B>:A](xs:Array[B]):Int", "kind" : "def"}, {"label" : "copyToBuffer", "tail" : "(dest: Buffer[B]): Unit", "member" : "scala.collection.IterableOnceOps.copyToBuffer", "link" : "com\/github\/arturopala\/tree\/internal\/MapFilterIterator.html#copyToBuffer[B>:A](dest:scala.collection.mutable.Buffer[B]):Unit", "kind" : "final def"}, {"label" : "size", "tail" : "(): Int", "member" : "scala.collection.IterableOnceOps.size", "link" : "com\/github\/arturopala\/tree\/internal\/MapFilterIterator.html#size:Int", "kind" : "def"}, {"label" : "nonEmpty", "tail" : "(): Boolean", "member" : "scala.collection.IterableOnceOps.nonEmpty", "link" : "com\/github\/arturopala\/tree\/internal\/MapFilterIterator.html#nonEmpty:Boolean", "kind" : "def"}, {"label" : "reduceRightOption", "tail" : "(op: (B, B) => B): Option[B]", "member" : "scala.collection.IterableOnceOps.reduceRightOption", "link" : "com\/github\/arturopala\/tree\/internal\/MapFilterIterator.html#reduceRightOption[B>:A](op:(A,B)=>B):Option[B]", "kind" : "def"}, {"label" : "reduceLeftOption", "tail" : "(op: (B, B) => B): Option[B]", "member" : "scala.collection.IterableOnceOps.reduceLeftOption", "link" : "com\/github\/arturopala\/tree\/internal\/MapFilterIterator.html#reduceLeftOption[B>:A](op:(B,A)=>B):Option[B]", "kind" : "def"}, {"label" : "reduceRight", "tail" : "(op: (B, B) => B): B", "member" : "scala.collection.IterableOnceOps.reduceRight", "link" : "com\/github\/arturopala\/tree\/internal\/MapFilterIterator.html#reduceRight[B>:A](op:(A,B)=>B):B", "kind" : "def"}, {"label" : "reduceLeft", "tail" : "(op: (B, B) => B): B", "member" : "scala.collection.IterableOnceOps.reduceLeft", "link" : "com\/github\/arturopala\/tree\/internal\/MapFilterIterator.html#reduceLeft[B>:A](op:(B,A)=>B):B", "kind" : "def"}, {"label" : "reduceOption", "tail" : "(op: (B, B) => B): Option[B]", "member" : "scala.collection.IterableOnceOps.reduceOption", "link" : "com\/github\/arturopala\/tree\/internal\/MapFilterIterator.html#reduceOption[B>:A](op:(B,B)=>B):Option[B]", "kind" : "def"}, {"label" : "reduce", "tail" : "(op: (B, B) => B): B", "member" : "scala.collection.IterableOnceOps.reduce", "link" : "com\/github\/arturopala\/tree\/internal\/MapFilterIterator.html#reduce[B>:A](op:(B,B)=>B):B", "kind" : "def"}, {"label" : "fold", "tail" : "(z: A1)(op: (A1, A1) => A1): A1", "member" : "scala.collection.IterableOnceOps.fold", "link" : "com\/github\/arturopala\/tree\/internal\/MapFilterIterator.html#fold[A1>:A](z:A1)(op:(A1,A1)=>A1):A1", "kind" : "def"}, {"label" : ":\\", "tail" : "(z: B)(op: (B, B) => B): B", "member" : "scala.collection.IterableOnceOps.:\\", "link" : "com\/github\/arturopala\/tree\/internal\/MapFilterIterator.html#:\\[B](z:B)(op:(A,B)=>B):B", "kind" : "final def"}, {"label" : "\/:", "tail" : "(z: B)(op: (B, B) => B): B", "member" : "scala.collection.IterableOnceOps.\/:", "link" : "com\/github\/arturopala\/tree\/internal\/MapFilterIterator.html#\/:[B](z:B)(op:(B,A)=>B):B", "kind" : "final def"}, {"label" : "foldRight", "tail" : "(z: B)(op: (B, B) => B): B", "member" : "scala.collection.IterableOnceOps.foldRight", "link" : "com\/github\/arturopala\/tree\/internal\/MapFilterIterator.html#foldRight[B](z:B)(op:(A,B)=>B):B", "kind" : "def"}, {"label" : "foldLeft", "tail" : "(z: B)(op: (B, B) => B): B", "member" : "scala.collection.IterableOnceOps.foldLeft", "link" : "com\/github\/arturopala\/tree\/internal\/MapFilterIterator.html#foldLeft[B](z:B)(op:(B,A)=>B):B", "kind" : "def"}, {"label" : "find", "tail" : "(p: (B) => Boolean): Option[B]", "member" : "scala.collection.IterableOnceOps.find", "link" : "com\/github\/arturopala\/tree\/internal\/MapFilterIterator.html#find(p:A=>Boolean):Option[A]", "kind" : "def"}, {"label" : "count", "tail" : "(p: (B) => Boolean): Int", "member" : "scala.collection.IterableOnceOps.count", "link" : "com\/github\/arturopala\/tree\/internal\/MapFilterIterator.html#count(p:A=>Boolean):Int", "kind" : "def"}, {"label" : "exists", "tail" : "(p: (B) => Boolean): Boolean", "member" : "scala.collection.IterableOnceOps.exists", "link" : "com\/github\/arturopala\/tree\/internal\/MapFilterIterator.html#exists(p:A=>Boolean):Boolean", "kind" : "def"}, {"label" : "forall", "tail" : "(p: (B) => Boolean): Boolean", "member" : "scala.collection.IterableOnceOps.forall", "link" : "com\/github\/arturopala\/tree\/internal\/MapFilterIterator.html#forall(p:A=>Boolean):Boolean", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (B) => U): Unit", "member" : "scala.collection.IterableOnceOps.foreach", "link" : "com\/github\/arturopala\/tree\/internal\/MapFilterIterator.html#foreach[U](f:A=>U):Unit", "kind" : "def"}, {"label" : "isTraversableAgain", "tail" : "(): Boolean", "member" : "scala.collection.IterableOnceOps.isTraversableAgain", "link" : "com\/github\/arturopala\/tree\/internal\/MapFilterIterator.html#isTraversableAgain:Boolean", "kind" : "def"}, {"label" : "splitAt", "tail" : "(n: Int): (Iterator[B], Iterator[B])", "member" : "scala.collection.IterableOnceOps.splitAt", "link" : "com\/github\/arturopala\/tree\/internal\/MapFilterIterator.html#splitAt(n:Int):(C,C)", "kind" : "def"}, {"label" : "knownSize", "tail" : "(): Int", "member" : "scala.collection.IterableOnce.knownSize", "link" : "com\/github\/arturopala\/tree\/internal\/MapFilterIterator.html#knownSize:Int", "kind" : "def"}, {"label" : "stepper", "tail" : "(shape: StepperShape[B, S]): S", "member" : "scala.collection.IterableOnce.stepper", "link" : "com\/github\/arturopala\/tree\/internal\/MapFilterIterator.html#stepper[S<:scala.collection.Stepper[_]](implicitshape:scala.collection.StepperShape[A,S]):S", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/arturopala\/tree\/internal\/MapFilterIterator.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/arturopala\/tree\/internal\/MapFilterIterator.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/arturopala\/tree\/internal\/MapFilterIterator.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/arturopala\/tree\/internal\/MapFilterIterator.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/arturopala\/tree\/internal\/MapFilterIterator.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/arturopala\/tree\/internal\/MapFilterIterator.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/arturopala\/tree\/internal\/MapFilterIterator.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/arturopala\/tree\/internal\/MapFilterIterator.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/arturopala\/tree\/internal\/MapFilterIterator.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/arturopala\/tree\/internal\/MapFilterIterator.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/arturopala\/tree\/internal\/MapFilterIterator.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/arturopala\/tree\/internal\/MapFilterIterator.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/arturopala\/tree\/internal\/MapFilterIterator.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/arturopala\/tree\/internal\/MapFilterIterator.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/arturopala\/tree\/internal\/MapFilterIterator.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/arturopala\/tree\/internal\/MapFilterIterator.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/arturopala\/tree\/internal\/MapFilterIterator.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/arturopala\/tree\/internal\/MapFilterIterator.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "com\/github\/arturopala\/tree\/internal\/MapFilterIterator.html", "kind" : "class"}, {"name" : "com.github.arturopala.tree.internal.NodeTree", "shortDescription" : "Collection of operations on the hierarchical, node-based, representation of the tree.", "object" : "com\/github\/arturopala\/tree\/internal\/NodeTree$.html", "members_object" : [{"label" : "removeTreeAt", "tail" : "(tree: Tree[T], pathIterator: Iterator[K], toPathItem: (T) => K): Tree[T]", "member" : "com.github.arturopala.tree.internal.NodeTree.removeTreeAt", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTree$.html#removeTreeAt[K,T](tree:com.github.arturopala.tree.Tree[T],pathIterator:Iterator[K],toPathItem:T=>K):com.github.arturopala.tree.Tree[T]", "kind" : "final def"}, {"label" : "removeTreeAt", "tail" : "(tree: Tree[T], pathIterator: Iterator[T1]): Tree[T]", "member" : "com.github.arturopala.tree.internal.NodeTree.removeTreeAt", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTree$.html#removeTreeAt[T,T1>:T](tree:com.github.arturopala.tree.Tree[T],pathIterator:Iterator[T1]):com.github.arturopala.tree.Tree[T]", "kind" : "final def"}, {"label" : "removeChild", "tail" : "(tree: Tree[T], value: T1): Tree[T]", "member" : "com.github.arturopala.tree.internal.NodeTree.removeChild", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTree$.html#removeChild[T,T1>:T](tree:com.github.arturopala.tree.Tree[T],value:T1):com.github.arturopala.tree.Tree[T]", "kind" : "final def"}, {"label" : "removeValueAt", "tail" : "(tree: Tree[T], pathIterator: Iterator[K], toPathItem: (T) => K, keepDistinct: Boolean): Tree[T]", "member" : "com.github.arturopala.tree.internal.NodeTree.removeValueAt", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTree$.html#removeValueAt[K,T](tree:com.github.arturopala.tree.Tree[T],pathIterator:Iterator[K],toPathItem:T=>K,keepDistinct:Boolean):com.github.arturopala.tree.Tree[T]", "kind" : "final def"}, {"label" : "removeValueAt", "tail" : "(tree: Tree[T], pathIterator: Iterator[T1], keepDistinct: Boolean): Tree[T]", "member" : "com.github.arturopala.tree.internal.NodeTree.removeValueAt", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTree$.html#removeValueAt[T,T1>:T](tree:com.github.arturopala.tree.Tree[T],pathIterator:Iterator[T1],keepDistinct:Boolean):com.github.arturopala.tree.Tree[T]", "kind" : "final def"}, {"label" : "removeChildValue", "tail" : "(tree: Tree[T], value: T1, keepDistinct: Boolean): Tree[T]", "member" : "com.github.arturopala.tree.internal.NodeTree.removeChildValue", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTree$.html#removeChildValue[T,T1>:T](tree:com.github.arturopala.tree.Tree[T],value:T1,keepDistinct:Boolean):com.github.arturopala.tree.Tree[T]", "kind" : "final def"}, {"label" : "removeChildValueFromSplit", "tail" : "(tree: Tree[T], treeSplit: Vector[TreeSplit[T]], child: Tree[T], keepDistinct: Boolean): Tree[T]", "member" : "com.github.arturopala.tree.internal.NodeTree.removeChildValueFromSplit", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTree$.html#removeChildValueFromSplit[T](tree:com.github.arturopala.tree.Tree[T],treeSplit:Vector[com.github.arturopala.tree.internal.NodeTree.TreeSplit[T]],child:com.github.arturopala.tree.Tree[T],keepDistinct:Boolean):com.github.arturopala.tree.Tree[T]", "kind" : "final def"}, {"label" : "modifyTreeAt", "tail" : "(tree: Tree[T], pathIterator: Iterator[K], toPathItem: (T) => K, modify: (Tree[T]) => Tree[T1], keepDistinct: Boolean)(arg0: ClassTag[T1]): Either[Tree[T], Tree[T1]]", "member" : "com.github.arturopala.tree.internal.NodeTree.modifyTreeAt", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTree$.html#modifyTreeAt[K,T,T1>:T](tree:com.github.arturopala.tree.Tree[T],pathIterator:Iterator[K],toPathItem:T=>K,modify:com.github.arturopala.tree.Tree[T]=>com.github.arturopala.tree.Tree[T1],keepDistinct:Boolean)(implicitevidence$27:scala.reflect.ClassTag[T1]):Either[com.github.arturopala.tree.Tree[T],com.github.arturopala.tree.Tree[T1]]", "kind" : "final def"}, {"label" : "modifyTreeAt", "tail" : "(tree: Tree[T], pathIterator: Iterator[T1], modify: (Tree[T]) => Tree[T1], keepDistinct: Boolean)(arg0: ClassTag[T1]): Either[Tree[T], Tree[T1]]", "member" : "com.github.arturopala.tree.internal.NodeTree.modifyTreeAt", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTree$.html#modifyTreeAt[T,T1>:T](tree:com.github.arturopala.tree.Tree[T],pathIterator:Iterator[T1],modify:com.github.arturopala.tree.Tree[T]=>com.github.arturopala.tree.Tree[T1],keepDistinct:Boolean)(implicitevidence$26:scala.reflect.ClassTag[T1]):Either[com.github.arturopala.tree.Tree[T],com.github.arturopala.tree.Tree[T1]]", "kind" : "final def"}, {"label" : "modifyChild", "tail" : "(tree: Tree[T], value: T1, modify: (Tree[T]) => Tree[T1], keepDistinct: Boolean)(arg0: ClassTag[T1]): Tree[T1]", "member" : "com.github.arturopala.tree.internal.NodeTree.modifyChild", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTree$.html#modifyChild[T,T1>:T](tree:com.github.arturopala.tree.Tree[T],value:T1,modify:com.github.arturopala.tree.Tree[T]=>com.github.arturopala.tree.Tree[T1],keepDistinct:Boolean)(implicitevidence$25:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T1]", "kind" : "final def"}, {"label" : "modifyValueAt", "tail" : "(tree: Tree[T], pathIterator: Iterator[K], toPathItem: (T) => K, modify: (T) => T1, keepDistinct: Boolean)(arg0: ClassTag[T1]): Either[Tree[T], Tree[T1]]", "member" : "com.github.arturopala.tree.internal.NodeTree.modifyValueAt", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTree$.html#modifyValueAt[K,T,T1>:T](tree:com.github.arturopala.tree.Tree[T],pathIterator:Iterator[K],toPathItem:T=>K,modify:T=>T1,keepDistinct:Boolean)(implicitevidence$24:scala.reflect.ClassTag[T1]):Either[com.github.arturopala.tree.Tree[T],com.github.arturopala.tree.Tree[T1]]", "kind" : "final def"}, {"label" : "modifyValueAt", "tail" : "(tree: Tree[T], pathIterator: Iterator[T1], modify: (T) => T1, keepDistinct: Boolean)(arg0: ClassTag[T1]): Either[Tree[T], Tree[T1]]", "member" : "com.github.arturopala.tree.internal.NodeTree.modifyValueAt", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTree$.html#modifyValueAt[T,T1>:T](tree:com.github.arturopala.tree.Tree[T],pathIterator:Iterator[T1],modify:T=>T1,keepDistinct:Boolean)(implicitevidence$23:scala.reflect.ClassTag[T1]):Either[com.github.arturopala.tree.Tree[T],com.github.arturopala.tree.Tree[T1]]", "kind" : "final def"}, {"label" : "modifyChildValue", "tail" : "(tree: Tree[T], value: T1, modify: (T) => T1, keepDistinct: Boolean)(arg0: ClassTag[T1]): Tree[T1]", "member" : "com.github.arturopala.tree.internal.NodeTree.modifyChildValue", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTree$.html#modifyChildValue[T,T1>:T](tree:com.github.arturopala.tree.Tree[T],value:T1,modify:T=>T1,keepDistinct:Boolean)(implicitevidence$22:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T1]", "kind" : "final def"}, {"label" : "updateTreeAt", "tail" : "(tree: Tree[T], pathIterator: Iterator[K], toPathItem: (T) => K, replacement: Tree[T1], keepDistinct: Boolean)(arg0: ClassTag[T1]): Either[Tree[T], Tree[T1]]", "member" : "com.github.arturopala.tree.internal.NodeTree.updateTreeAt", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTree$.html#updateTreeAt[K,T,T1>:T](tree:com.github.arturopala.tree.Tree[T],pathIterator:Iterator[K],toPathItem:T=>K,replacement:com.github.arturopala.tree.Tree[T1],keepDistinct:Boolean)(implicitevidence$21:scala.reflect.ClassTag[T1]):Either[com.github.arturopala.tree.Tree[T],com.github.arturopala.tree.Tree[T1]]", "kind" : "final def"}, {"label" : "updateTreeAt", "tail" : "(tree: Tree[T], pathIterator: Iterator[T1], replacement: Tree[T1], keepDistinct: Boolean)(arg0: ClassTag[T1]): Either[Tree[T], Tree[T1]]", "member" : "com.github.arturopala.tree.internal.NodeTree.updateTreeAt", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTree$.html#updateTreeAt[T,T1>:T](tree:com.github.arturopala.tree.Tree[T],pathIterator:Iterator[T1],replacement:com.github.arturopala.tree.Tree[T1],keepDistinct:Boolean)(implicitevidence$20:scala.reflect.ClassTag[T1]):Either[com.github.arturopala.tree.Tree[T],com.github.arturopala.tree.Tree[T1]]", "kind" : "final def"}, {"label" : "updateChild", "tail" : "(tree: Tree[T], value: T1, replacement: Tree[T1], keepDistinct: Boolean)(arg0: ClassTag[T1]): Tree[T1]", "member" : "com.github.arturopala.tree.internal.NodeTree.updateChild", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTree$.html#updateChild[T,T1>:T](tree:com.github.arturopala.tree.Tree[T],value:T1,replacement:com.github.arturopala.tree.Tree[T1],keepDistinct:Boolean)(implicitevidence$19:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T1]", "kind" : "final def"}, {"label" : "updateValueAt", "tail" : "(tree: Tree[T], pathIterator: Iterator[K], toPathItem: (T) => K, replacement: T1, keepDistinct: Boolean)(arg0: ClassTag[T1]): Either[Tree[T], Tree[T1]]", "member" : "com.github.arturopala.tree.internal.NodeTree.updateValueAt", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTree$.html#updateValueAt[K,T,T1>:T](tree:com.github.arturopala.tree.Tree[T],pathIterator:Iterator[K],toPathItem:T=>K,replacement:T1,keepDistinct:Boolean)(implicitevidence$18:scala.reflect.ClassTag[T1]):Either[com.github.arturopala.tree.Tree[T],com.github.arturopala.tree.Tree[T1]]", "kind" : "final def"}, {"label" : "updateValueAt", "tail" : "(tree: Tree[T], pathIterator: Iterator[T1], replacement: T1, keepDistinct: Boolean)(arg0: ClassTag[T1]): Either[Tree[T], Tree[T1]]", "member" : "com.github.arturopala.tree.internal.NodeTree.updateValueAt", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTree$.html#updateValueAt[T,T1>:T](tree:com.github.arturopala.tree.Tree[T],pathIterator:Iterator[T1],replacement:T1,keepDistinct:Boolean)(implicitevidence$17:scala.reflect.ClassTag[T1]):Either[com.github.arturopala.tree.Tree[T],com.github.arturopala.tree.Tree[T1]]", "kind" : "final def"}, {"label" : "updateChildValue", "tail" : "(tree: Tree[T], value: T1, replacement: T1, keepDistinct: Boolean)(arg0: ClassTag[T1]): Tree[T1]", "member" : "com.github.arturopala.tree.internal.NodeTree.updateChildValue", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTree$.html#updateChildValue[T,T1>:T](tree:com.github.arturopala.tree.Tree[T],value:T1,replacement:T1,keepDistinct:Boolean)(implicitevidence$16:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T1]", "kind" : "final def"}, {"label" : "updateChildInSplit", "tail" : "(treeSplit: Vector[TreeSplit[T]], child: Tree[T], replacement: Tree[T1], keepDistinct: Boolean)(arg0: ClassTag[T1]): Tree[T1]", "member" : "com.github.arturopala.tree.internal.NodeTree.updateChildInSplit", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTree$.html#updateChildInSplit[T,T1>:T](treeSplit:Vector[com.github.arturopala.tree.internal.NodeTree.TreeSplit[T]],child:com.github.arturopala.tree.Tree[T],replacement:com.github.arturopala.tree.Tree[T1],keepDistinct:Boolean)(implicitevidence$15:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T1]", "kind" : "final def"}, {"label" : "updateChildValueInSplit", "tail" : "(treeSplit: Vector[TreeSplit[T]], child: Tree[T], replacement: T1, keepDistinct: Boolean)(arg0: ClassTag[T1]): Tree[T1]", "member" : "com.github.arturopala.tree.internal.NodeTree.updateChildValueInSplit", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTree$.html#updateChildValueInSplit[T,T1>:T](treeSplit:Vector[com.github.arturopala.tree.internal.NodeTree.TreeSplit[T]],child:com.github.arturopala.tree.Tree[T],replacement:T1,keepDistinct:Boolean)(implicitevidence$14:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T1]", "kind" : "final def"}, {"label" : "join", "tail" : "(split: TreeSplit[T]): Tree[T]", "member" : "com.github.arturopala.tree.internal.NodeTree.join", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTree$.html#join[T](split:com.github.arturopala.tree.internal.NodeTree.TreeSplit[T]):com.github.arturopala.tree.Tree[T]", "kind" : "final def"}, {"label" : "splitSequenceWhen", "tail" : "(f: (T) => Boolean, iterable: Iterable[T], rightmost: Boolean): Option[(Vector[T], T, Vector[T])]", "member" : "com.github.arturopala.tree.internal.NodeTree.splitSequenceWhen", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTree$.html#splitSequenceWhen[T](f:T=>Boolean,iterable:Iterable[T],rightmost:Boolean):Option[(Vector[T],T,Vector[T])]", "kind" : "final def"}, {"label" : "splitTreeFollowingPath", "tail" : "(tree: Tree[T], pathIterator: Iterator[K], toPathItem: (T) => K, rightmost: Boolean): Option[(Vector[TreeSplit[T]], Option[K], Iterator[K], Tree[T])]", "member" : "com.github.arturopala.tree.internal.NodeTree.splitTreeFollowingPath", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTree$.html#splitTreeFollowingPath[T,K](tree:com.github.arturopala.tree.Tree[T],pathIterator:Iterator[K],toPathItem:T=>K,rightmost:Boolean):Option[(Vector[com.github.arturopala.tree.internal.NodeTree.TreeSplit[T]],Option[K],Iterator[K],com.github.arturopala.tree.Tree[T])]", "kind" : "final def"}, {"label" : "splitTreeFollowingEntirePath", "tail" : "(tree: Tree[T], pathIterator: Iterator[K], toPathItem: (T) => K, rightmost: Boolean): Option[(Vector[TreeSplit[T]], Tree[T])]", "member" : "com.github.arturopala.tree.internal.NodeTree.splitTreeFollowingEntirePath", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTree$.html#splitTreeFollowingEntirePath[T,K](tree:com.github.arturopala.tree.Tree[T],pathIterator:Iterator[K],toPathItem:T=>K,rightmost:Boolean):Option[(Vector[com.github.arturopala.tree.internal.NodeTree.TreeSplit[T]],com.github.arturopala.tree.Tree[T])]", "kind" : "final def"}, {"label" : "splitTreeFollowingPath", "tail" : "(tree: Tree[T], pathIterator: Iterator[T1], rightmost: Boolean): Option[(Vector[TreeSplit[T]], Option[T1], Iterator[T1], Tree[T])]", "member" : "com.github.arturopala.tree.internal.NodeTree.splitTreeFollowingPath", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTree$.html#splitTreeFollowingPath[T,T1>:T](tree:com.github.arturopala.tree.Tree[T],pathIterator:Iterator[T1],rightmost:Boolean):Option[(Vector[com.github.arturopala.tree.internal.NodeTree.TreeSplit[T]],Option[T1],Iterator[T1],com.github.arturopala.tree.Tree[T])]", "kind" : "final def"}, {"label" : "splitTreeFollowingEntirePath", "tail" : "(tree: Tree[T], pathIterator: Iterator[T1], rightmost: Boolean): Option[(Vector[TreeSplit[T]], Tree[T])]", "member" : "com.github.arturopala.tree.internal.NodeTree.splitTreeFollowingEntirePath", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTree$.html#splitTreeFollowingEntirePath[T,T1>:T](tree:com.github.arturopala.tree.Tree[T],pathIterator:Iterator[T1],rightmost:Boolean):Option[(Vector[com.github.arturopala.tree.internal.NodeTree.TreeSplit[T]],com.github.arturopala.tree.Tree[T])]", "kind" : "final def"}, {"label" : "insertChildrenAt", "tail" : "(tree: Tree[T], pathIterator: Iterator[K], toPathItem: (T) => K, children: Iterable[Tree[T1]], append: Boolean, keepDistinct: Boolean)(arg0: ClassTag[T1]): Either[Tree[T], Tree[T1]]", "member" : "com.github.arturopala.tree.internal.NodeTree.insertChildrenAt", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTree$.html#insertChildrenAt[T,T1>:T,K](tree:com.github.arturopala.tree.Tree[T],pathIterator:Iterator[K],toPathItem:T=>K,children:Iterable[com.github.arturopala.tree.Tree[T1]],append:Boolean,keepDistinct:Boolean)(implicitevidence$13:scala.reflect.ClassTag[T1]):Either[com.github.arturopala.tree.Tree[T],com.github.arturopala.tree.Tree[T1]]", "kind" : "final def"}, {"label" : "insertChildrenAt", "tail" : "(tree: Tree[T], pathIterator: Iterator[T1], children: Iterable[Tree[T1]], append: Boolean, keepDistinct: Boolean)(arg0: ClassTag[T1]): Option[Tree[T1]]", "member" : "com.github.arturopala.tree.internal.NodeTree.insertChildrenAt", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTree$.html#insertChildrenAt[T,T1>:T](tree:com.github.arturopala.tree.Tree[T],pathIterator:Iterator[T1],children:Iterable[com.github.arturopala.tree.Tree[T1]],append:Boolean,keepDistinct:Boolean)(implicitevidence$12:scala.reflect.ClassTag[T1]):Option[com.github.arturopala.tree.Tree[T1]]", "kind" : "final def"}, {"label" : "insertChildAt", "tail" : "(tree: Tree[T], pathIterator: Iterator[K], toPathItem: (T) => K, nodeToInsert: Tree[T1], append: Boolean, keepDistinct: Boolean)(arg0: ClassTag[T1]): Either[Tree[T], Tree[T1]]", "member" : "com.github.arturopala.tree.internal.NodeTree.insertChildAt", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTree$.html#insertChildAt[T,T1>:T,K](tree:com.github.arturopala.tree.Tree[T],pathIterator:Iterator[K],toPathItem:T=>K,nodeToInsert:com.github.arturopala.tree.Tree[T1],append:Boolean,keepDistinct:Boolean)(implicitevidence$11:scala.reflect.ClassTag[T1]):Either[com.github.arturopala.tree.Tree[T],com.github.arturopala.tree.Tree[T1]]", "kind" : "final def"}, {"label" : "insertChildAt", "tail" : "(tree: Tree[T], pathIterator: Iterator[T1], nodeToInsert: Tree[T1], append: Boolean, keepDistinct: Boolean)(arg0: ClassTag[T1]): Option[Tree[T1]]", "member" : "com.github.arturopala.tree.internal.NodeTree.insertChildAt", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTree$.html#insertChildAt[T,T1>:T](tree:com.github.arturopala.tree.Tree[T],pathIterator:Iterator[T1],nodeToInsert:com.github.arturopala.tree.Tree[T1],append:Boolean,keepDistinct:Boolean)(implicitevidence$10:scala.reflect.ClassTag[T1]):Option[com.github.arturopala.tree.Tree[T1]]", "kind" : "final def"}, {"label" : "buildTreeFromPartials", "tail" : "(queue: Vector[(Int, T, Seq[Tree[T1]])], result: Seq[Tree[T1]], prepend: Boolean): Seq[Tree[T1]]", "member" : "com.github.arturopala.tree.internal.NodeTree.buildTreeFromPartials", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTree$.html#buildTreeFromPartials[T,T1>:T](queue:Vector[(Int,T,Seq[com.github.arturopala.tree.Tree[T1]])],result:Seq[com.github.arturopala.tree.Tree[T1]],prepend:Boolean):Seq[com.github.arturopala.tree.Tree[T1]]", "kind" : "final def"}, {"label" : "makeTreeDistinct", "tail" : "(tree: Tree[T], maxLookupLevel: Int): Tree[T]", "member" : "com.github.arturopala.tree.internal.NodeTree.makeTreeDistinct", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTree$.html#makeTreeDistinct[T](tree:com.github.arturopala.tree.Tree[T],maxLookupLevel:Int):com.github.arturopala.tree.Tree[T]", "kind" : "final def"}, {"label" : "insertDistinctBetweenSiblings", "tail" : "(leftSiblings: Iterable[Tree[T]], child: Tree[T], rightSiblings: Iterable[Tree[T]], preserveExisting: Boolean): (Iterable[Tree[T]], Iterable[Tree[T]])", "member" : "com.github.arturopala.tree.internal.NodeTree.insertDistinctBetweenSiblings", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTree$.html#insertDistinctBetweenSiblings[T](leftSiblings:Iterable[com.github.arturopala.tree.Tree[T]],child:com.github.arturopala.tree.Tree[T],rightSiblings:Iterable[com.github.arturopala.tree.Tree[T]],preserveExisting:Boolean):(Iterable[com.github.arturopala.tree.Tree[T]],Iterable[com.github.arturopala.tree.Tree[T]])", "kind" : "final def"}, {"label" : "insertChildDistinct", "tail" : "(head: T, leftSiblings: Seq[Tree[T]], child: Tree[T], rightSiblings: Seq[Tree[T]], preserveExisting: Boolean): Tree[T]", "member" : "com.github.arturopala.tree.internal.NodeTree.insertChildDistinct", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTree$.html#insertChildDistinct[T](head:T,leftSiblings:Seq[com.github.arturopala.tree.Tree[T]],child:com.github.arturopala.tree.Tree[T],rightSiblings:Seq[com.github.arturopala.tree.Tree[T]],preserveExisting:Boolean):com.github.arturopala.tree.Tree[T]", "kind" : "final def"}, {"label" : "insertChildrenDistinct", "tail" : "(head: T, leftSiblings: Iterable[Tree[T]], newChildren: Iterable[Tree[T]], rightSiblings: Iterable[Tree[T]], preserveExisting: Boolean): Tree[T]", "member" : "com.github.arturopala.tree.internal.NodeTree.insertChildrenDistinct", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTree$.html#insertChildrenDistinct[T](head:T,leftSiblings:Iterable[com.github.arturopala.tree.Tree[T]],newChildren:Iterable[com.github.arturopala.tree.Tree[T]],rightSiblings:Iterable[com.github.arturopala.tree.Tree[T]],preserveExisting:Boolean):com.github.arturopala.tree.Tree[T]", "kind" : "final def"}, {"label" : "ensureChildDistinct", "tail" : "(tree: Tree[T], index: Int, preserveExisting: Boolean): Tree[T]", "member" : "com.github.arturopala.tree.internal.NodeTree.ensureChildDistinct", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTree$.html#ensureChildDistinct[T](tree:com.github.arturopala.tree.Tree[T],index:Int,preserveExisting:Boolean):com.github.arturopala.tree.Tree[T]", "kind" : "final def"}, {"label" : "insertChildDistinct", "tail" : "(tree: Tree[T], newChild: Tree[T1], append: Boolean): Tree[T1]", "member" : "com.github.arturopala.tree.internal.NodeTree.insertChildDistinct", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTree$.html#insertChildDistinct[T,T1>:T](tree:com.github.arturopala.tree.Tree[T],newChild:com.github.arturopala.tree.Tree[T1],append:Boolean):com.github.arturopala.tree.Tree[T1]", "kind" : "final def"}, {"label" : "mkStringUsingBranches", "tail" : "(node: Tree[T], show: (T) => String, valueSeparator: String, branchSeparator: String, branchStart: String, branchEnd: String, maxDepth: Int): StringBuilder", "member" : "com.github.arturopala.tree.internal.NodeTree.mkStringUsingBranches", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTree$.html#mkStringUsingBranches[T](node:com.github.arturopala.tree.Tree[T],show:T=>String,valueSeparator:String,branchSeparator:String,branchStart:String,branchEnd:String,maxDepth:Int):StringBuilder", "kind" : "final def"}, {"label" : "listFlatMap", "tail" : "(f: (T) => Tree[K], result: Vector[(Int, Tree[K])], queue: Vector[Tree[T]]): Vector[(Int, Tree[K])]", "member" : "com.github.arturopala.tree.internal.NodeTree.listFlatMap", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTree$.html#listFlatMap[T,K](f:T=>com.github.arturopala.tree.Tree[K],result:Vector[(Int,com.github.arturopala.tree.Tree[K])],queue:Vector[com.github.arturopala.tree.Tree[T]]):Vector[(Int,com.github.arturopala.tree.Tree[K])]", "kind" : "final def"}, {"label" : "arrayMap", "tail" : "(f: (T) => K, node: Tree[T])(tag: ClassTag[K]): (Array[Int], Array[K])", "member" : "com.github.arturopala.tree.internal.NodeTree.arrayMap", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTree$.html#arrayMap[T,K](f:T=>K,node:com.github.arturopala.tree.Tree[T])(implicittag:scala.reflect.ClassTag[K]):(Array[Int],Array[K])", "kind" : "final def"}, {"label" : "listMap", "tail" : "(f: (T) => K, node: Tree[T]): Vector[(Int, K)]", "member" : "com.github.arturopala.tree.internal.NodeTree.listMap", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTree$.html#listMap[T,K](f:T=>K,node:com.github.arturopala.tree.Tree[T]):Vector[(Int,K)]", "kind" : "final def"}, {"label" : "toTreeList", "tail" : "(result: Vector[(Int, Tree[T])], queue: Vector[Tree[T]]): Vector[(Int, Tree[T])]", "member" : "com.github.arturopala.tree.internal.NodeTree.toTreeList", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTree$.html#toTreeList[T](result:Vector[(Int,com.github.arturopala.tree.Tree[T])],queue:Vector[com.github.arturopala.tree.Tree[T]]):Vector[(Int,com.github.arturopala.tree.Tree[T])]", "kind" : "final def"}, {"label" : "toStructureArray", "tail" : "(node: Tree[T]): Array[Int]", "member" : "com.github.arturopala.tree.internal.NodeTree.toStructureArray", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTree$.html#toStructureArray[T](node:com.github.arturopala.tree.Tree[T]):Array[Int]", "kind" : "final def"}, {"label" : "toArrays", "tail" : "(node: Tree[T])(arg0: ClassTag[T]): (Array[Int], Array[T])", "member" : "com.github.arturopala.tree.internal.NodeTree.toArrays", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTree$.html#toArrays[T](node:com.github.arturopala.tree.Tree[T])(implicitevidence$8:scala.reflect.ClassTag[T]):(Array[Int],Array[T])", "kind" : "final def"}, {"label" : "toBuffers", "tail" : "(node: Tree[T])(arg0: ClassTag[T]): (IntBuffer, Buffer[T])", "member" : "com.github.arturopala.tree.internal.NodeTree.toBuffers", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTree$.html#toBuffers[T](node:com.github.arturopala.tree.Tree[T])(implicitevidence$7:scala.reflect.ClassTag[T]):(com.github.arturopala.bufferandslice.IntBuffer,com.github.arturopala.bufferandslice.Buffer[T])", "kind" : "final def"}, {"label" : "toSlices", "tail" : "(node: Tree[T])(arg0: ClassTag[T]): (IntSlice, Slice[T])", "member" : "com.github.arturopala.tree.internal.NodeTree.toSlices", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTree$.html#toSlices[T](node:com.github.arturopala.tree.Tree[T])(implicitevidence$6:scala.reflect.ClassTag[T]):(com.github.arturopala.bufferandslice.IntSlice,com.github.arturopala.bufferandslice.Slice[T])", "kind" : "final def"}, {"label" : "toPairsList", "tail" : "(node: Tree[T]): Seq[(Int, T)]", "member" : "com.github.arturopala.tree.internal.NodeTree.toPairsList", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTree$.html#toPairsList[T](node:com.github.arturopala.tree.Tree[T]):Seq[(Int,T)]", "kind" : "final def"}, {"label" : "insertBranch", "tail" : "(tree: Tree[T], branchIterator: Iterator[T1], append: Boolean)(arg0: ClassTag[T1]): Option[Tree[T1]]", "member" : "com.github.arturopala.tree.internal.NodeTree.insertBranch", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTree$.html#insertBranch[T,T1>:T](tree:com.github.arturopala.tree.Tree[T],branchIterator:Iterator[T1],append:Boolean)(implicitevidence$5:scala.reflect.ClassTag[T1]):Option[com.github.arturopala.tree.Tree[T1]]", "kind" : "final def"}, {"label" : "insertBranchUnsafe", "tail" : "(tree: Tree[T], branchIterator: Iterator[T1])(arg0: ClassTag[T1]): Option[Tree[T1]]", "member" : "com.github.arturopala.tree.internal.NodeTree.insertBranchUnsafe", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTree$.html#insertBranchUnsafe[T,T1>:T](tree:com.github.arturopala.tree.Tree[T],branchIterator:Iterator[T1])(implicitevidence$3:scala.reflect.ClassTag[T1]):Option[com.github.arturopala.tree.Tree[T1]]", "kind" : "final def"}, {"label" : "appendChild", "tail" : "(tree: Tree[T], child: Tree[T1])(arg0: ClassTag[T1]): Tree[T1]", "member" : "com.github.arturopala.tree.internal.NodeTree.appendChild", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTree$.html#appendChild[T,T1>:T](tree:com.github.arturopala.tree.Tree[T],child:com.github.arturopala.tree.Tree[T1])(implicitevidence$2:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T1]", "kind" : "final def"}, {"label" : "prependChild", "tail" : "(tree: Tree[T], child: Tree[T1])(arg0: ClassTag[T1]): Tree[T1]", "member" : "com.github.arturopala.tree.internal.NodeTree.prependChild", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTree$.html#prependChild[T,T1>:T](tree:com.github.arturopala.tree.Tree[T],child:com.github.arturopala.tree.Tree[T1])(implicitevidence$1:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T1]", "kind" : "final def"}, {"label" : "contains", "tail" : "(node: Tree[T], path: Iterable[K], requiresFullMatch: Boolean, toPathItem: (T) => K): Boolean", "member" : "com.github.arturopala.tree.internal.NodeTree.contains", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTree$.html#contains[T,K](node:com.github.arturopala.tree.Tree[T],path:Iterable[K],requiresFullMatch:Boolean,toPathItem:T=>K):Boolean", "kind" : "final def"}, {"label" : "contains", "tail" : "(node: Tree[T], path: Iterable[T1], requiresFullMatch: Boolean): Boolean", "member" : "com.github.arturopala.tree.internal.NodeTree.contains", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTree$.html#contains[T,T1>:T](node:com.github.arturopala.tree.Tree[T],path:Iterable[T1],requiresFullMatch:Boolean):Boolean", "kind" : "final def"}, {"label" : "containsPath", "tail" : "(node: Tree[T], path: Iterable[K], toPathItem: (T) => K): Boolean", "member" : "com.github.arturopala.tree.internal.NodeTree.containsPath", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTree$.html#containsPath[T,K](node:com.github.arturopala.tree.Tree[T],path:Iterable[K],toPathItem:T=>K):Boolean", "kind" : "final def"}, {"label" : "containsPath", "tail" : "(node: Tree[T], path: Iterable[T1]): Boolean", "member" : "com.github.arturopala.tree.internal.NodeTree.containsPath", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTree$.html#containsPath[T,T1>:T](node:com.github.arturopala.tree.Tree[T],path:Iterable[T1]):Boolean", "kind" : "final def"}, {"label" : "containsBranch", "tail" : "(node: Tree[T], branch: Iterable[K], toPathItem: (T) => K): Boolean", "member" : "com.github.arturopala.tree.internal.NodeTree.containsBranch", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTree$.html#containsBranch[T,K](node:com.github.arturopala.tree.Tree[T],branch:Iterable[K],toPathItem:T=>K):Boolean", "kind" : "final def"}, {"label" : "containsBranch", "tail" : "(node: Tree[T], branch: Iterable[T1]): Boolean", "member" : "com.github.arturopala.tree.internal.NodeTree.containsBranch", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTree$.html#containsBranch[T,T1>:T](node:com.github.arturopala.tree.Tree[T],branch:Iterable[T1]):Boolean", "kind" : "final def"}, {"label" : "select", "tail" : "(node: Tree[T], path: Iterable[K], toResult: (Tree[T]) => R, toPathItem: (T) => K, rightmost: Boolean): Option[R]", "member" : "com.github.arturopala.tree.internal.NodeTree.select", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTree$.html#select[T,K,R](node:com.github.arturopala.tree.Tree[T],path:Iterable[K],toResult:com.github.arturopala.tree.Tree[T]=>R,toPathItem:T=>K,rightmost:Boolean):Option[R]", "kind" : "final def"}, {"label" : "select", "tail" : "(node: Tree[T], path: Iterable[T1], result: (Tree[T]) => R, rightmost: Boolean): Option[R]", "member" : "com.github.arturopala.tree.internal.NodeTree.select", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTree$.html#select[T,T1>:T,R](node:com.github.arturopala.tree.Tree[T],path:Iterable[T1],result:com.github.arturopala.tree.Tree[T]=>R,rightmost:Boolean):Option[R]", "kind" : "final def"}, {"label" : "countBranches", "tail" : "(pred: (Iterable[T]) => Boolean, node: Tree[T]): Int", "member" : "com.github.arturopala.tree.internal.NodeTree.countBranches", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTree$.html#countBranches[T](pred:Iterable[T]=>Boolean,node:com.github.arturopala.tree.Tree[T]):Int", "kind" : "final def"}, {"label" : "branches", "tail" : "(pred: (Iterable[T]) => Boolean, node: Tree[T]): Iterable[Iterable[T]]", "member" : "com.github.arturopala.tree.internal.NodeTree.branches", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTree$.html#branches[T](pred:Iterable[T]=>Boolean,node:com.github.arturopala.tree.Tree[T]):Iterable[Iterable[T]]", "kind" : "final def"}, {"label" : "branchesIteratorWithLimit", "tail" : "(pred: (Iterable[T]) => Boolean, node: Tree[T], maxDepth: Int): Iterator[Iterable[T]]", "member" : "com.github.arturopala.tree.internal.NodeTree.branchesIteratorWithLimit", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTree$.html#branchesIteratorWithLimit[T](pred:Iterable[T]=>Boolean,node:com.github.arturopala.tree.Tree[T],maxDepth:Int):Iterator[Iterable[T]]", "kind" : "final def"}, {"label" : "branchesIteratorWithFilter", "tail" : "(pred: (Iterable[T]) => Boolean, node: Tree[T]): Iterator[Iterable[T]]", "member" : "com.github.arturopala.tree.internal.NodeTree.branchesIteratorWithFilter", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTree$.html#branchesIteratorWithFilter[T](pred:Iterable[T]=>Boolean,node:com.github.arturopala.tree.Tree[T]):Iterator[Iterable[T]]", "kind" : "final def"}, {"label" : "branchesIterator", "tail" : "(node: Tree[T]): Iterator[Iterable[T]]", "member" : "com.github.arturopala.tree.internal.NodeTree.branchesIterator", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTree$.html#branchesIterator[T](node:com.github.arturopala.tree.Tree[T]):Iterator[Iterable[T]]", "kind" : "final def"}, {"label" : "pathsIterator", "tail" : "(node: Tree[T]): Iterator[Iterable[T]]", "member" : "com.github.arturopala.tree.internal.NodeTree.pathsIterator", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTree$.html#pathsIterator[T](node:com.github.arturopala.tree.Tree[T]):Iterator[Iterable[T]]", "kind" : "final def"}, {"label" : "trees", "tail" : "(pred: (Tree[T]) => Boolean, node: Tree[T]): Vector[Tree[T]]", "member" : "com.github.arturopala.tree.internal.NodeTree.trees", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTree$.html#trees[T](pred:com.github.arturopala.tree.Tree[T]=>Boolean,node:com.github.arturopala.tree.Tree[T]):Vector[com.github.arturopala.tree.Tree[T]]", "kind" : "final def"}, {"label" : "treesIteratorWithLimit", "tail" : "(pred: (Tree[T]) => Boolean, node: Tree[T], maxDepth: Int, depthFirst: Boolean): Iterator[Tree[T]]", "member" : "com.github.arturopala.tree.internal.NodeTree.treesIteratorWithLimit", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTree$.html#treesIteratorWithLimit[T](pred:com.github.arturopala.tree.Tree[T]=>Boolean,node:com.github.arturopala.tree.Tree[T],maxDepth:Int,depthFirst:Boolean):Iterator[com.github.arturopala.tree.Tree[T]]", "kind" : "final def"}, {"label" : "treesAndLevelsIteratorWithFilter", "tail" : "(pred: (Tree[T]) => Boolean, node: Tree[T], maxDepth: Int, depthFirst: Boolean): Iterator[(Int, Tree[T])]", "member" : "com.github.arturopala.tree.internal.NodeTree.treesAndLevelsIteratorWithFilter", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTree$.html#treesAndLevelsIteratorWithFilter[T](pred:com.github.arturopala.tree.Tree[T]=>Boolean,node:com.github.arturopala.tree.Tree[T],maxDepth:Int,depthFirst:Boolean):Iterator[(Int,com.github.arturopala.tree.Tree[T])]", "kind" : "final def"}, {"label" : "treesAndLevelsIterator", "tail" : "(node: Tree[T], maxDepth: Int, depthFirst: Boolean): Iterator[(Int, Tree[T])]", "member" : "com.github.arturopala.tree.internal.NodeTree.treesAndLevelsIterator", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTree$.html#treesAndLevelsIterator[T](node:com.github.arturopala.tree.Tree[T],maxDepth:Int,depthFirst:Boolean):Iterator[(Int,com.github.arturopala.tree.Tree[T])]", "kind" : "final def"}, {"label" : "treesIteratorWithFilter", "tail" : "(pred: (Tree[T]) => Boolean, node: Tree[T], depthFirst: Boolean): Iterator[Tree[T]]", "member" : "com.github.arturopala.tree.internal.NodeTree.treesIteratorWithFilter", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTree$.html#treesIteratorWithFilter[T](pred:com.github.arturopala.tree.Tree[T]=>Boolean,node:com.github.arturopala.tree.Tree[T],depthFirst:Boolean):Iterator[com.github.arturopala.tree.Tree[T]]", "kind" : "final def"}, {"label" : "treesIterator", "tail" : "(node: Tree[T], depthFirst: Boolean): Iterator[Tree[T]]", "member" : "com.github.arturopala.tree.internal.NodeTree.treesIterator", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTree$.html#treesIterator[T](node:com.github.arturopala.tree.Tree[T],depthFirst:Boolean):Iterator[com.github.arturopala.tree.Tree[T]]", "kind" : "final def"}, {"label" : "values", "tail" : "(pred: (T) => Boolean, node: Tree[T]): Vector[T]", "member" : "com.github.arturopala.tree.internal.NodeTree.values", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTree$.html#values[T](pred:T=>Boolean,node:com.github.arturopala.tree.Tree[T]):Vector[T]", "kind" : "final def"}, {"label" : "valuesIteratorWithLimit", "tail" : "(pred: (T) => Boolean, node: Tree[T], maxDepth: Int, depthFirst: Boolean): Iterator[T]", "member" : "com.github.arturopala.tree.internal.NodeTree.valuesIteratorWithLimit", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTree$.html#valuesIteratorWithLimit[T](pred:T=>Boolean,node:com.github.arturopala.tree.Tree[T],maxDepth:Int,depthFirst:Boolean):Iterator[T]", "kind" : "final def"}, {"label" : "valuesAndLevelsIteratorWithFilter", "tail" : "(pred: (T) => Boolean, node: Tree[T], maxDepth: Int, depthFirst: Boolean): Iterator[(Int, T, Boolean)]", "member" : "com.github.arturopala.tree.internal.NodeTree.valuesAndLevelsIteratorWithFilter", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTree$.html#valuesAndLevelsIteratorWithFilter[T](pred:T=>Boolean,node:com.github.arturopala.tree.Tree[T],maxDepth:Int,depthFirst:Boolean):Iterator[(Int,T,Boolean)]", "kind" : "final def"}, {"label" : "valuesAndLevelsIterator", "tail" : "(node: Tree[T], maxDepth: Int, depthFirst: Boolean): Iterator[(Int, T, Boolean)]", "member" : "com.github.arturopala.tree.internal.NodeTree.valuesAndLevelsIterator", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTree$.html#valuesAndLevelsIterator[T](node:com.github.arturopala.tree.Tree[T],maxDepth:Int,depthFirst:Boolean):Iterator[(Int,T,Boolean)]", "kind" : "final def"}, {"label" : "valuesIteratorWithFilter", "tail" : "(pred: (T) => Boolean, node: Tree[T], depthFirst: Boolean): Iterator[T]", "member" : "com.github.arturopala.tree.internal.NodeTree.valuesIteratorWithFilter", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTree$.html#valuesIteratorWithFilter[T](pred:T=>Boolean,node:com.github.arturopala.tree.Tree[T],depthFirst:Boolean):Iterator[T]", "kind" : "final def"}, {"label" : "valuesIterator", "tail" : "(node: Tree[T], depthFirst: Boolean): Iterator[T]", "member" : "com.github.arturopala.tree.internal.NodeTree.valuesIterator", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTree$.html#valuesIterator[T](node:com.github.arturopala.tree.Tree[T],depthFirst:Boolean):Iterator[T]", "kind" : "final def"}, {"label" : "leavesIterator", "tail" : "(node: Tree[T]): Iterator[T]", "member" : "com.github.arturopala.tree.internal.NodeTree.leavesIterator", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTree$.html#leavesIterator[T](node:com.github.arturopala.tree.Tree[T]):Iterator[T]", "kind" : "final def"}, {"label" : "TreeSplit", "tail" : "", "member" : "com.github.arturopala.tree.internal.NodeTree.TreeSplit", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTree$.html#TreeSplit[T]=(Seq[com.github.arturopala.tree.Tree[T]],T,Seq[com.github.arturopala.tree.Tree[T]])", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTree$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTree$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTree$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTree$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTree$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTree$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTree$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTree$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTree$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTree$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTree$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTree$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTree$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTree$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTree$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTree$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTree$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTree$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTree$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.github.arturopala.tree.internal.NodeTreeLike", "trait" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html", "kind" : "trait", "members_trait" : [{"label" : "deflated", "tail" : "(tag: ClassTag[T1]): ArrayTree[T1]", "member" : "com.github.arturopala.tree.internal.NodeTreeLike.deflated", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html#deflated[T1>:T](implicittag:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree.ArrayTree[T1]", "kind" : "final def"}, {"label" : "inflated", "tail" : "(): Tree[T]", "member" : "com.github.arturopala.tree.internal.NodeTreeLike.inflated", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html#inflated:com.github.arturopala.tree.Tree[T]", "kind" : "final def"}, {"label" : "mkStringFromBranches", "tail" : "(show: (T) => String, valueSeparator: String, branchSeparator: String, branchStart: String, branchEnd: String, maxDepth: Int): String", "member" : "com.github.arturopala.tree.internal.NodeTreeLike.mkStringFromBranches", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html#mkStringFromBranches(show:T=>String,valueSeparator:String,branchSeparator:String,branchStart:String,branchEnd:String,maxDepth:Int):String", "kind" : "final def"}, {"label" : "toStructureArray", "tail" : "(): Array[Int]", "member" : "com.github.arturopala.tree.internal.NodeTreeLike.toStructureArray", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html#toStructureArray:Array[Int]", "kind" : "final def"}, {"label" : "toBuffers", "tail" : "(arg0: ClassTag[T1]): (IntBuffer, Buffer[T1])", "member" : "com.github.arturopala.tree.internal.NodeTreeLike.toBuffers", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html#toBuffers[T1>:T](implicitevidence$38:scala.reflect.ClassTag[T1]):(com.github.arturopala.bufferandslice.IntBuffer,com.github.arturopala.bufferandslice.Buffer[T1])", "kind" : "final def"}, {"label" : "toSlices", "tail" : "(arg0: ClassTag[T1]): (IntSlice, Slice[T1])", "member" : "com.github.arturopala.tree.internal.NodeTreeLike.toSlices", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html#toSlices[T1>:T](implicitevidence$37:scala.reflect.ClassTag[T1]):(com.github.arturopala.bufferandslice.IntSlice,com.github.arturopala.bufferandslice.Slice[T1])", "kind" : "final def"}, {"label" : "toArrays", "tail" : "(arg0: ClassTag[T1]): (Array[Int], Array[T1])", "member" : "com.github.arturopala.tree.internal.NodeTreeLike.toArrays", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html#toArrays[T1>:T](implicitevidence$36:scala.reflect.ClassTag[T1]):(Array[Int],Array[T1])", "kind" : "final def"}, {"label" : "toPairsIterator", "tail" : "(): Iterator[(Int, T)]", "member" : "com.github.arturopala.tree.internal.NodeTreeLike.toPairsIterator", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html#toPairsIterator:Iterator[(Int,T)]", "kind" : "final def"}, {"label" : "mapUnsafe", "tail" : "(f: (T) => K)(arg0: ClassTag[K]): Tree[K]", "member" : "com.github.arturopala.tree.internal.NodeTreeLike.mapUnsafe", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html#mapUnsafe[K](f:T=>K)(implicitevidence$35:scala.reflect.ClassTag[K]):com.github.arturopala.tree.Tree[K]", "kind" : "final def"}, {"label" : "map", "tail" : "(f: (T) => K)(arg0: ClassTag[K]): Tree[K]", "member" : "com.github.arturopala.tree.internal.NodeTreeLike.map", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html#map[K](f:T=>K)(implicitevidence$34:scala.reflect.ClassTag[K]):com.github.arturopala.tree.Tree[K]", "kind" : "final def"}, {"label" : "removeTreeAt", "tail" : "(path: Iterable[K], toPathItem: (T) => K)(arg0: ClassTag[T1]): Tree[T]", "member" : "com.github.arturopala.tree.internal.NodeTreeLike.removeTreeAt", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html#removeTreeAt[K,T1>:T](path:Iterable[K],toPathItem:T=>K)(implicitevidence$33:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T]", "kind" : "final def"}, {"label" : "removeTreeAt", "tail" : "(path: Iterable[T1])(arg0: ClassTag[T1]): Tree[T]", "member" : "com.github.arturopala.tree.internal.NodeTreeLike.removeTreeAt", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html#removeTreeAt[T1>:T](path:Iterable[T1])(implicitevidence$32:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T]", "kind" : "final def"}, {"label" : "removeChild", "tail" : "(value: T1)(arg0: ClassTag[T1]): Tree[T]", "member" : "com.github.arturopala.tree.internal.NodeTreeLike.removeChild", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html#removeChild[T1>:T](value:T1)(implicitevidence$31:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T]", "kind" : "final def"}, {"label" : "removeValueAt", "tail" : "(path: Iterable[K], toPathItem: (T) => K)(arg0: ClassTag[T1]): Tree[T]", "member" : "com.github.arturopala.tree.internal.NodeTreeLike.removeValueAt", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html#removeValueAt[K,T1>:T](path:Iterable[K],toPathItem:T=>K)(implicitevidence$30:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T]", "kind" : "final def"}, {"label" : "removeValueAt", "tail" : "(path: Iterable[T1])(arg0: ClassTag[T1]): Tree[T]", "member" : "com.github.arturopala.tree.internal.NodeTreeLike.removeValueAt", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html#removeValueAt[T1>:T](path:Iterable[T1])(implicitevidence$29:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T]", "kind" : "final def"}, {"label" : "removeChildValue", "tail" : "(value: T1)(arg0: ClassTag[T1]): Tree[T]", "member" : "com.github.arturopala.tree.internal.NodeTreeLike.removeChildValue", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html#removeChildValue[T1>:T](value:T1)(implicitevidence$28:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T]", "kind" : "final def"}, {"label" : "modifyTreeAt", "tail" : "(path: Iterable[K], modify: (Tree[T]) => Tree[T1], toPathItem: (T) => K)(arg0: ClassTag[T1]): Either[Tree[T], Tree[T1]]", "member" : "com.github.arturopala.tree.internal.NodeTreeLike.modifyTreeAt", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html#modifyTreeAt[K,T1>:T](path:Iterable[K],modify:com.github.arturopala.tree.Tree[T]=>com.github.arturopala.tree.Tree[T1],toPathItem:T=>K)(implicitevidence$27:scala.reflect.ClassTag[T1]):Either[com.github.arturopala.tree.Tree[T],com.github.arturopala.tree.Tree[T1]]", "kind" : "final def"}, {"label" : "modifyTreeAt", "tail" : "(path: Iterable[T1], modify: (Tree[T]) => Tree[T1])(arg0: ClassTag[T1]): Either[Tree[T], Tree[T1]]", "member" : "com.github.arturopala.tree.internal.NodeTreeLike.modifyTreeAt", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html#modifyTreeAt[T1>:T](path:Iterable[T1],modify:com.github.arturopala.tree.Tree[T]=>com.github.arturopala.tree.Tree[T1])(implicitevidence$26:scala.reflect.ClassTag[T1]):Either[com.github.arturopala.tree.Tree[T],com.github.arturopala.tree.Tree[T1]]", "kind" : "final def"}, {"label" : "modifyChild", "tail" : "(value: T1, modify: (Tree[T]) => Tree[T1])(arg0: ClassTag[T1]): Tree[T1]", "member" : "com.github.arturopala.tree.internal.NodeTreeLike.modifyChild", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html#modifyChild[T1>:T](value:T1,modify:com.github.arturopala.tree.Tree[T]=>com.github.arturopala.tree.Tree[T1])(implicitevidence$25:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T1]", "kind" : "final def"}, {"label" : "modifyValueAt", "tail" : "(path: Iterable[K], modify: (T) => T1, toPathItem: (T) => K)(arg0: ClassTag[T1]): Either[Tree[T], Tree[T1]]", "member" : "com.github.arturopala.tree.internal.NodeTreeLike.modifyValueAt", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html#modifyValueAt[K,T1>:T](path:Iterable[K],modify:T=>T1,toPathItem:T=>K)(implicitevidence$24:scala.reflect.ClassTag[T1]):Either[com.github.arturopala.tree.Tree[T],com.github.arturopala.tree.Tree[T1]]", "kind" : "final def"}, {"label" : "modifyValueAt", "tail" : "(path: Iterable[T1], modify: (T) => T1)(arg0: ClassTag[T1]): Either[Tree[T], Tree[T1]]", "member" : "com.github.arturopala.tree.internal.NodeTreeLike.modifyValueAt", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html#modifyValueAt[T1>:T](path:Iterable[T1],modify:T=>T1)(implicitevidence$23:scala.reflect.ClassTag[T1]):Either[com.github.arturopala.tree.Tree[T],com.github.arturopala.tree.Tree[T1]]", "kind" : "final def"}, {"label" : "modifyChildValue", "tail" : "(value: T1, modify: (T) => T1)(arg0: ClassTag[T1]): Tree[T1]", "member" : "com.github.arturopala.tree.internal.NodeTreeLike.modifyChildValue", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html#modifyChildValue[T1>:T](value:T1,modify:T=>T1)(implicitevidence$22:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T1]", "kind" : "final def"}, {"label" : "modifyHead", "tail" : "(modify: (T) => T1)(arg0: ClassTag[T1]): Tree[T1]", "member" : "com.github.arturopala.tree.internal.NodeTreeLike.modifyHead", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html#modifyHead[T1>:T](modify:T=>T1)(implicitevidence$21:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T1]", "kind" : "final def"}, {"label" : "updateTreeAt", "tail" : "(path: Iterable[K], replacement: Tree[T1], toPathItem: (T) => K)(arg0: ClassTag[T1]): Either[Tree[T], Tree[T1]]", "member" : "com.github.arturopala.tree.internal.NodeTreeLike.updateTreeAt", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html#updateTreeAt[K,T1>:T](path:Iterable[K],replacement:com.github.arturopala.tree.Tree[T1],toPathItem:T=>K)(implicitevidence$20:scala.reflect.ClassTag[T1]):Either[com.github.arturopala.tree.Tree[T],com.github.arturopala.tree.Tree[T1]]", "kind" : "final def"}, {"label" : "updateTreeAt", "tail" : "(path: Iterable[T1], replacement: Tree[T1])(arg0: ClassTag[T1]): Either[Tree[T], Tree[T1]]", "member" : "com.github.arturopala.tree.internal.NodeTreeLike.updateTreeAt", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html#updateTreeAt[T1>:T](path:Iterable[T1],replacement:com.github.arturopala.tree.Tree[T1])(implicitevidence$19:scala.reflect.ClassTag[T1]):Either[com.github.arturopala.tree.Tree[T],com.github.arturopala.tree.Tree[T1]]", "kind" : "final def"}, {"label" : "updateChild", "tail" : "(value: T1, replacement: Tree[T1])(arg0: ClassTag[T1]): Tree[T1]", "member" : "com.github.arturopala.tree.internal.NodeTreeLike.updateChild", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html#updateChild[T1>:T](value:T1,replacement:com.github.arturopala.tree.Tree[T1])(implicitevidence$18:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T1]", "kind" : "final def"}, {"label" : "updateValueAt", "tail" : "(path: Iterable[K], replacement: T1, toPathItem: (T) => K)(arg0: ClassTag[T1]): Either[Tree[T], Tree[T1]]", "member" : "com.github.arturopala.tree.internal.NodeTreeLike.updateValueAt", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html#updateValueAt[K,T1>:T](path:Iterable[K],replacement:T1,toPathItem:T=>K)(implicitevidence$17:scala.reflect.ClassTag[T1]):Either[com.github.arturopala.tree.Tree[T],com.github.arturopala.tree.Tree[T1]]", "kind" : "final def"}, {"label" : "updateValueAt", "tail" : "(path: Iterable[T1], replacement: T1)(arg0: ClassTag[T1]): Either[Tree[T], Tree[T1]]", "member" : "com.github.arturopala.tree.internal.NodeTreeLike.updateValueAt", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html#updateValueAt[T1>:T](path:Iterable[T1],replacement:T1)(implicitevidence$16:scala.reflect.ClassTag[T1]):Either[com.github.arturopala.tree.Tree[T],com.github.arturopala.tree.Tree[T1]]", "kind" : "final def"}, {"label" : "updateChildValue", "tail" : "(existingValue: T1, replacement: T1)(arg0: ClassTag[T1]): Tree[T1]", "member" : "com.github.arturopala.tree.internal.NodeTreeLike.updateChildValue", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html#updateChildValue[T1>:T](existingValue:T1,replacement:T1)(implicitevidence$15:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T1]", "kind" : "final def"}, {"label" : "updateHead", "tail" : "(replacement: T1)(arg0: ClassTag[T1]): Tree[T1]", "member" : "com.github.arturopala.tree.internal.NodeTreeLike.updateHead", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html#updateHead[T1>:T](replacement:T1)(implicitevidence$14:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T1]", "kind" : "final def"}, {"label" : "insertBranch", "tail" : "(branch: Iterable[T1], append: Boolean)(arg0: ClassTag[T1]): Tree[T1]", "member" : "com.github.arturopala.tree.internal.NodeTreeLike.insertBranch", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html#insertBranch[T1>:T](branch:Iterable[T1],append:Boolean)(implicitevidence$13:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T1]", "kind" : "final def"}, {"label" : "insertChildrenAt", "tail" : "(path: Iterable[K], children: Iterable[Tree[T1]], toPathItem: (T) => K, append: Boolean)(arg0: ClassTag[T1]): Either[Tree[T], Tree[T1]]", "member" : "com.github.arturopala.tree.internal.NodeTreeLike.insertChildrenAt", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html#insertChildrenAt[K,T1>:T](path:Iterable[K],children:Iterable[com.github.arturopala.tree.Tree[T1]],toPathItem:T=>K,append:Boolean)(implicitevidence$12:scala.reflect.ClassTag[T1]):Either[com.github.arturopala.tree.Tree[T],com.github.arturopala.tree.Tree[T1]]", "kind" : "final def"}, {"label" : "insertChildrenAt", "tail" : "(path: Iterable[T1], children: Iterable[Tree[T1]], append: Boolean)(arg0: ClassTag[T1]): Tree[T1]", "member" : "com.github.arturopala.tree.internal.NodeTreeLike.insertChildrenAt", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html#insertChildrenAt[T1>:T](path:Iterable[T1],children:Iterable[com.github.arturopala.tree.Tree[T1]],append:Boolean)(implicitevidence$11:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T1]", "kind" : "final def"}, {"label" : "insertChildAt", "tail" : "(path: Iterable[K], child: Tree[T1], toPathItem: (T) => K, append: Boolean)(arg0: ClassTag[T1]): Either[Tree[T], Tree[T1]]", "member" : "com.github.arturopala.tree.internal.NodeTreeLike.insertChildAt", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html#insertChildAt[K,T1>:T](path:Iterable[K],child:com.github.arturopala.tree.Tree[T1],toPathItem:T=>K,append:Boolean)(implicitevidence$10:scala.reflect.ClassTag[T1]):Either[com.github.arturopala.tree.Tree[T],com.github.arturopala.tree.Tree[T1]]", "kind" : "final def"}, {"label" : "insertChildAt", "tail" : "(path: Iterable[T1], child: Tree[T1], append: Boolean)(arg0: ClassTag[T1]): Tree[T1]", "member" : "com.github.arturopala.tree.internal.NodeTreeLike.insertChildAt", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html#insertChildAt[T1>:T](path:Iterable[T1],child:com.github.arturopala.tree.Tree[T1],append:Boolean)(implicitevidence$9:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T1]", "kind" : "final def"}, {"label" : "insertChildren", "tail" : "(children: Iterable[Tree[T1]], append: Boolean)(arg0: ClassTag[T1]): Tree[T1]", "member" : "com.github.arturopala.tree.internal.NodeTreeLike.insertChildren", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html#insertChildren[T1>:T](children:Iterable[com.github.arturopala.tree.Tree[T1]],append:Boolean)(implicitevidence$8:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T1]", "kind" : "final def"}, {"label" : "insertChild", "tail" : "(child: Tree[T1], append: Boolean)(arg0: ClassTag[T1]): Tree[T1]", "member" : "com.github.arturopala.tree.internal.NodeTreeLike.insertChild", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html#insertChild[T1>:T](child:com.github.arturopala.tree.Tree[T1],append:Boolean)(implicitevidence$7:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T1]", "kind" : "final def"}, {"label" : "insertLeafAt", "tail" : "(path: Iterable[K], value: T1, toPathItem: (T) => K, append: Boolean)(arg0: ClassTag[T1]): Either[Tree[T], Tree[T1]]", "member" : "com.github.arturopala.tree.internal.NodeTreeLike.insertLeafAt", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html#insertLeafAt[K,T1>:T](path:Iterable[K],value:T1,toPathItem:T=>K,append:Boolean)(implicitevidence$6:scala.reflect.ClassTag[T1]):Either[com.github.arturopala.tree.Tree[T],com.github.arturopala.tree.Tree[T1]]", "kind" : "final def"}, {"label" : "insertLeafAt", "tail" : "(path: Iterable[T1], value: T1, append: Boolean)(arg0: ClassTag[T1]): Tree[T1]", "member" : "com.github.arturopala.tree.internal.NodeTreeLike.insertLeafAt", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html#insertLeafAt[T1>:T](path:Iterable[T1],value:T1,append:Boolean)(implicitevidence$5:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T1]", "kind" : "final def"}, {"label" : "insertLeaves", "tail" : "(values: Iterable[T1], append: Boolean)(arg0: ClassTag[T1]): Tree[T1]", "member" : "com.github.arturopala.tree.internal.NodeTreeLike.insertLeaves", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html#insertLeaves[T1>:T](values:Iterable[T1],append:Boolean)(implicitevidence$4:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T1]", "kind" : "final def"}, {"label" : "insertLeaf", "tail" : "(value: T1, append: Boolean)(arg0: ClassTag[T1]): Tree[T1]", "member" : "com.github.arturopala.tree.internal.NodeTreeLike.insertLeaf", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html#insertLeaf[T1>:T](value:T1,append:Boolean)(implicitevidence$3:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T1]", "kind" : "final def"}, {"label" : "prepend", "tail" : "(value: T1)(arg0: ClassTag[T1]): Tree[T1]", "member" : "com.github.arturopala.tree.internal.NodeTreeLike.prepend", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html#prepend[T1>:T](value:T1)(implicitevidence$2:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T1]", "kind" : "final def"}, {"label" : "containsPath", "tail" : "(path: Iterable[K], toPathItem: (T) => K): Boolean", "member" : "com.github.arturopala.tree.internal.NodeTreeLike.containsPath", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html#containsPath[K](path:Iterable[K],toPathItem:T=>K):Boolean", "kind" : "final def"}, {"label" : "containsPath", "tail" : "(path: Iterable[T1]): Boolean", "member" : "com.github.arturopala.tree.internal.NodeTreeLike.containsPath", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html#containsPath[T1>:T](path:Iterable[T1]):Boolean", "kind" : "final def"}, {"label" : "containsBranch", "tail" : "(branch: Iterable[K], toPathItem: (T) => K): Boolean", "member" : "com.github.arturopala.tree.internal.NodeTreeLike.containsBranch", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html#containsBranch[K](branch:Iterable[K],toPathItem:T=>K):Boolean", "kind" : "final def"}, {"label" : "containsBranch", "tail" : "(branch: Iterable[T1]): Boolean", "member" : "com.github.arturopala.tree.internal.NodeTreeLike.containsBranch", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html#containsBranch[T1>:T](branch:Iterable[T1]):Boolean", "kind" : "final def"}, {"label" : "containsChild", "tail" : "(value: T1): Boolean", "member" : "com.github.arturopala.tree.internal.NodeTreeLike.containsChild", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html#containsChild[T1>:T](value:T1):Boolean", "kind" : "final def"}, {"label" : "selectTree", "tail" : "(path: Iterable[K], toPathItem: (T) => K, rightmost: Boolean): Option[Tree[T]]", "member" : "com.github.arturopala.tree.internal.NodeTreeLike.selectTree", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html#selectTree[K](path:Iterable[K],toPathItem:T=>K,rightmost:Boolean):Option[com.github.arturopala.tree.Tree[T]]", "kind" : "final def"}, {"label" : "selectTree", "tail" : "(path: Iterable[T1], rightmost: Boolean)(arg0: ClassTag[T1]): Option[Tree[T]]", "member" : "com.github.arturopala.tree.internal.NodeTreeLike.selectTree", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html#selectTree[T1>:T](path:Iterable[T1],rightmost:Boolean)(implicitevidence$1:scala.reflect.ClassTag[T1]):Option[com.github.arturopala.tree.Tree[T]]", "kind" : "final def"}, {"label" : "selectValue", "tail" : "(path: Iterable[K], toPathItem: (T) => K, rightmost: Boolean): Option[T]", "member" : "com.github.arturopala.tree.internal.NodeTreeLike.selectValue", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html#selectValue[K](path:Iterable[K],toPathItem:T=>K,rightmost:Boolean):Option[T]", "kind" : "final def"}, {"label" : "countBranches", "tail" : "(pred: (Iterable[T]) => Boolean): Int", "member" : "com.github.arturopala.tree.internal.NodeTreeLike.countBranches", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html#countBranches(pred:Iterable[T]=>Boolean):Int", "kind" : "final def"}, {"label" : "branchesWithFilter", "tail" : "(pred: (Iterable[T]) => Boolean, maxDepth: Int): Iterable[Iterable[T]]", "member" : "com.github.arturopala.tree.internal.NodeTreeLike.branchesWithFilter", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html#branchesWithFilter(pred:Iterable[T]=>Boolean,maxDepth:Int):Iterable[Iterable[T]]", "kind" : "final def"}, {"label" : "branches", "tail" : "(): Iterable[Iterable[T]]", "member" : "com.github.arturopala.tree.internal.NodeTreeLike.branches", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html#branches:Iterable[Iterable[T]]", "kind" : "final def"}, {"label" : "treesAndLevelsWithFilter", "tail" : "(pred: (Tree[T]) => Boolean, mode: TraversingMode, maxDepth: Int): Iterable[(Int, Tree[T])]", "member" : "com.github.arturopala.tree.internal.NodeTreeLike.treesAndLevelsWithFilter", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html#treesAndLevelsWithFilter(pred:com.github.arturopala.tree.Tree[T]=>Boolean,mode:com.github.arturopala.tree.TreeOptions.TraversingMode,maxDepth:Int):Iterable[(Int,com.github.arturopala.tree.Tree[T])]", "kind" : "def"}, {"label" : "treesWithFilter", "tail" : "(pred: (Tree[T]) => Boolean, mode: TraversingMode, maxDepth: Int): Iterable[Tree[T]]", "member" : "com.github.arturopala.tree.internal.NodeTreeLike.treesWithFilter", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html#treesWithFilter(pred:com.github.arturopala.tree.Tree[T]=>Boolean,mode:com.github.arturopala.tree.TreeOptions.TraversingMode,maxDepth:Int):Iterable[com.github.arturopala.tree.Tree[T]]", "kind" : "final def"}, {"label" : "trees", "tail" : "(mode: TraversingMode): Iterable[Tree[T]]", "member" : "com.github.arturopala.tree.internal.NodeTreeLike.trees", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html#trees(mode:com.github.arturopala.tree.TreeOptions.TraversingMode):Iterable[com.github.arturopala.tree.Tree[T]]", "kind" : "final def"}, {"label" : "childrenValues", "tail" : "(): Iterable[T]", "member" : "com.github.arturopala.tree.internal.NodeTreeLike.childrenValues", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html#childrenValues:Iterable[T]", "kind" : "final def"}, {"label" : "valuesAndLevelsWithFilter", "tail" : "(pred: (T) => Boolean, mode: TraversingMode, maxDepth: Int): Iterable[(Int, T, Boolean)]", "member" : "com.github.arturopala.tree.internal.NodeTreeLike.valuesAndLevelsWithFilter", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html#valuesAndLevelsWithFilter(pred:T=>Boolean,mode:com.github.arturopala.tree.TreeOptions.TraversingMode,maxDepth:Int):Iterable[(Int,T,Boolean)]", "kind" : "def"}, {"label" : "valuesWithFilter", "tail" : "(pred: (T) => Boolean, mode: TraversingMode, maxDepth: Int): Iterable[T]", "member" : "com.github.arturopala.tree.internal.NodeTreeLike.valuesWithFilter", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html#valuesWithFilter(pred:T=>Boolean,mode:com.github.arturopala.tree.TreeOptions.TraversingMode,maxDepth:Int):Iterable[T]", "kind" : "final def"}, {"label" : "leaves", "tail" : "(): Iterable[T]", "member" : "com.github.arturopala.tree.internal.NodeTreeLike.leaves", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html#leaves:Iterable[T]", "kind" : "final def"}, {"label" : "values", "tail" : "(mode: TraversingMode): Iterable[T]", "member" : "com.github.arturopala.tree.internal.NodeTreeLike.values", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html#values(mode:com.github.arturopala.tree.TreeOptions.TraversingMode):Iterable[T]", "kind" : "final def"}, {"label" : "headOption", "tail" : "(): Option[T]", "member" : "com.github.arturopala.tree.internal.NodeTreeLike.headOption", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html#headOption:Option[T]", "kind" : "final def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "com.github.arturopala.tree.internal.NodeTreeLike.isEmpty", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html#isEmpty:Boolean", "kind" : "final def"}, {"label" : "removeChildrenAt", "tail" : "(path: Iterable[K], toPathItem: (T) => K)(arg0: ClassTag[T1]): Tree[T]", "member" : "com.github.arturopala.tree.TreeLike.removeChildrenAt", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html#removeChildrenAt[K,T1>:T](path:Iterable[K],toPathItem:T=>K)(implicitevidence$46:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T]", "kind" : "def"}, {"label" : "removeChildrenAt", "tail" : "(path: Iterable[T1])(arg0: ClassTag[T1]): Tree[T]", "member" : "com.github.arturopala.tree.TreeLike.removeChildrenAt", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html#removeChildrenAt[T1>:T](path:Iterable[T1])(implicitevidence$45:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T]", "kind" : "def"}, {"label" : "removeChildren", "tail" : "()(arg0: ClassTag[T1]): Tree[T]", "member" : "com.github.arturopala.tree.TreeLike.removeChildren", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html#removeChildren[T1>:T]()(implicitevidence$42:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T]", "kind" : "def"}, {"label" : "modifyChildrenAt", "tail" : "(path: Iterable[K], modify: (Iterable[Tree[T]]) => Iterable[Tree[T1]], toPathItem: (T) => K)(arg0: ClassTag[T1]): Either[Tree[T], Tree[T1]]", "member" : "com.github.arturopala.tree.TreeLike.modifyChildrenAt", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html#modifyChildrenAt[K,T1>:T](path:Iterable[K],modify:Iterable[com.github.arturopala.tree.Tree[T]]=>Iterable[com.github.arturopala.tree.Tree[T1]],toPathItem:T=>K)(implicitevidence$37:scala.reflect.ClassTag[T1]):Either[com.github.arturopala.tree.Tree[T],com.github.arturopala.tree.Tree[T1]]", "kind" : "def"}, {"label" : "modifyChildrenAt", "tail" : "(path: Iterable[T1], modify: (Iterable[Tree[T]]) => Iterable[Tree[T1]])(arg0: ClassTag[T1]): Either[Tree[T], Tree[T1]]", "member" : "com.github.arturopala.tree.TreeLike.modifyChildrenAt", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html#modifyChildrenAt[T1>:T](path:Iterable[T1],modify:Iterable[com.github.arturopala.tree.Tree[T]]=>Iterable[com.github.arturopala.tree.Tree[T1]])(implicitevidence$36:scala.reflect.ClassTag[T1]):Either[com.github.arturopala.tree.Tree[T],com.github.arturopala.tree.Tree[T1]]", "kind" : "def"}, {"label" : "insertBranches", "tail" : "(branches: Iterable[Iterable[T1]], append: Boolean)(arg0: ClassTag[T1]): Tree[T1]", "member" : "com.github.arturopala.tree.TreeLike.insertBranches", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html#insertBranches[T1>:T](branches:Iterable[Iterable[T1]],append:Boolean)(implicitevidence$21:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T1]", "kind" : "def"}, {"label" : "diff", "tail" : "(other: Tree[T1]): Tree[T1]", "member" : "com.github.arturopala.tree.TreeLike.diff", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html#diff[T1>:T](other:com.github.arturopala.tree.Tree[T1]):com.github.arturopala.tree.Tree[T1]", "kind" : "def"}, {"label" : "intersect", "tail" : "(other: Tree[T1]): Tree[T1]", "member" : "com.github.arturopala.tree.TreeLike.intersect", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html#intersect[T1>:T](other:com.github.arturopala.tree.Tree[T1]):com.github.arturopala.tree.Tree[T1]", "kind" : "def"}, {"label" : "union", "tail" : "(other: Tree[T1], keepDistinct: Boolean): Tree[T1]", "member" : "com.github.arturopala.tree.TreeLike.union", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html#union[T1>:T](other:com.github.arturopala.tree.Tree[T1],keepDistinct:Boolean):com.github.arturopala.tree.Tree[T1]", "kind" : "def"}, {"label" : "foldBranches", "tail" : "(initial: A, maxDepth: Int)(f: (A, Iterable[T]) => A): A", "member" : "com.github.arturopala.tree.TreeLike.foldBranches", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html#foldBranches[A](initial:A,maxDepth:Int)(f:(A,Iterable[T])=>A):A", "kind" : "def"}, {"label" : "foldTreesWithLevel", "tail" : "(initial: A, maxDepth: Int)(f: (A, Int, Tree[T]) => A): A", "member" : "com.github.arturopala.tree.TreeLike.foldTreesWithLevel", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html#foldTreesWithLevel[A](initial:A,maxDepth:Int)(f:(A,Int,com.github.arturopala.tree.Tree[T])=>A):A", "kind" : "def"}, {"label" : "foldTrees", "tail" : "(initial: A, maxDepth: Int)(f: (A, Tree[T]) => A): A", "member" : "com.github.arturopala.tree.TreeLike.foldTrees", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html#foldTrees[A](initial:A,maxDepth:Int)(f:(A,com.github.arturopala.tree.Tree[T])=>A):A", "kind" : "def"}, {"label" : "foldValuesWithLevel", "tail" : "(initial: A, maxDepth: Int)(f: (A, Int, T) => A): A", "member" : "com.github.arturopala.tree.TreeLike.foldValuesWithLevel", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html#foldValuesWithLevel[A](initial:A,maxDepth:Int)(f:(A,Int,T)=>A):A", "kind" : "def"}, {"label" : "foldValues", "tail" : "(initial: A, maxDepth: Int)(f: (A, T) => A): A", "member" : "com.github.arturopala.tree.TreeLike.foldValues", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html#foldValues[A](initial:A,maxDepth:Int)(f:(A,T)=>A):A", "kind" : "def"}, {"label" : "filterChildrenAt", "tail" : "(path: Iterable[K], pred: (Tree[T]) => Boolean, toPathItem: (T) => K)(arg0: ClassTag[T1]): Tree[T]", "member" : "com.github.arturopala.tree.TreeLike.filterChildrenAt", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html#filterChildrenAt[K,T1>:T](path:Iterable[K],pred:com.github.arturopala.tree.Tree[T]=>Boolean,toPathItem:T=>K)(implicitevidence$8:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T]", "kind" : "def"}, {"label" : "filterChildrenAt", "tail" : "(path: Iterable[T1], pred: (Tree[T]) => Boolean)(arg0: ClassTag[T1]): Tree[T]", "member" : "com.github.arturopala.tree.TreeLike.filterChildrenAt", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html#filterChildrenAt[T1>:T](path:Iterable[T1],pred:com.github.arturopala.tree.Tree[T]=>Boolean)(implicitevidence$7:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T]", "kind" : "def"}, {"label" : "filterChildren", "tail" : "(pred: (Tree[T]) => Boolean)(arg0: ClassTag[T1]): Tree[T]", "member" : "com.github.arturopala.tree.TreeLike.filterChildren", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html#filterChildren[T1>:T](pred:com.github.arturopala.tree.Tree[T]=>Boolean)(implicitevidence$6:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T]", "kind" : "def"}, {"label" : "filterBranches", "tail" : "(f: (Iterable[T]) => Boolean): Tree[T]", "member" : "com.github.arturopala.tree.TreeLike.filterBranches", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html#filterBranches(f:Iterable[T]=>Boolean):com.github.arturopala.tree.Tree[T]", "kind" : "def"}, {"label" : "filterTrees", "tail" : "(f: (Tree[T]) => Boolean, keepDistinct: Boolean): Tree[T]", "member" : "com.github.arturopala.tree.TreeLike.filterTrees", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html#filterTrees(f:com.github.arturopala.tree.Tree[T]=>Boolean,keepDistinct:Boolean):com.github.arturopala.tree.Tree[T]", "kind" : "def"}, {"label" : "filterValues", "tail" : "(f: (T) => Boolean, keepDistinct: Boolean): Tree[T]", "member" : "com.github.arturopala.tree.TreeLike.filterValues", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html#filterValues(f:T=>Boolean,keepDistinct:Boolean):com.github.arturopala.tree.Tree[T]", "kind" : "def"}, {"label" : "distinct", "tail" : "(): Tree[T]", "member" : "com.github.arturopala.tree.TreeLike.distinct", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html#distinct:com.github.arturopala.tree.Tree[T]", "kind" : "def"}, {"label" : "dropLeaves", "tail" : "(): Tree[T]", "member" : "com.github.arturopala.tree.TreeLike.dropLeaves", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html#dropLeaves:com.github.arturopala.tree.Tree[T]", "kind" : "def"}, {"label" : "trim", "tail" : "(height: Int): Tree[T]", "member" : "com.github.arturopala.tree.TreeLike.trim", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html#trim(height:Int):com.github.arturopala.tree.Tree[T]", "kind" : "def"}, {"label" : "mapChildren", "tail" : "(f: (Iterable[Tree[T]]) => Iterable[Tree[K]])(arg0: ClassTag[K]): Tree[K]", "member" : "com.github.arturopala.tree.TreeLike.mapChildren", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html#mapChildren[K](f:Iterable[com.github.arturopala.tree.Tree[T]]=>Iterable[com.github.arturopala.tree.Tree[K]])(implicitevidence$5:scala.reflect.ClassTag[K]):com.github.arturopala.tree.Tree[K]", "kind" : "def"}, {"label" : "mapBranches", "tail" : "(f: (Iterable[T]) => Iterable[K])(arg0: ClassTag[K]): Tree[K]", "member" : "com.github.arturopala.tree.TreeLike.mapBranches", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html#mapBranches[K](f:Iterable[T]=>Iterable[K])(implicitevidence$4:scala.reflect.ClassTag[K]):com.github.arturopala.tree.Tree[K]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (T) => Tree[K])(arg0: ClassTag[K]): Tree[K]", "member" : "com.github.arturopala.tree.TreeLike.flatMap", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html#flatMap[K](f:T=>com.github.arturopala.tree.Tree[K])(implicitevidence$3:scala.reflect.ClassTag[K]):com.github.arturopala.tree.Tree[K]", "kind" : "def"}, {"label" : "findPathsLeadingTo", "tail" : "(value: T1): Iterator[Iterable[T]]", "member" : "com.github.arturopala.tree.TreeLike.findPathsLeadingTo", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html#findPathsLeadingTo[T1>:T](value:T1):Iterator[Iterable[T]]", "kind" : "def"}, {"label" : "existsPath", "tail" : "(path: (Iterable[K]) => Boolean, toPathItem: (T) => K): Boolean", "member" : "com.github.arturopala.tree.TreeLike.existsPath", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html#existsPath[K](path:Iterable[K]=>Boolean,toPathItem:T=>K):Boolean", "kind" : "def"}, {"label" : "existsPath", "tail" : "(path: (Iterable[T]) => Boolean): Boolean", "member" : "com.github.arturopala.tree.TreeLike.existsPath", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html#existsPath(path:Iterable[T]=>Boolean):Boolean", "kind" : "def"}, {"label" : "existsBranch", "tail" : "(branch: (Iterable[K]) => Boolean, toPathItem: (T) => K): Boolean", "member" : "com.github.arturopala.tree.TreeLike.existsBranch", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html#existsBranch[K](branch:Iterable[K]=>Boolean,toPathItem:T=>K):Boolean", "kind" : "def"}, {"label" : "existsBranch", "tail" : "(branch: (Iterable[T]) => Boolean): Boolean", "member" : "com.github.arturopala.tree.TreeLike.existsBranch", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html#existsBranch(branch:Iterable[T]=>Boolean):Boolean", "kind" : "def"}, {"label" : "existsChild", "tail" : "(pred: (T) => Boolean): Boolean", "member" : "com.github.arturopala.tree.TreeLike.existsChild", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html#existsChild(pred:T=>Boolean):Boolean", "kind" : "def"}, {"label" : "existsValue", "tail" : "(pred: (T) => Boolean): Boolean", "member" : "com.github.arturopala.tree.TreeLike.existsValue", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html#existsValue(pred:T=>Boolean):Boolean", "kind" : "def"}, {"label" : "containsValue", "tail" : "(value: T1): Boolean", "member" : "com.github.arturopala.tree.TreeLike.containsValue", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html#containsValue[T1>:T](value:T1):Boolean", "kind" : "def"}, {"label" : "paths", "tail" : "(): Iterable[Iterable[T]]", "member" : "com.github.arturopala.tree.TreeLike.paths", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html#paths:Iterable[Iterable[T]]", "kind" : "def"}, {"label" : "lastChild", "tail" : "(): Option[Tree[T]]", "member" : "com.github.arturopala.tree.TreeLike.lastChild", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html#lastChild:Option[com.github.arturopala.tree.Tree[T]]", "kind" : "def"}, {"label" : "firstChild", "tail" : "(): Option[Tree[T]]", "member" : "com.github.arturopala.tree.TreeLike.firstChild", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html#firstChild:Option[com.github.arturopala.tree.Tree[T]]", "kind" : "def"}, {"label" : "lastChildValue", "tail" : "(): Option[T]", "member" : "com.github.arturopala.tree.TreeLike.lastChildValue", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html#lastChildValue:Option[T]", "kind" : "def"}, {"label" : "firstChildValue", "tail" : "(): Option[T]", "member" : "com.github.arturopala.tree.TreeLike.firstChildValue", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html#firstChildValue:Option[T]", "kind" : "def"}, {"label" : "nonEmpty", "tail" : "(): Boolean", "member" : "com.github.arturopala.tree.TreeLike.nonEmpty", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html#nonEmpty:Boolean", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "node", "tail" : ": NodeTree[T]", "member" : "com.github.arturopala.tree.internal.NodeTreeLike.node", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html#node:com.github.arturopala.tree.Tree.NodeTree[T]", "kind" : "abstract val"}, {"label" : "children", "tail" : "(): Iterable[Tree[T]]", "member" : "com.github.arturopala.tree.TreeLike.children", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html#children:Iterable[com.github.arturopala.tree.Tree[T]]", "kind" : "abstract def"}, {"label" : "head", "tail" : "(): T", "member" : "com.github.arturopala.tree.TreeLike.head", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html#head:T", "kind" : "abstract def"}, {"label" : "childrenCount", "tail" : "(): Int", "member" : "com.github.arturopala.tree.TreeLike.childrenCount", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html#childrenCount:Int", "kind" : "abstract def"}, {"label" : "isLeaf", "tail" : "(): Boolean", "member" : "com.github.arturopala.tree.TreeLike.isLeaf", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html#isLeaf:Boolean", "kind" : "abstract def"}, {"label" : "height", "tail" : "(): Int", "member" : "com.github.arturopala.tree.TreeLike.height", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html#height:Int", "kind" : "abstract def"}, {"label" : "width", "tail" : "(): Int", "member" : "com.github.arturopala.tree.TreeLike.width", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html#width:Int", "kind" : "abstract def"}, {"label" : "size", "tail" : "(): Int", "member" : "com.github.arturopala.tree.TreeLike.size", "link" : "com\/github\/arturopala\/tree\/internal\/NodeTreeLike.html#size:Int", "kind" : "abstract def"}], "shortDescription" : "The Tree.NodeTree final functions set."}, {"name" : "com.github.arturopala.tree.internal.VectorOps", "shortDescription" : "", "object" : "com\/github\/arturopala\/tree\/internal\/VectorOps$.html", "members_object" : [{"label" : "VectorExt", "tail" : "", "member" : "com.github.arturopala.tree.internal.VectorOps.VectorExt", "link" : "com\/github\/arturopala\/tree\/internal\/VectorOps$.html#VectorExt[T]extendsAnyVal", "kind" : "implicit final class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/arturopala\/tree\/internal\/VectorOps$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/arturopala\/tree\/internal\/VectorOps$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/arturopala\/tree\/internal\/VectorOps$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/arturopala\/tree\/internal\/VectorOps$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/arturopala\/tree\/internal\/VectorOps$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/arturopala\/tree\/internal\/VectorOps$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/arturopala\/tree\/internal\/VectorOps$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/arturopala\/tree\/internal\/VectorOps$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/arturopala\/tree\/internal\/VectorOps$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/arturopala\/tree\/internal\/VectorOps$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/arturopala\/tree\/internal\/VectorOps$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/arturopala\/tree\/internal\/VectorOps$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/arturopala\/tree\/internal\/VectorOps$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/arturopala\/tree\/internal\/VectorOps$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/arturopala\/tree\/internal\/VectorOps$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/arturopala\/tree\/internal\/VectorOps$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/arturopala\/tree\/internal\/VectorOps$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/arturopala\/tree\/internal\/VectorOps$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/arturopala\/tree\/internal\/VectorOps$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "com" : [], "com.github" : []};