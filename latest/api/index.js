Index.PACKAGES = {"com.github.arturopala.tree.util" : [{"name" : "com.github.arturopala.tree.util.ArrayTree", "shortDescription" : "Collection of operations on the linear, array-based, representation of the tree.", "object" : "com\/github\/arturopala\/tree\/util\/ArrayTree$.html", "members_object" : [{"label" : "selectTree", "tail" : "(path: Iterable[T1], startIndex: Int, treeStructure: IntSlice, treeValues: Slice[T])(arg0: ClassTag[T]): Option[Tree[T]]", "member" : "com.github.arturopala.tree.util.ArrayTree.selectTree", "link" : "com\/github\/arturopala\/tree\/util\/ArrayTree$.html#selectTree[T,T1>:T](path:Iterable[T1],startIndex:Int,treeStructure:com.github.arturopala.tree.util.IntSlice,treeValues:com.github.arturopala.tree.util.Slice[T])(implicitevidence$5:scala.reflect.ClassTag[T]):Option[com.github.arturopala.tree.Tree[T]]", "kind" : "final def"}, {"label" : "selectValue", "tail" : "(path: Iterable[T1], startIndex: Int, treeStructure: (Int) => Int, treeValues: (Int) => T): Option[T]", "member" : "com.github.arturopala.tree.util.ArrayTree.selectValue", "link" : "com\/github\/arturopala\/tree\/util\/ArrayTree$.html#selectValue[T,T1>:T](path:Iterable[T1],startIndex:Int,treeStructure:Int=>Int,treeValues:Int=>T):Option[T]", "kind" : "final def"}, {"label" : "containsPath", "tail" : "(path: Iterable[T1], startIndex: Int, treeStructure: (Int) => Int, treeValues: (Int) => T): Boolean", "member" : "com.github.arturopala.tree.util.ArrayTree.containsPath", "link" : "com\/github\/arturopala\/tree\/util\/ArrayTree$.html#containsPath[T,T1>:T](path:Iterable[T1],startIndex:Int,treeStructure:Int=>Int,treeValues:Int=>T):Boolean", "kind" : "final def"}, {"label" : "containsBranch", "tail" : "(branch: Iterable[T1], startIndex: Int, treeStructure: (Int) => Int, treeValues: (Int) => T): Boolean", "member" : "com.github.arturopala.tree.util.ArrayTree.containsBranch", "link" : "com\/github\/arturopala\/tree\/util\/ArrayTree$.html#containsBranch[T,T1>:T](branch:Iterable[T1],startIndex:Int,treeStructure:Int=>Int,treeValues:Int=>T):Boolean", "kind" : "final def"}, {"label" : "followPath", "tail" : "(path: Iterable[T1], startIndex: Int, treeStructure: (Int) => Int, treeValues: (Int) => T): (Array[Int], Option[T1], Iterator[T1], Boolean)", "member" : "com.github.arturopala.tree.util.ArrayTree.followPath", "link" : "com\/github\/arturopala\/tree\/util\/ArrayTree$.html#followPath[T,T1>:T](path:Iterable[T1],startIndex:Int,treeStructure:Int=>Int,treeValues:Int=>T):(Array[Int],Option[T1],Iterator[T1],Boolean)", "kind" : "final def"}, {"label" : "mkStringUsingBranches", "tail" : "(startIndex: Int, treeStructure: (Int) => Int, treeValues: (Int) => T, show: (T) => String, valueSeparator: String, branchSeparator: String, branchStart: String, branchEnd: String, maxDepth: Int): StringBuilder", "member" : "com.github.arturopala.tree.util.ArrayTree.mkStringUsingBranches", "link" : "com\/github\/arturopala\/tree\/util\/ArrayTree$.html#mkStringUsingBranches[T](startIndex:Int,treeStructure:Int=>Int,treeValues:Int=>T,show:T=>String,valueSeparator:String,branchSeparator:String,branchStart:String,branchEnd:String,maxDepth:Int):StringBuilder", "kind" : "final def"}, {"label" : "countBranches", "tail" : "(startIndex: Int, treeStructure: (Int) => Int, treeValues: (Int) => T, pred: (List[T]) => Boolean)(arg0: ClassTag[T]): Int", "member" : "com.github.arturopala.tree.util.ArrayTree.countBranches", "link" : "com\/github\/arturopala\/tree\/util\/ArrayTree$.html#countBranches[T](startIndex:Int,treeStructure:Int=>Int,treeValues:Int=>T,pred:List[T]=>Boolean)(implicitevidence$4:scala.reflect.ClassTag[T]):Int", "kind" : "final def"}, {"label" : "calculateHeight", "tail" : "(startIndex: Int, treeStructure: (Int) => Int): Int", "member" : "com.github.arturopala.tree.util.ArrayTree.calculateHeight", "link" : "com\/github\/arturopala\/tree\/util\/ArrayTree$.html#calculateHeight(startIndex:Int,treeStructure:Int=>Int):Int", "kind" : "final def"}, {"label" : "foldLeftBranches", "tail" : "(startIndex: Int, treeStructure: (Int) => Int, initialValue: A, read: (IntBuffer, IntBuffer, Int) => R, fold: (A, R, Int) => A): A", "member" : "com.github.arturopala.tree.util.ArrayTree.foldLeftBranches", "link" : "com\/github\/arturopala\/tree\/util\/ArrayTree$.html#foldLeftBranches[A,R](startIndex:Int,treeStructure:Int=>Int,initialValue:A,read:(com.github.arturopala.tree.util.IntBuffer,com.github.arturopala.tree.util.IntBuffer,Int)=>R,fold:(A,R,Int)=>A):A", "kind" : "final def"}, {"label" : "foldLeftBranchesLengths", "tail" : "(startIndex: Int, treeStructure: (Int) => Int, initialValue: A, fold: (A, Int, Int) => A): A", "member" : "com.github.arturopala.tree.util.ArrayTree.foldLeftBranchesLengths", "link" : "com\/github\/arturopala\/tree\/util\/ArrayTree$.html#foldLeftBranchesLengths[A](startIndex:Int,treeStructure:Int=>Int,initialValue:A,fold:(A,Int,Int)=>A):A", "kind" : "final def"}, {"label" : "foldLeftBranchesIndexLists", "tail" : "(startIndex: Int, treeStructure: (Int) => Int, initialValue: A, fold: (A, IntSlice, Int) => A): A", "member" : "com.github.arturopala.tree.util.ArrayTree.foldLeftBranchesIndexLists", "link" : "com\/github\/arturopala\/tree\/util\/ArrayTree$.html#foldLeftBranchesIndexLists[A](startIndex:Int,treeStructure:Int=>Int,initialValue:A,fold:(A,com.github.arturopala.tree.util.IntSlice,Int)=>A):A", "kind" : "final def"}, {"label" : "treeAt", "tail" : "(index: Int, treeStructure: IntSlice, treeValues: Slice[T])(arg0: ClassTag[T]): Tree[T]", "member" : "com.github.arturopala.tree.util.ArrayTree.treeAt", "link" : "com\/github\/arturopala\/tree\/util\/ArrayTree$.html#treeAt[T](index:Int,treeStructure:com.github.arturopala.tree.util.IntSlice,treeValues:com.github.arturopala.tree.util.Slice[T])(implicitevidence$3:scala.reflect.ClassTag[T]):com.github.arturopala.tree.Tree[T]", "kind" : "final def"}, {"label" : "treeIterator", "tail" : "(startIndex: Int, treeStructure: IntSlice, treeValues: Slice[T], pred: (Tree[T]) => Boolean)(arg0: ClassTag[T]): Iterator[Tree[T]]", "member" : "com.github.arturopala.tree.util.ArrayTree.treeIterator", "link" : "com\/github\/arturopala\/tree\/util\/ArrayTree$.html#treeIterator[T](startIndex:Int,treeStructure:com.github.arturopala.tree.util.IntSlice,treeValues:com.github.arturopala.tree.util.Slice[T],pred:com.github.arturopala.tree.Tree[T]=>Boolean)(implicitevidence$2:scala.reflect.ClassTag[T]):Iterator[com.github.arturopala.tree.Tree[T]]", "kind" : "final def"}, {"label" : "branchIterator", "tail" : "(startIndex: Int, treeStructure: (Int) => Int, treeValues: (Int) => T, pred: (Iterable[T]) => Boolean)(arg0: ClassTag[T]): Iterator[Iterable[T]]", "member" : "com.github.arturopala.tree.util.ArrayTree.branchIterator", "link" : "com\/github\/arturopala\/tree\/util\/ArrayTree$.html#branchIterator[T](startIndex:Int,treeStructure:Int=>Int,treeValues:Int=>T,pred:Iterable[T]=>Boolean)(implicitevidence$1:scala.reflect.ClassTag[T]):Iterator[Iterable[T]]", "kind" : "final def"}, {"label" : "branchesIndexListIterator", "tail" : "(startIndex: Int, treeStructure: (Int) => Int): Iterator[IntSlice]", "member" : "com.github.arturopala.tree.util.ArrayTree.branchesIndexListIterator", "link" : "com\/github\/arturopala\/tree\/util\/ArrayTree$.html#branchesIndexListIterator(startIndex:Int,treeStructure:Int=>Int):Iterator[com.github.arturopala.tree.util.IntSlice]", "kind" : "final def"}, {"label" : "nodeIndexIterator", "tail" : "(startIndex: Int, treeStructure: (Int) => Int): Iterator[Int]", "member" : "com.github.arturopala.tree.util.ArrayTree.nodeIndexIterator", "link" : "com\/github\/arturopala\/tree\/util\/ArrayTree$.html#nodeIndexIterator(startIndex:Int,treeStructure:Int=>Int):Iterator[Int]", "kind" : "final def"}, {"label" : "treeSize", "tail" : "(index: Int, treeStructure: (Int) => Int): Int", "member" : "com.github.arturopala.tree.util.ArrayTree.treeSize", "link" : "com\/github\/arturopala\/tree\/util\/ArrayTree$.html#treeSize(index:Int,treeStructure:Int=>Int):Int", "kind" : "final def"}, {"label" : "parentIndex", "tail" : "(index: Int, size: Int, treeStructure: (Int) => Int): Int", "member" : "com.github.arturopala.tree.util.ArrayTree.parentIndex", "link" : "com\/github\/arturopala\/tree\/util\/ArrayTree$.html#parentIndex(index:Int,size:Int,treeStructure:Int=>Int):Int", "kind" : "final def"}, {"label" : "writeChildrenIndexes", "tail" : "(parentIndex: Int, treeStructure: (Int) => Int, buffer: IntBuffer, position: Int): Int", "member" : "com.github.arturopala.tree.util.ArrayTree.writeChildrenIndexes", "link" : "com\/github\/arturopala\/tree\/util\/ArrayTree$.html#writeChildrenIndexes(parentIndex:Int,treeStructure:Int=>Int,buffer:com.github.arturopala.tree.util.IntBuffer,position:Int):Int", "kind" : "final def"}, {"label" : "childrenIndexes", "tail" : "(parentIndex: Int, treeStructure: (Int) => Int): List[Int]", "member" : "com.github.arturopala.tree.util.ArrayTree.childrenIndexes", "link" : "com\/github\/arturopala\/tree\/util\/ArrayTree$.html#childrenIndexes(parentIndex:Int,treeStructure:Int=>Int):List[Int]", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/arturopala\/tree\/util\/ArrayTree$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/arturopala\/tree\/util\/ArrayTree$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/arturopala\/tree\/util\/ArrayTree$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/arturopala\/tree\/util\/ArrayTree$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/arturopala\/tree\/util\/ArrayTree$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/arturopala\/tree\/util\/ArrayTree$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/arturopala\/tree\/util\/ArrayTree$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/arturopala\/tree\/util\/ArrayTree$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/arturopala\/tree\/util\/ArrayTree$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/arturopala\/tree\/util\/ArrayTree$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/arturopala\/tree\/util\/ArrayTree$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/arturopala\/tree\/util\/ArrayTree$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/arturopala\/tree\/util\/ArrayTree$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/arturopala\/tree\/util\/ArrayTree$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/arturopala\/tree\/util\/ArrayTree$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/arturopala\/tree\/util\/ArrayTree$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/arturopala\/tree\/util\/ArrayTree$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/arturopala\/tree\/util\/ArrayTree$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/arturopala\/tree\/util\/ArrayTree$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.github.arturopala.tree.util.Compare", "shortDescription" : "Comparison and equality helpers", "object" : "com\/github\/arturopala\/tree\/util\/Compare$.html", "members_object" : [{"label" : "sameElements", "tail" : "(iterator1: Iterator[T], iterator2: Iterator[T]): Boolean", "member" : "com.github.arturopala.tree.util.Compare.sameElements", "link" : "com\/github\/arturopala\/tree\/util\/Compare$.html#sameElements[T](iterator1:Iterator[T],iterator2:Iterator[T]):Boolean", "kind" : "final def"}, {"label" : "sameTrees", "tail" : "(tree1: Tree[T], tree2: Tree[T]): Boolean", "member" : "com.github.arturopala.tree.util.Compare.sameTrees", "link" : "com\/github\/arturopala\/tree\/util\/Compare$.html#sameTrees[T](tree1:com.github.arturopala.tree.Tree[T],tree2:com.github.arturopala.tree.Tree[T]):Boolean", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/arturopala\/tree\/util\/Compare$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/arturopala\/tree\/util\/Compare$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/arturopala\/tree\/util\/Compare$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/arturopala\/tree\/util\/Compare$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/arturopala\/tree\/util\/Compare$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/arturopala\/tree\/util\/Compare$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/arturopala\/tree\/util\/Compare$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/arturopala\/tree\/util\/Compare$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/arturopala\/tree\/util\/Compare$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/arturopala\/tree\/util\/Compare$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/arturopala\/tree\/util\/Compare$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/arturopala\/tree\/util\/Compare$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/arturopala\/tree\/util\/Compare$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/arturopala\/tree\/util\/Compare$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/arturopala\/tree\/util\/Compare$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/arturopala\/tree\/util\/Compare$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/arturopala\/tree\/util\/Compare$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/arturopala\/tree\/util\/Compare$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/arturopala\/tree\/util\/Compare$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.github.arturopala.tree.util.IntBuffer", "shortDescription" : "Growable array of integers.", "members_class" : [{"label" : "toString", "tail" : "(): String", "member" : "com.github.arturopala.tree.util.IntBuffer.toString", "link" : "com\/github\/arturopala\/tree\/util\/IntBuffer.html#toString():String", "kind" : "def"}, {"label" : "reset", "tail" : "(): Int", "member" : "com.github.arturopala.tree.util.IntBuffer.reset", "link" : "com\/github\/arturopala\/tree\/util\/IntBuffer.html#reset:Int", "kind" : "def"}, {"label" : "nonEmpty", "tail" : "(): Boolean", "member" : "com.github.arturopala.tree.util.IntBuffer.nonEmpty", "link" : "com\/github\/arturopala\/tree\/util\/IntBuffer.html#nonEmpty:Boolean", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "com.github.arturopala.tree.util.IntBuffer.isEmpty", "link" : "com\/github\/arturopala\/tree\/util\/IntBuffer.html#isEmpty:Boolean", "kind" : "def"}, {"label" : "toSlice", "tail" : "(): IntSlice", "member" : "com.github.arturopala.tree.util.IntBuffer.toSlice", "link" : "com\/github\/arturopala\/tree\/util\/IntBuffer.html#toSlice:com.github.arturopala.tree.util.IntSlice", "kind" : "def"}, {"label" : "toArray", "tail" : "(): Array[Int]", "member" : "com.github.arturopala.tree.util.IntBuffer.toArray", "link" : "com\/github\/arturopala\/tree\/util\/IntBuffer.html#toArray:Array[Int]", "kind" : "def"}, {"label" : "length", "tail" : "(): Int", "member" : "com.github.arturopala.tree.util.IntBuffer.length", "link" : "com\/github\/arturopala\/tree\/util\/IntBuffer.html#length:Int", "kind" : "def"}, {"label" : "pop", "tail" : "(): Int", "member" : "com.github.arturopala.tree.util.IntBuffer.pop", "link" : "com\/github\/arturopala\/tree\/util\/IntBuffer.html#pop:Int", "kind" : "def"}, {"label" : "peek", "tail" : "(): Int", "member" : "com.github.arturopala.tree.util.IntBuffer.peek", "link" : "com\/github\/arturopala\/tree\/util\/IntBuffer.html#peek:Int", "kind" : "def"}, {"label" : "push", "tail" : "(value: Int): IntBuffer", "member" : "com.github.arturopala.tree.util.IntBuffer.push", "link" : "com\/github\/arturopala\/tree\/util\/IntBuffer.html#push(value:Int):com.github.arturopala.tree.util.IntBuffer", "kind" : "def"}, {"label" : "store", "tail" : "(value: Int): IntBuffer", "member" : "com.github.arturopala.tree.util.IntBuffer.store", "link" : "com\/github\/arturopala\/tree\/util\/IntBuffer.html#store(value:Int):com.github.arturopala.tree.util.IntBuffer", "kind" : "def"}, {"label" : "append", "tail" : "(value: Int): IntBuffer", "member" : "com.github.arturopala.tree.util.IntBuffer.append", "link" : "com\/github\/arturopala\/tree\/util\/IntBuffer.html#append(value:Int):com.github.arturopala.tree.util.IntBuffer", "kind" : "def"}, {"label" : "update", "tail" : "(index: Int, value: Int): Unit", "member" : "com.github.arturopala.tree.util.IntBuffer.update", "link" : "com\/github\/arturopala\/tree\/util\/IntBuffer.html#update(index:Int,value:Int):Unit", "kind" : "def"}, {"label" : "apply", "tail" : "(index: Int): Int", "member" : "com.github.arturopala.tree.util.IntBuffer.apply", "link" : "com\/github\/arturopala\/tree\/util\/IntBuffer.html#apply(index:Int):Int", "kind" : "def"}, {"member" : "com.github.arturopala.tree.util.IntBuffer#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/arturopala\/tree\/util\/IntBuffer.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/arturopala\/tree\/util\/IntBuffer.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/arturopala\/tree\/util\/IntBuffer.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/arturopala\/tree\/util\/IntBuffer.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/arturopala\/tree\/util\/IntBuffer.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/arturopala\/tree\/util\/IntBuffer.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/arturopala\/tree\/util\/IntBuffer.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/arturopala\/tree\/util\/IntBuffer.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/arturopala\/tree\/util\/IntBuffer.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/arturopala\/tree\/util\/IntBuffer.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/arturopala\/tree\/util\/IntBuffer.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/arturopala\/tree\/util\/IntBuffer.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/arturopala\/tree\/util\/IntBuffer.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/arturopala\/tree\/util\/IntBuffer.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/arturopala\/tree\/util\/IntBuffer.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/arturopala\/tree\/util\/IntBuffer.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/arturopala\/tree\/util\/IntBuffer.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/arturopala\/tree\/util\/IntBuffer.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "com\/github\/arturopala\/tree\/util\/IntBuffer.html", "kind" : "class"}, {"name" : "com.github.arturopala.tree.util.IntSlice", "shortDescription" : "Lazy slice of the array of integers.", "object" : "com\/github\/arturopala\/tree\/util\/IntSlice$.html", "members_class" : [{"label" : "hashCode", "tail" : "(): Int", "member" : "com.github.arturopala.tree.util.IntSlice.hashCode", "link" : "com\/github\/arturopala\/tree\/util\/IntSlice.html#hashCode():Int", "kind" : "def"}, {"label" : "equals", "tail" : "(obj: Any): Boolean", "member" : "com.github.arturopala.tree.util.IntSlice.equals", "link" : "com\/github\/arturopala\/tree\/util\/IntSlice.html#equals(obj:Any):Boolean", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "com.github.arturopala.tree.util.IntSlice.toString", "link" : "com\/github\/arturopala\/tree\/util\/IntSlice.html#toString():String", "kind" : "def"}, {"label" : "toList", "tail" : "(): List[Int]", "member" : "com.github.arturopala.tree.util.IntSlice.toList", "link" : "com\/github\/arturopala\/tree\/util\/IntSlice.html#toList:List[Int]", "kind" : "def"}, {"label" : "toArray", "tail" : "(tag: ClassTag[Int]): Array[Int]", "member" : "com.github.arturopala.tree.util.IntSlice.toArray", "link" : "com\/github\/arturopala\/tree\/util\/IntSlice.html#toArray(implicittag:scala.reflect.ClassTag[Int]):Array[Int]", "kind" : "def"}, {"label" : "reverseIterator", "tail" : "(pred: (Int) => Boolean): Iterator[Int]", "member" : "com.github.arturopala.tree.util.IntSlice.reverseIterator", "link" : "com\/github\/arturopala\/tree\/util\/IntSlice.html#reverseIterator(pred:Int=>Boolean):Iterator[Int]", "kind" : "def"}, {"label" : "reverseIterator", "tail" : "(): Iterator[Int]", "member" : "com.github.arturopala.tree.util.IntSlice.reverseIterator", "link" : "com\/github\/arturopala\/tree\/util\/IntSlice.html#reverseIterator:Iterator[Int]", "kind" : "def"}, {"label" : "iterator", "tail" : "(): Iterator[Int]", "member" : "com.github.arturopala.tree.util.IntSlice.iterator", "link" : "com\/github\/arturopala\/tree\/util\/IntSlice.html#iterator:Iterator[Int]", "kind" : "def"}, {"label" : "dropRight", "tail" : "(n: Int): IntSlice", "member" : "com.github.arturopala.tree.util.IntSlice.dropRight", "link" : "com\/github\/arturopala\/tree\/util\/IntSlice.html#dropRight(n:Int):com.github.arturopala.tree.util.IntSlice", "kind" : "def"}, {"label" : "drop", "tail" : "(n: Int): IntSlice", "member" : "com.github.arturopala.tree.util.IntSlice.drop", "link" : "com\/github\/arturopala\/tree\/util\/IntSlice.html#drop(n:Int):com.github.arturopala.tree.util.IntSlice", "kind" : "def"}, {"label" : "takeRight", "tail" : "(n: Int): IntSlice", "member" : "com.github.arturopala.tree.util.IntSlice.takeRight", "link" : "com\/github\/arturopala\/tree\/util\/IntSlice.html#takeRight(n:Int):com.github.arturopala.tree.util.IntSlice", "kind" : "def"}, {"label" : "take", "tail" : "(n: Int): IntSlice", "member" : "com.github.arturopala.tree.util.IntSlice.take", "link" : "com\/github\/arturopala\/tree\/util\/IntSlice.html#take(n:Int):com.github.arturopala.tree.util.IntSlice", "kind" : "def"}, {"label" : "slice", "tail" : "(from: Int, to: Int): IntSlice", "member" : "com.github.arturopala.tree.util.IntSlice.slice", "link" : "com\/github\/arturopala\/tree\/util\/IntSlice.html#slice(from:Int,to:Int):com.github.arturopala.tree.util.IntSlice", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "com.github.arturopala.tree.util.IntSlice.isEmpty", "link" : "com\/github\/arturopala\/tree\/util\/IntSlice.html#isEmpty:Boolean", "kind" : "def"}, {"label" : "count", "tail" : "(pred: (Int) => Boolean): Int", "member" : "com.github.arturopala.tree.util.IntSlice.count", "link" : "com\/github\/arturopala\/tree\/util\/IntSlice.html#count(pred:Int=>Boolean):Int", "kind" : "def"}, {"label" : "map", "tail" : "(f: (Int) => B)(tag: ClassTag[B]): Slice[B]", "member" : "com.github.arturopala.tree.util.IntSlice.map", "link" : "com\/github\/arturopala\/tree\/util\/IntSlice.html#map[B](f:Int=>B)(implicittag:scala.reflect.ClassTag[B]):com.github.arturopala.tree.util.Slice[B]", "kind" : "def"}, {"label" : "update", "tail" : "(index: Int, value: Int): IntSlice", "member" : "com.github.arturopala.tree.util.IntSlice.update", "link" : "com\/github\/arturopala\/tree\/util\/IntSlice.html#update(index:Int,value:Int):com.github.arturopala.tree.util.IntSlice", "kind" : "def"}, {"label" : "apply", "tail" : "(index: Int): Int", "member" : "com.github.arturopala.tree.util.IntSlice.apply", "link" : "com\/github\/arturopala\/tree\/util\/IntSlice.html#apply(index:Int):Int", "kind" : "def"}, {"label" : "length", "tail" : ": Int", "member" : "com.github.arturopala.tree.util.IntSlice.length", "link" : "com\/github\/arturopala\/tree\/util\/IntSlice.html#length:Int", "kind" : "val"}, {"label" : "andThen", "tail" : "(g: (Int) => A): (Int) => A", "member" : "scala.Function1.andThen", "link" : "com\/github\/arturopala\/tree\/util\/IntSlice.html#andThen[A](g:R=>A):T1=>A", "kind" : "def"}, {"label" : "compose", "tail" : "(g: (A) => Int): (A) => Int", "member" : "scala.Function1.compose", "link" : "com\/github\/arturopala\/tree\/util\/IntSlice.html#compose[A](g:A=>T1):A=>R", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/arturopala\/tree\/util\/IntSlice.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/arturopala\/tree\/util\/IntSlice.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/arturopala\/tree\/util\/IntSlice.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/arturopala\/tree\/util\/IntSlice.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/arturopala\/tree\/util\/IntSlice.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/arturopala\/tree\/util\/IntSlice.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/arturopala\/tree\/util\/IntSlice.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/arturopala\/tree\/util\/IntSlice.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/arturopala\/tree\/util\/IntSlice.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/arturopala\/tree\/util\/IntSlice.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/arturopala\/tree\/util\/IntSlice.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/arturopala\/tree\/util\/IntSlice.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/arturopala\/tree\/util\/IntSlice.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/arturopala\/tree\/util\/IntSlice.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/arturopala\/tree\/util\/IntSlice.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/arturopala\/tree\/util\/IntSlice.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "empty", "tail" : "(): IntSlice", "member" : "com.github.arturopala.tree.util.IntSlice.empty", "link" : "com\/github\/arturopala\/tree\/util\/IntSlice$.html#empty:com.github.arturopala.tree.util.IntSlice", "kind" : "def"}, {"label" : "of", "tail" : "(array: Array[Int], from: Int, to: Int): IntSlice", "member" : "com.github.arturopala.tree.util.IntSlice.of", "link" : "com\/github\/arturopala\/tree\/util\/IntSlice$.html#of(array:Array[Int],from:Int,to:Int):com.github.arturopala.tree.util.IntSlice", "kind" : "def"}, {"label" : "of", "tail" : "(array: Array[Int]): IntSlice", "member" : "com.github.arturopala.tree.util.IntSlice.of", "link" : "com\/github\/arturopala\/tree\/util\/IntSlice$.html#of(array:Array[Int]):com.github.arturopala.tree.util.IntSlice", "kind" : "def"}, {"label" : "apply", "tail" : "(is: Int*): IntSlice", "member" : "com.github.arturopala.tree.util.IntSlice.apply", "link" : "com\/github\/arturopala\/tree\/util\/IntSlice$.html#apply(is:Int*):com.github.arturopala.tree.util.IntSlice", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/arturopala\/tree\/util\/IntSlice$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/arturopala\/tree\/util\/IntSlice$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/arturopala\/tree\/util\/IntSlice$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/arturopala\/tree\/util\/IntSlice$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/arturopala\/tree\/util\/IntSlice$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/arturopala\/tree\/util\/IntSlice$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/arturopala\/tree\/util\/IntSlice$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/arturopala\/tree\/util\/IntSlice$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/arturopala\/tree\/util\/IntSlice$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/arturopala\/tree\/util\/IntSlice$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/arturopala\/tree\/util\/IntSlice$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/arturopala\/tree\/util\/IntSlice$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/arturopala\/tree\/util\/IntSlice$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/arturopala\/tree\/util\/IntSlice$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/arturopala\/tree\/util\/IntSlice$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/arturopala\/tree\/util\/IntSlice$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/arturopala\/tree\/util\/IntSlice$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/arturopala\/tree\/util\/IntSlice$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/arturopala\/tree\/util\/IntSlice$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "com\/github\/arturopala\/tree\/util\/IntSlice.html", "kind" : "class"}, {"name" : "com.github.arturopala.tree.util.MapFilterIterator", "shortDescription" : "Iterator over the mapped items fulfilling the predicate.", "members_class" : [{"label" : "GroupedIterator", "tail" : "", "member" : "scala.collection.Iterator.GroupedIterator", "link" : "com\/github\/arturopala\/tree\/util\/MapFilterIterator.html#GroupedIterator[B<:<?>]extendsAbstractIterator[Seq[B]]", "kind" : "class"}, {"label" : "seekNext", "tail" : "(): B", "member" : "com.github.arturopala.tree.util.MapFilterIterator.seekNext", "link" : "com\/github\/arturopala\/tree\/util\/MapFilterIterator.html#seekNext:B", "kind" : "def"}, {"label" : "next", "tail" : "(): B", "member" : "com.github.arturopala.tree.util.MapFilterIterator.next", "link" : "com\/github\/arturopala\/tree\/util\/MapFilterIterator.html#next():B", "kind" : "def"}, {"label" : "v", "tail" : ": B", "member" : "com.github.arturopala.tree.util.MapFilterIterator.v", "link" : "com\/github\/arturopala\/tree\/util\/MapFilterIterator.html#v:B", "kind" : "var"}, {"label" : "hasNext", "tail" : ": Boolean", "member" : "com.github.arturopala.tree.util.MapFilterIterator.hasNext", "link" : "com\/github\/arturopala\/tree\/util\/MapFilterIterator.html#hasNext:Boolean", "kind" : "var"}, {"member" : "com.github.arturopala.tree.util.MapFilterIterator#<init>", "error" : "unsupported entity"}, {"label" : "seq", "tail" : "(): MapFilterIterator.this.type", "member" : "scala.collection.Iterator.seq", "link" : "com\/github\/arturopala\/tree\/util\/MapFilterIterator.html#seq:Iterator.this.type", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.collection.Iterator.toString", "link" : "com\/github\/arturopala\/tree\/util\/MapFilterIterator.html#toString():String", "kind" : "def"}, {"label" : "tapEach", "tail" : "(f: (B) => U): Iterator[B]", "member" : "scala.collection.Iterator.tapEach", "link" : "com\/github\/arturopala\/tree\/util\/MapFilterIterator.html#tapEach[U](f:A=>U):Iterator[A]", "kind" : "def"}, {"label" : "patch", "tail" : "(from: Int, patchElems: Iterator[B], replaced: Int): Iterator[B]", "member" : "scala.collection.Iterator.patch", "link" : "com\/github\/arturopala\/tree\/util\/MapFilterIterator.html#patch[B>:A](from:Int,patchElems:Iterator[B],replaced:Int):Iterator[B]", "kind" : "def"}, {"label" : "duplicate", "tail" : "(): (Iterator[B], Iterator[B])", "member" : "scala.collection.Iterator.duplicate", "link" : "com\/github\/arturopala\/tree\/util\/MapFilterIterator.html#duplicate:(Iterator[A],Iterator[A])", "kind" : "def"}, {"label" : "sameElements", "tail" : "(that: IterableOnce[B]): Boolean", "member" : "scala.collection.Iterator.sameElements", "link" : "com\/github\/arturopala\/tree\/util\/MapFilterIterator.html#sameElements[B>:A](that:scala.collection.IterableOnce[B]):Boolean", "kind" : "def"}, {"label" : "zipWithIndex", "tail" : "(): Iterator[(B, Int)]", "member" : "scala.collection.Iterator.zipWithIndex", "link" : "com\/github\/arturopala\/tree\/util\/MapFilterIterator.html#zipWithIndex:Iterator[(A,Int)]", "kind" : "def"}, {"label" : "zipAll", "tail" : "(that: IterableOnce[B], thisElem: A1, thatElem: B): Iterator[(A1, B)]", "member" : "scala.collection.Iterator.zipAll", "link" : "com\/github\/arturopala\/tree\/util\/MapFilterIterator.html#zipAll[A1>:A,B](that:scala.collection.IterableOnce[B],thisElem:A1,thatElem:B):Iterator[(A1,B)]", "kind" : "def"}, {"label" : "zip", "tail" : "(that: IterableOnce[B]): Iterator[(B, B)]", "member" : "scala.collection.Iterator.zip", "link" : "com\/github\/arturopala\/tree\/util\/MapFilterIterator.html#zip[B](that:scala.collection.IterableOnce[B]):Iterator[(A,B)]", "kind" : "def"}, {"label" : "sliceIterator", "tail" : "(from: Int, until: Int): Iterator[B]", "member" : "scala.collection.Iterator.sliceIterator", "link" : "com\/github\/arturopala\/tree\/util\/MapFilterIterator.html#sliceIterator(from:Int,until:Int):Iterator[A]", "kind" : "def"}, {"label" : "slice", "tail" : "(from: Int, until: Int): Iterator[B]", "member" : "scala.collection.Iterator.slice", "link" : "com\/github\/arturopala\/tree\/util\/MapFilterIterator.html#slice(from:Int,until:Int):Iterator[A]", "kind" : "def"}, {"label" : "span", "tail" : "(p: (B) => Boolean): (Iterator[B], Iterator[B])", "member" : "scala.collection.Iterator.span", "link" : "com\/github\/arturopala\/tree\/util\/MapFilterIterator.html#span(p:A=>Boolean):(Iterator[A],Iterator[A])", "kind" : "def"}, {"label" : "dropWhile", "tail" : "(p: (B) => Boolean): Iterator[B]", "member" : "scala.collection.Iterator.dropWhile", "link" : "com\/github\/arturopala\/tree\/util\/MapFilterIterator.html#dropWhile(p:A=>Boolean):Iterator[A]", "kind" : "def"}, {"label" : "drop", "tail" : "(n: Int): Iterator[B]", "member" : "scala.collection.Iterator.drop", "link" : "com\/github\/arturopala\/tree\/util\/MapFilterIterator.html#drop(n:Int):Iterator[A]", "kind" : "def"}, {"label" : "takeWhile", "tail" : "(p: (B) => Boolean): Iterator[B]", "member" : "scala.collection.Iterator.takeWhile", "link" : "com\/github\/arturopala\/tree\/util\/MapFilterIterator.html#takeWhile(p:A=>Boolean):Iterator[A]", "kind" : "def"}, {"label" : "take", "tail" : "(n: Int): Iterator[B]", "member" : "scala.collection.Iterator.take", "link" : "com\/github\/arturopala\/tree\/util\/MapFilterIterator.html#take(n:Int):Iterator[A]", "kind" : "def"}, {"label" : "++", "tail" : "(xs: => IterableOnce[B]): Iterator[B]", "member" : "scala.collection.Iterator.++", "link" : "com\/github\/arturopala\/tree\/util\/MapFilterIterator.html#++[B>:A](xs:=>scala.collection.IterableOnce[B]):Iterator[B]", "kind" : "final def"}, {"label" : "concat", "tail" : "(xs: => IterableOnce[B]): Iterator[B]", "member" : "scala.collection.Iterator.concat", "link" : "com\/github\/arturopala\/tree\/util\/MapFilterIterator.html#concat[B>:A](xs:=>scala.collection.IterableOnce[B]):Iterator[B]", "kind" : "def"}, {"label" : "flatten", "tail" : "(ev: (B) => IterableOnce[B]): Iterator[B]", "member" : "scala.collection.Iterator.flatten", "link" : "com\/github\/arturopala\/tree\/util\/MapFilterIterator.html#flatten[B](implicitev:A=>scala.collection.IterableOnce[B]):Iterator[B]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (B) => IterableOnce[B]): Iterator[B]", "member" : "scala.collection.Iterator.flatMap", "link" : "com\/github\/arturopala\/tree\/util\/MapFilterIterator.html#flatMap[B](f:A=>scala.collection.IterableOnce[B]):Iterator[B]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (B) => B): Iterator[B]", "member" : "scala.collection.Iterator.map", "link" : "com\/github\/arturopala\/tree\/util\/MapFilterIterator.html#map[B](f:A=>B):Iterator[B]", "kind" : "def"}, {"label" : "distinctBy", "tail" : "(f: (B) => B): Iterator[B]", "member" : "scala.collection.Iterator.distinctBy", "link" : "com\/github\/arturopala\/tree\/util\/MapFilterIterator.html#distinctBy[B](f:A=>B):Iterator[A]", "kind" : "def"}, {"label" : "distinct", "tail" : "(): Iterator[B]", "member" : "scala.collection.Iterator.distinct", "link" : "com\/github\/arturopala\/tree\/util\/MapFilterIterator.html#distinct:Iterator[A]", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[B, B]): Iterator[B]", "member" : "scala.collection.Iterator.collect", "link" : "com\/github\/arturopala\/tree\/util\/MapFilterIterator.html#collect[B](pf:PartialFunction[A,B]):Iterator[B]", "kind" : "def"}, {"label" : "withFilter", "tail" : "(p: (B) => Boolean): Iterator[B]", "member" : "scala.collection.Iterator.withFilter", "link" : "com\/github\/arturopala\/tree\/util\/MapFilterIterator.html#withFilter(p:A=>Boolean):Iterator[A]", "kind" : "def"}, {"label" : "filterNot", "tail" : "(p: (B) => Boolean): Iterator[B]", "member" : "scala.collection.Iterator.filterNot", "link" : "com\/github\/arturopala\/tree\/util\/MapFilterIterator.html#filterNot(p:A=>Boolean):Iterator[A]", "kind" : "def"}, {"label" : "filter", "tail" : "(p: (B) => Boolean): Iterator[B]", "member" : "scala.collection.Iterator.filter", "link" : "com\/github\/arturopala\/tree\/util\/MapFilterIterator.html#filter(p:A=>Boolean):Iterator[A]", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "scala.collection.Iterator.isEmpty", "link" : "com\/github\/arturopala\/tree\/util\/MapFilterIterator.html#isEmpty:Boolean", "kind" : "def"}, {"label" : "length", "tail" : "(): Int", "member" : "scala.collection.Iterator.length", "link" : "com\/github\/arturopala\/tree\/util\/MapFilterIterator.html#length:Int", "kind" : "final def"}, {"label" : "indexOf", "tail" : "(elem: B, from: Int): Int", "member" : "scala.collection.Iterator.indexOf", "link" : "com\/github\/arturopala\/tree\/util\/MapFilterIterator.html#indexOf[B>:A](elem:B,from:Int):Int", "kind" : "def"}, {"label" : "indexOf", "tail" : "(elem: B): Int", "member" : "scala.collection.Iterator.indexOf", "link" : "com\/github\/arturopala\/tree\/util\/MapFilterIterator.html#indexOf[B>:A](elem:B):Int", "kind" : "def"}, {"label" : "indexWhere", "tail" : "(p: (B) => Boolean, from: Int): Int", "member" : "scala.collection.Iterator.indexWhere", "link" : "com\/github\/arturopala\/tree\/util\/MapFilterIterator.html#indexWhere(p:A=>Boolean,from:Int):Int", "kind" : "def"}, {"label" : "scanRight", "tail" : "(z: B)(op: (B, B) => B): Iterator[B]", "member" : "scala.collection.Iterator.scanRight", "link" : "com\/github\/arturopala\/tree\/util\/MapFilterIterator.html#scanRight[B](z:B)(op:(A,B)=>B):Iterator[B]", "kind" : "def"}, {"label" : "scanLeft", "tail" : "(z: B)(op: (B, B) => B): Iterator[B]", "member" : "scala.collection.Iterator.scanLeft", "link" : "com\/github\/arturopala\/tree\/util\/MapFilterIterator.html#scanLeft[B](z:B)(op:(B,A)=>B):Iterator[B]", "kind" : "def"}, {"label" : "sliding", "tail" : "(size: Int, step: Int): GroupedIterator[B]", "member" : "scala.collection.Iterator.sliding", "link" : "com\/github\/arturopala\/tree\/util\/MapFilterIterator.html#sliding[B>:A](size:Int,step:Int):Iterator.this.GroupedIterator[B]", "kind" : "def"}, {"label" : "grouped", "tail" : "(size: Int): GroupedIterator[B]", "member" : "scala.collection.Iterator.grouped", "link" : "com\/github\/arturopala\/tree\/util\/MapFilterIterator.html#grouped[B>:A](size:Int):Iterator.this.GroupedIterator[B]", "kind" : "def"}, {"label" : "partition", "tail" : "(p: (B) => Boolean): (Iterator[B], Iterator[B])", "member" : "scala.collection.Iterator.partition", "link" : "com\/github\/arturopala\/tree\/util\/MapFilterIterator.html#partition(p:A=>Boolean):(Iterator[A],Iterator[A])", "kind" : "def"}, {"label" : "padTo", "tail" : "(len: Int, elem: B): Iterator[B]", "member" : "scala.collection.Iterator.padTo", "link" : "com\/github\/arturopala\/tree\/util\/MapFilterIterator.html#padTo[B>:A](len:Int,elem:B):Iterator[B]", "kind" : "def"}, {"label" : "buffered", "tail" : "(): BufferedIterator[B]", "member" : "scala.collection.Iterator.buffered", "link" : "com\/github\/arturopala\/tree\/util\/MapFilterIterator.html#buffered:scala.collection.BufferedIterator[A]", "kind" : "def"}, {"label" : "contains", "tail" : "(elem: Any): Boolean", "member" : "scala.collection.Iterator.contains", "link" : "com\/github\/arturopala\/tree\/util\/MapFilterIterator.html#contains(elem:Any):Boolean", "kind" : "def"}, {"label" : "nextOption", "tail" : "(): Option[B]", "member" : "scala.collection.Iterator.nextOption", "link" : "com\/github\/arturopala\/tree\/util\/MapFilterIterator.html#nextOption():Option[A]", "kind" : "def"}, {"label" : "iterator", "tail" : "(): Iterator[B]", "member" : "scala.collection.Iterator.iterator", "link" : "com\/github\/arturopala\/tree\/util\/MapFilterIterator.html#iterator:Iterator[A]", "kind" : "final def"}, {"label" : "hasDefiniteSize", "tail" : "(): Boolean", "member" : "scala.collection.Iterator.hasDefiniteSize", "link" : "com\/github\/arturopala\/tree\/util\/MapFilterIterator.html#hasDefiniteSize:Boolean", "kind" : "final def"}, {"label" : "reversed", "tail" : "(): Iterable[B]", "member" : "scala.collection.IterableOnceOps.reversed", "link" : "com\/github\/arturopala\/tree\/util\/MapFilterIterator.html#reversed:Iterable[A]", "kind" : "def"}, {"label" : "toArray", "tail" : "(arg0: ClassTag[B]): Array[B]", "member" : "scala.collection.IterableOnceOps.toArray", "link" : "com\/github\/arturopala\/tree\/util\/MapFilterIterator.html#toArray[B>:A](implicitevidence$2:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "toBuffer", "tail" : "(): Buffer[B]", "member" : "scala.collection.IterableOnceOps.toBuffer", "link" : "com\/github\/arturopala\/tree\/util\/MapFilterIterator.html#toBuffer[B>:A]:scala.collection.mutable.Buffer[B]", "kind" : "final def"}, {"label" : "toStream", "tail" : "(): Stream[B]", "member" : "scala.collection.IterableOnceOps.toStream", "link" : "com\/github\/arturopala\/tree\/util\/MapFilterIterator.html#toStream:scala.collection.immutable.Stream[A]", "kind" : "final def"}, {"label" : "toIndexedSeq", "tail" : "(): IndexedSeq[B]", "member" : "scala.collection.IterableOnceOps.toIndexedSeq", "link" : "com\/github\/arturopala\/tree\/util\/MapFilterIterator.html#toIndexedSeq:IndexedSeq[A]", "kind" : "def"}, {"label" : "toSeq", "tail" : "(): Seq[B]", "member" : "scala.collection.IterableOnceOps.toSeq", "link" : "com\/github\/arturopala\/tree\/util\/MapFilterIterator.html#toSeq:Seq[A]", "kind" : "def"}, {"label" : "toSet", "tail" : "(): Set[B]", "member" : "scala.collection.IterableOnceOps.toSet", "link" : "com\/github\/arturopala\/tree\/util\/MapFilterIterator.html#toSet[B>:A]:scala.collection.immutable.Set[B]", "kind" : "def"}, {"label" : "toMap", "tail" : "(ev: <:<[B, (K, V)]): Map[K, V]", "member" : "scala.collection.IterableOnceOps.toMap", "link" : "com\/github\/arturopala\/tree\/util\/MapFilterIterator.html#toMap[K,V](implicitev:A<:<(K,V)):scala.collection.immutable.Map[K,V]", "kind" : "def"}, {"label" : "toVector", "tail" : "(): Vector[B]", "member" : "scala.collection.IterableOnceOps.toVector", "link" : "com\/github\/arturopala\/tree\/util\/MapFilterIterator.html#toVector:scala.collection.immutable.Vector[A]", "kind" : "def"}, {"label" : "toList", "tail" : "(): List[B]", "member" : "scala.collection.IterableOnceOps.toList", "link" : "com\/github\/arturopala\/tree\/util\/MapFilterIterator.html#toList:List[A]", "kind" : "def"}, {"label" : "toIterator", "tail" : "(): Iterator[B]", "member" : "scala.collection.IterableOnceOps.toIterator", "link" : "com\/github\/arturopala\/tree\/util\/MapFilterIterator.html#toIterator:Iterator[A]", "kind" : "final def"}, {"label" : "to", "tail" : "(factory: Factory[B, C1]): C1", "member" : "scala.collection.IterableOnceOps.to", "link" : "com\/github\/arturopala\/tree\/util\/MapFilterIterator.html#to[C1](factory:scala.collection.Factory[A,C1]):C1", "kind" : "def"}, {"label" : "addString", "tail" : "(b: StringBuilder): StringBuilder", "member" : "scala.collection.IterableOnceOps.addString", "link" : "com\/github\/arturopala\/tree\/util\/MapFilterIterator.html#addString(b:StringBuilder):StringBuilder", "kind" : "final def"}, {"label" : "addString", "tail" : "(b: StringBuilder, sep: String): StringBuilder", "member" : "scala.collection.IterableOnceOps.addString", "link" : "com\/github\/arturopala\/tree\/util\/MapFilterIterator.html#addString(b:StringBuilder,sep:String):StringBuilder", "kind" : "final def"}, {"label" : "addString", "tail" : "(b: StringBuilder, start: String, sep: String, end: String): StringBuilder", "member" : "scala.collection.IterableOnceOps.addString", "link" : "com\/github\/arturopala\/tree\/util\/MapFilterIterator.html#addString(b:StringBuilder,start:String,sep:String,end:String):StringBuilder", "kind" : "def"}, {"label" : "mkString", "tail" : "(): String", "member" : "scala.collection.IterableOnceOps.mkString", "link" : "com\/github\/arturopala\/tree\/util\/MapFilterIterator.html#mkString:String", "kind" : "final def"}, {"label" : "mkString", "tail" : "(sep: String): String", "member" : "scala.collection.IterableOnceOps.mkString", "link" : "com\/github\/arturopala\/tree\/util\/MapFilterIterator.html#mkString(sep:String):String", "kind" : "final def"}, {"label" : "mkString", "tail" : "(start: String, sep: String, end: String): String", "member" : "scala.collection.IterableOnceOps.mkString", "link" : "com\/github\/arturopala\/tree\/util\/MapFilterIterator.html#mkString(start:String,sep:String,end:String):String", "kind" : "final def"}, {"label" : "corresponds", "tail" : "(that: IterableOnce[B])(p: (B, B) => Boolean): Boolean", "member" : "scala.collection.IterableOnceOps.corresponds", "link" : "com\/github\/arturopala\/tree\/util\/MapFilterIterator.html#corresponds[B](that:scala.collection.IterableOnce[B])(p:(A,B)=>Boolean):Boolean", "kind" : "def"}, {"label" : "aggregate", "tail" : "(z: => B)(seqop: (B, B) => B, combop: (B, B) => B): B", "member" : "scala.collection.IterableOnceOps.aggregate", "link" : "com\/github\/arturopala\/tree\/util\/MapFilterIterator.html#aggregate[B](z:=>B)(seqop:(B,A)=>B,combop:(B,B)=>B):B", "kind" : "def"}, {"label" : "collectFirst", "tail" : "(pf: PartialFunction[B, B]): Option[B]", "member" : "scala.collection.IterableOnceOps.collectFirst", "link" : "com\/github\/arturopala\/tree\/util\/MapFilterIterator.html#collectFirst[B](pf:PartialFunction[A,B]):Option[B]", "kind" : "def"}, {"label" : "minByOption", "tail" : "(f: (B) => B)(cmp: Ordering[B]): Option[B]", "member" : "scala.collection.IterableOnceOps.minByOption", "link" : "com\/github\/arturopala\/tree\/util\/MapFilterIterator.html#minByOption[B](f:A=>B)(implicitcmp:scala.math.Ordering[B]):Option[A]", "kind" : "def"}, {"label" : "minBy", "tail" : "(f: (B) => B)(cmp: Ordering[B]): B", "member" : "scala.collection.IterableOnceOps.minBy", "link" : "com\/github\/arturopala\/tree\/util\/MapFilterIterator.html#minBy[B](f:A=>B)(implicitcmp:scala.math.Ordering[B]):A", "kind" : "def"}, {"label" : "maxByOption", "tail" : "(f: (B) => B)(cmp: Ordering[B]): Option[B]", "member" : "scala.collection.IterableOnceOps.maxByOption", "link" : "com\/github\/arturopala\/tree\/util\/MapFilterIterator.html#maxByOption[B](f:A=>B)(implicitcmp:scala.math.Ordering[B]):Option[A]", "kind" : "def"}, {"label" : "maxBy", "tail" : "(f: (B) => B)(cmp: Ordering[B]): B", "member" : "scala.collection.IterableOnceOps.maxBy", "link" : "com\/github\/arturopala\/tree\/util\/MapFilterIterator.html#maxBy[B](f:A=>B)(implicitcmp:scala.math.Ordering[B]):A", "kind" : "def"}, {"label" : "maxOption", "tail" : "(ord: Ordering[B]): Option[B]", "member" : "scala.collection.IterableOnceOps.maxOption", "link" : "com\/github\/arturopala\/tree\/util\/MapFilterIterator.html#maxOption[B>:A](implicitord:scala.math.Ordering[B]):Option[A]", "kind" : "def"}, {"label" : "max", "tail" : "(ord: Ordering[B]): B", "member" : "scala.collection.IterableOnceOps.max", "link" : "com\/github\/arturopala\/tree\/util\/MapFilterIterator.html#max[B>:A](implicitord:scala.math.Ordering[B]):A", "kind" : "def"}, {"label" : "minOption", "tail" : "(ord: Ordering[B]): Option[B]", "member" : "scala.collection.IterableOnceOps.minOption", "link" : "com\/github\/arturopala\/tree\/util\/MapFilterIterator.html#minOption[B>:A](implicitord:scala.math.Ordering[B]):Option[A]", "kind" : "def"}, {"label" : "min", "tail" : "(ord: Ordering[B]): B", "member" : "scala.collection.IterableOnceOps.min", "link" : "com\/github\/arturopala\/tree\/util\/MapFilterIterator.html#min[B>:A](implicitord:scala.math.Ordering[B]):A", "kind" : "def"}, {"label" : "product", "tail" : "(num: Numeric[B]): B", "member" : "scala.collection.IterableOnceOps.product", "link" : "com\/github\/arturopala\/tree\/util\/MapFilterIterator.html#product[B>:A](implicitnum:scala.math.Numeric[B]):B", "kind" : "def"}, {"label" : "sum", "tail" : "(num: Numeric[B]): B", "member" : "scala.collection.IterableOnceOps.sum", "link" : "com\/github\/arturopala\/tree\/util\/MapFilterIterator.html#sum[B>:A](implicitnum:scala.math.Numeric[B]):B", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B], start: Int, len: Int): Int", "member" : "scala.collection.IterableOnceOps.copyToArray", "link" : "com\/github\/arturopala\/tree\/util\/MapFilterIterator.html#copyToArray[B>:A](xs:Array[B],start:Int,len:Int):Int", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B], start: Int): Int", "member" : "scala.collection.IterableOnceOps.copyToArray", "link" : "com\/github\/arturopala\/tree\/util\/MapFilterIterator.html#copyToArray[B>:A](xs:Array[B],start:Int):Int", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B]): Int", "member" : "scala.collection.IterableOnceOps.copyToArray", "link" : "com\/github\/arturopala\/tree\/util\/MapFilterIterator.html#copyToArray[B>:A](xs:Array[B]):Int", "kind" : "def"}, {"label" : "copyToBuffer", "tail" : "(dest: Buffer[B]): Unit", "member" : "scala.collection.IterableOnceOps.copyToBuffer", "link" : "com\/github\/arturopala\/tree\/util\/MapFilterIterator.html#copyToBuffer[B>:A](dest:scala.collection.mutable.Buffer[B]):Unit", "kind" : "final def"}, {"label" : "size", "tail" : "(): Int", "member" : "scala.collection.IterableOnceOps.size", "link" : "com\/github\/arturopala\/tree\/util\/MapFilterIterator.html#size:Int", "kind" : "def"}, {"label" : "nonEmpty", "tail" : "(): Boolean", "member" : "scala.collection.IterableOnceOps.nonEmpty", "link" : "com\/github\/arturopala\/tree\/util\/MapFilterIterator.html#nonEmpty:Boolean", "kind" : "def"}, {"label" : "reduceRightOption", "tail" : "(op: (B, B) => B): Option[B]", "member" : "scala.collection.IterableOnceOps.reduceRightOption", "link" : "com\/github\/arturopala\/tree\/util\/MapFilterIterator.html#reduceRightOption[B>:A](op:(A,B)=>B):Option[B]", "kind" : "def"}, {"label" : "reduceLeftOption", "tail" : "(op: (B, B) => B): Option[B]", "member" : "scala.collection.IterableOnceOps.reduceLeftOption", "link" : "com\/github\/arturopala\/tree\/util\/MapFilterIterator.html#reduceLeftOption[B>:A](op:(B,A)=>B):Option[B]", "kind" : "def"}, {"label" : "reduceRight", "tail" : "(op: (B, B) => B): B", "member" : "scala.collection.IterableOnceOps.reduceRight", "link" : "com\/github\/arturopala\/tree\/util\/MapFilterIterator.html#reduceRight[B>:A](op:(A,B)=>B):B", "kind" : "def"}, {"label" : "reduceLeft", "tail" : "(op: (B, B) => B): B", "member" : "scala.collection.IterableOnceOps.reduceLeft", "link" : "com\/github\/arturopala\/tree\/util\/MapFilterIterator.html#reduceLeft[B>:A](op:(B,A)=>B):B", "kind" : "def"}, {"label" : "reduceOption", "tail" : "(op: (B, B) => B): Option[B]", "member" : "scala.collection.IterableOnceOps.reduceOption", "link" : "com\/github\/arturopala\/tree\/util\/MapFilterIterator.html#reduceOption[B>:A](op:(B,B)=>B):Option[B]", "kind" : "def"}, {"label" : "reduce", "tail" : "(op: (B, B) => B): B", "member" : "scala.collection.IterableOnceOps.reduce", "link" : "com\/github\/arturopala\/tree\/util\/MapFilterIterator.html#reduce[B>:A](op:(B,B)=>B):B", "kind" : "def"}, {"label" : "fold", "tail" : "(z: A1)(op: (A1, A1) => A1): A1", "member" : "scala.collection.IterableOnceOps.fold", "link" : "com\/github\/arturopala\/tree\/util\/MapFilterIterator.html#fold[A1>:A](z:A1)(op:(A1,A1)=>A1):A1", "kind" : "def"}, {"label" : ":\\", "tail" : "(z: B)(op: (B, B) => B): B", "member" : "scala.collection.IterableOnceOps.:\\", "link" : "com\/github\/arturopala\/tree\/util\/MapFilterIterator.html#:\\[B](z:B)(op:(A,B)=>B):B", "kind" : "final def"}, {"label" : "\/:", "tail" : "(z: B)(op: (B, B) => B): B", "member" : "scala.collection.IterableOnceOps.\/:", "link" : "com\/github\/arturopala\/tree\/util\/MapFilterIterator.html#\/:[B](z:B)(op:(B,A)=>B):B", "kind" : "final def"}, {"label" : "foldRight", "tail" : "(z: B)(op: (B, B) => B): B", "member" : "scala.collection.IterableOnceOps.foldRight", "link" : "com\/github\/arturopala\/tree\/util\/MapFilterIterator.html#foldRight[B](z:B)(op:(A,B)=>B):B", "kind" : "def"}, {"label" : "foldLeft", "tail" : "(z: B)(op: (B, B) => B): B", "member" : "scala.collection.IterableOnceOps.foldLeft", "link" : "com\/github\/arturopala\/tree\/util\/MapFilterIterator.html#foldLeft[B](z:B)(op:(B,A)=>B):B", "kind" : "def"}, {"label" : "find", "tail" : "(p: (B) => Boolean): Option[B]", "member" : "scala.collection.IterableOnceOps.find", "link" : "com\/github\/arturopala\/tree\/util\/MapFilterIterator.html#find(p:A=>Boolean):Option[A]", "kind" : "def"}, {"label" : "count", "tail" : "(p: (B) => Boolean): Int", "member" : "scala.collection.IterableOnceOps.count", "link" : "com\/github\/arturopala\/tree\/util\/MapFilterIterator.html#count(p:A=>Boolean):Int", "kind" : "def"}, {"label" : "exists", "tail" : "(p: (B) => Boolean): Boolean", "member" : "scala.collection.IterableOnceOps.exists", "link" : "com\/github\/arturopala\/tree\/util\/MapFilterIterator.html#exists(p:A=>Boolean):Boolean", "kind" : "def"}, {"label" : "forall", "tail" : "(p: (B) => Boolean): Boolean", "member" : "scala.collection.IterableOnceOps.forall", "link" : "com\/github\/arturopala\/tree\/util\/MapFilterIterator.html#forall(p:A=>Boolean):Boolean", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (B) => U): Unit", "member" : "scala.collection.IterableOnceOps.foreach", "link" : "com\/github\/arturopala\/tree\/util\/MapFilterIterator.html#foreach[U](f:A=>U):Unit", "kind" : "def"}, {"label" : "isTraversableAgain", "tail" : "(): Boolean", "member" : "scala.collection.IterableOnceOps.isTraversableAgain", "link" : "com\/github\/arturopala\/tree\/util\/MapFilterIterator.html#isTraversableAgain:Boolean", "kind" : "def"}, {"label" : "splitAt", "tail" : "(n: Int): (Iterator[B], Iterator[B])", "member" : "scala.collection.IterableOnceOps.splitAt", "link" : "com\/github\/arturopala\/tree\/util\/MapFilterIterator.html#splitAt(n:Int):(C,C)", "kind" : "def"}, {"label" : "knownSize", "tail" : "(): Int", "member" : "scala.collection.IterableOnce.knownSize", "link" : "com\/github\/arturopala\/tree\/util\/MapFilterIterator.html#knownSize:Int", "kind" : "def"}, {"label" : "stepper", "tail" : "(shape: StepperShape[B, S]): S", "member" : "scala.collection.IterableOnce.stepper", "link" : "com\/github\/arturopala\/tree\/util\/MapFilterIterator.html#stepper[S<:scala.collection.Stepper[_]](implicitshape:scala.collection.StepperShape[A,S]):S", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/arturopala\/tree\/util\/MapFilterIterator.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/arturopala\/tree\/util\/MapFilterIterator.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/arturopala\/tree\/util\/MapFilterIterator.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/arturopala\/tree\/util\/MapFilterIterator.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/arturopala\/tree\/util\/MapFilterIterator.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/arturopala\/tree\/util\/MapFilterIterator.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/arturopala\/tree\/util\/MapFilterIterator.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/arturopala\/tree\/util\/MapFilterIterator.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/arturopala\/tree\/util\/MapFilterIterator.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/arturopala\/tree\/util\/MapFilterIterator.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/arturopala\/tree\/util\/MapFilterIterator.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/arturopala\/tree\/util\/MapFilterIterator.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/arturopala\/tree\/util\/MapFilterIterator.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/arturopala\/tree\/util\/MapFilterIterator.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/arturopala\/tree\/util\/MapFilterIterator.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/arturopala\/tree\/util\/MapFilterIterator.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/arturopala\/tree\/util\/MapFilterIterator.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/arturopala\/tree\/util\/MapFilterIterator.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "com\/github\/arturopala\/tree\/util\/MapFilterIterator.html", "kind" : "class"}, {"name" : "com.github.arturopala.tree.util.NodeTree", "shortDescription" : "Collection of operations on the hierarchical, node-based, representation of the tree.", "object" : "com\/github\/arturopala\/tree\/util\/NodeTree$.html", "members_object" : [{"label" : "mkStringUsingBranches", "tail" : "(node: Node[T], show: (T) => String, valueSeparator: String, branchSeparator: String, branchStart: String, branchEnd: String, maxDepth: Int): StringBuilder", "member" : "com.github.arturopala.tree.util.NodeTree.mkStringUsingBranches", "link" : "com\/github\/arturopala\/tree\/util\/NodeTree$.html#mkStringUsingBranches[T](node:com.github.arturopala.tree.Tree.Node[T],show:T=>String,valueSeparator:String,branchSeparator:String,branchStart:String,branchEnd:String,maxDepth:Int):StringBuilder", "kind" : "final def"}, {"label" : "listFlatMap", "tail" : "(f: (T) => Tree[K], result: List[(Int, Tree[K])], queue: List[Node[T]]): List[(Int, Tree[K])]", "member" : "com.github.arturopala.tree.util.NodeTree.listFlatMap", "link" : "com\/github\/arturopala\/tree\/util\/NodeTree$.html#listFlatMap[T,K](f:T=>com.github.arturopala.tree.Tree[K],result:List[(Int,com.github.arturopala.tree.Tree[K])],queue:List[com.github.arturopala.tree.Tree.Node[T]]):List[(Int,com.github.arturopala.tree.Tree[K])]", "kind" : "final def"}, {"label" : "arrayMap", "tail" : "(f: (T) => K, node: Node[T])(tag: ClassTag[K]): (Array[Int], Array[K])", "member" : "com.github.arturopala.tree.util.NodeTree.arrayMap", "link" : "com\/github\/arturopala\/tree\/util\/NodeTree$.html#arrayMap[T,K](f:T=>K,node:com.github.arturopala.tree.Tree.Node[T])(implicittag:scala.reflect.ClassTag[K]):(Array[Int],Array[K])", "kind" : "final def"}, {"label" : "listMap", "tail" : "(f: (T) => K, node: Node[T]): List[(Int, K)]", "member" : "com.github.arturopala.tree.util.NodeTree.listMap", "link" : "com\/github\/arturopala\/tree\/util\/NodeTree$.html#listMap[T,K](f:T=>K,node:com.github.arturopala.tree.Tree.Node[T]):List[(Int,K)]", "kind" : "final def"}, {"label" : "toTreeList", "tail" : "(result: List[(Int, Tree[T])], queue: List[Node[T]]): List[(Int, Tree[T])]", "member" : "com.github.arturopala.tree.util.NodeTree.toTreeList", "link" : "com\/github\/arturopala\/tree\/util\/NodeTree$.html#toTreeList[T](result:List[(Int,com.github.arturopala.tree.Tree[T])],queue:List[com.github.arturopala.tree.Tree.Node[T]]):List[(Int,com.github.arturopala.tree.Tree[T])]", "kind" : "final def"}, {"label" : "toStructureArray", "tail" : "(node: Node[T]): Array[Int]", "member" : "com.github.arturopala.tree.util.NodeTree.toStructureArray", "link" : "com\/github\/arturopala\/tree\/util\/NodeTree$.html#toStructureArray[T](node:com.github.arturopala.tree.Tree.Node[T]):Array[Int]", "kind" : "final def"}, {"label" : "toArrays", "tail" : "(node: Node[T])(arg0: ClassTag[T]): (Array[Int], Array[T])", "member" : "com.github.arturopala.tree.util.NodeTree.toArrays", "link" : "com\/github\/arturopala\/tree\/util\/NodeTree$.html#toArrays[T](node:com.github.arturopala.tree.Tree.Node[T])(implicitevidence$1:scala.reflect.ClassTag[T]):(Array[Int],Array[T])", "kind" : "final def"}, {"label" : "toPairsList", "tail" : "(node: Node[T]): List[(Int, T)]", "member" : "com.github.arturopala.tree.util.NodeTree.toPairsList", "link" : "com\/github\/arturopala\/tree\/util\/NodeTree$.html#toPairsList[T](node:com.github.arturopala.tree.Tree.Node[T]):List[(Int,T)]", "kind" : "final def"}, {"label" : "insert", "tail" : "(tree: Node[T], branch: List[T1]): Node[T1]", "member" : "com.github.arturopala.tree.util.NodeTree.insert", "link" : "com\/github\/arturopala\/tree\/util\/NodeTree$.html#insert[T,T1>:T](tree:com.github.arturopala.tree.Tree.Node[T],branch:List[T1]):com.github.arturopala.tree.Tree.Node[T1]", "kind" : "final def"}, {"label" : "countBranches", "tail" : "(pred: (List[T]) => Boolean, node: Node[T]): Int", "member" : "com.github.arturopala.tree.util.NodeTree.countBranches", "link" : "com\/github\/arturopala\/tree\/util\/NodeTree$.html#countBranches[T](pred:List[T]=>Boolean,node:com.github.arturopala.tree.Tree.Node[T]):Int", "kind" : "final def"}, {"label" : "branchStream", "tail" : "(pred: (List[T]) => Boolean, node: Node[T]): Stream[List[T]]", "member" : "com.github.arturopala.tree.util.NodeTree.branchStream", "link" : "com\/github\/arturopala\/tree\/util\/NodeTree$.html#branchStream[T](pred:List[T]=>Boolean,node:com.github.arturopala.tree.Tree.Node[T]):Stream[List[T]]", "kind" : "final def"}, {"label" : "branches", "tail" : "(pred: (List[T]) => Boolean, node: Node[T]): List[List[T]]", "member" : "com.github.arturopala.tree.util.NodeTree.branches", "link" : "com\/github\/arturopala\/tree\/util\/NodeTree$.html#branches[T](pred:List[T]=>Boolean,node:com.github.arturopala.tree.Tree.Node[T]):List[List[T]]", "kind" : "final def"}, {"label" : "branchIterator", "tail" : "(pred: (Iterable[T]) => Boolean, node: Node[T]): Iterator[Iterable[T]]", "member" : "com.github.arturopala.tree.util.NodeTree.branchIterator", "link" : "com\/github\/arturopala\/tree\/util\/NodeTree$.html#branchIterator[T](pred:Iterable[T]=>Boolean,node:com.github.arturopala.tree.Tree.Node[T]):Iterator[Iterable[T]]", "kind" : "final def"}, {"label" : "treeStream", "tail" : "(pred: (Tree[T]) => Boolean, node: Node[T]): Stream[Tree[T]]", "member" : "com.github.arturopala.tree.util.NodeTree.treeStream", "link" : "com\/github\/arturopala\/tree\/util\/NodeTree$.html#treeStream[T](pred:com.github.arturopala.tree.Tree[T]=>Boolean,node:com.github.arturopala.tree.Tree.Node[T]):Stream[com.github.arturopala.tree.Tree[T]]", "kind" : "final def"}, {"label" : "trees", "tail" : "(pred: (Tree[T]) => Boolean, node: Node[T]): List[Node[T]]", "member" : "com.github.arturopala.tree.util.NodeTree.trees", "link" : "com\/github\/arturopala\/tree\/util\/NodeTree$.html#trees[T](pred:com.github.arturopala.tree.Tree[T]=>Boolean,node:com.github.arturopala.tree.Tree.Node[T]):List[com.github.arturopala.tree.Tree.Node[T]]", "kind" : "final def"}, {"label" : "treeIterator", "tail" : "(pred: (Tree[T]) => Boolean, node: Node[T]): Iterator[Tree[T]]", "member" : "com.github.arturopala.tree.util.NodeTree.treeIterator", "link" : "com\/github\/arturopala\/tree\/util\/NodeTree$.html#treeIterator[T](pred:com.github.arturopala.tree.Tree[T]=>Boolean,node:com.github.arturopala.tree.Tree.Node[T]):Iterator[com.github.arturopala.tree.Tree[T]]", "kind" : "final def"}, {"label" : "containsPath", "tail" : "(node: Node[T], path: Iterable[T1]): Boolean", "member" : "com.github.arturopala.tree.util.NodeTree.containsPath", "link" : "com\/github\/arturopala\/tree\/util\/NodeTree$.html#containsPath[T,T1>:T](node:com.github.arturopala.tree.Tree.Node[T],path:Iterable[T1]):Boolean", "kind" : "final def"}, {"label" : "containsBranch", "tail" : "(node: Node[T], branch: Iterable[T1]): Boolean", "member" : "com.github.arturopala.tree.util.NodeTree.containsBranch", "link" : "com\/github\/arturopala\/tree\/util\/NodeTree$.html#containsBranch[T,T1>:T](node:com.github.arturopala.tree.Tree.Node[T],branch:Iterable[T1]):Boolean", "kind" : "final def"}, {"label" : "selectTree", "tail" : "(node: Node[T], path: Iterable[T1]): Option[Node[T]]", "member" : "com.github.arturopala.tree.util.NodeTree.selectTree", "link" : "com\/github\/arturopala\/tree\/util\/NodeTree$.html#selectTree[T,T1>:T](node:com.github.arturopala.tree.Tree.Node[T],path:Iterable[T1]):Option[com.github.arturopala.tree.Tree.Node[T]]", "kind" : "final def"}, {"label" : "nodeStream", "tail" : "(pred: (T) => Boolean, node: Node[T]): Stream[T]", "member" : "com.github.arturopala.tree.util.NodeTree.nodeStream", "link" : "com\/github\/arturopala\/tree\/util\/NodeTree$.html#nodeStream[T](pred:T=>Boolean,node:com.github.arturopala.tree.Tree.Node[T]):Stream[T]", "kind" : "final def"}, {"label" : "nodes", "tail" : "(pred: (T) => Boolean, node: Node[T]): List[T]", "member" : "com.github.arturopala.tree.util.NodeTree.nodes", "link" : "com\/github\/arturopala\/tree\/util\/NodeTree$.html#nodes[T](pred:T=>Boolean,node:com.github.arturopala.tree.Tree.Node[T]):List[T]", "kind" : "final def"}, {"label" : "nodeIterator", "tail" : "(pred: (T) => Boolean, node: Node[T]): Iterator[T]", "member" : "com.github.arturopala.tree.util.NodeTree.nodeIterator", "link" : "com\/github\/arturopala\/tree\/util\/NodeTree$.html#nodeIterator[T](pred:T=>Boolean,node:com.github.arturopala.tree.Tree.Node[T]):Iterator[T]", "kind" : "final def"}, {"label" : "Binary", "tail" : "", "member" : "com.github.arturopala.tree.util.NodeTree.Binary", "link" : "com\/github\/arturopala\/tree\/util\/NodeTree$.html#Binary", "kind" : "object"}, {"label" : "Unary", "tail" : "", "member" : "com.github.arturopala.tree.util.NodeTree.Unary", "link" : "com\/github\/arturopala\/tree\/util\/NodeTree$.html#Unary", "kind" : "object"}, {"label" : "Leaf", "tail" : "", "member" : "com.github.arturopala.tree.util.NodeTree.Leaf", "link" : "com\/github\/arturopala\/tree\/util\/NodeTree$.html#Leaf", "kind" : "object"}, {"label" : "NonEmptySubtree", "tail" : "", "member" : "com.github.arturopala.tree.util.NodeTree.NonEmptySubtree", "link" : "com\/github\/arturopala\/tree\/util\/NodeTree$.html#NonEmptySubtree", "kind" : "object"}, {"label" : "Node", "tail" : "", "member" : "com.github.arturopala.tree.util.NodeTree.Node", "link" : "com\/github\/arturopala\/tree\/util\/NodeTree$.html#Node", "kind" : "object"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/arturopala\/tree\/util\/NodeTree$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/arturopala\/tree\/util\/NodeTree$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/arturopala\/tree\/util\/NodeTree$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/arturopala\/tree\/util\/NodeTree$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/arturopala\/tree\/util\/NodeTree$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/arturopala\/tree\/util\/NodeTree$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/arturopala\/tree\/util\/NodeTree$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/arturopala\/tree\/util\/NodeTree$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/arturopala\/tree\/util\/NodeTree$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/arturopala\/tree\/util\/NodeTree$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/arturopala\/tree\/util\/NodeTree$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/arturopala\/tree\/util\/NodeTree$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/arturopala\/tree\/util\/NodeTree$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/arturopala\/tree\/util\/NodeTree$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/arturopala\/tree\/util\/NodeTree$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/arturopala\/tree\/util\/NodeTree$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/arturopala\/tree\/util\/NodeTree$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/arturopala\/tree\/util\/NodeTree$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/arturopala\/tree\/util\/NodeTree$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.github.arturopala.tree.util.Slice", "shortDescription" : "Lazy, immutable slice of the underlying array.", "object" : "com\/github\/arturopala\/tree\/util\/Slice$.html", "members_class" : [{"label" : "hashCode", "tail" : "(): Int", "member" : "com.github.arturopala.tree.util.Slice.hashCode", "link" : "com\/github\/arturopala\/tree\/util\/Slice.html#hashCode():Int", "kind" : "def"}, {"label" : "equals", "tail" : "(obj: Any): Boolean", "member" : "com.github.arturopala.tree.util.Slice.equals", "link" : "com\/github\/arturopala\/tree\/util\/Slice.html#equals(obj:Any):Boolean", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "com.github.arturopala.tree.util.Slice.toString", "link" : "com\/github\/arturopala\/tree\/util\/Slice.html#toString():String", "kind" : "def"}, {"label" : "asIterable", "tail" : "(): Iterable[T]", "member" : "com.github.arturopala.tree.util.Slice.asIterable", "link" : "com\/github\/arturopala\/tree\/util\/Slice.html#asIterable:Iterable[T]", "kind" : "def"}, {"label" : "toList", "tail" : "(): List[T]", "member" : "com.github.arturopala.tree.util.Slice.toList", "link" : "com\/github\/arturopala\/tree\/util\/Slice.html#toList:List[T]", "kind" : "def"}, {"label" : "toArray", "tail" : "(tagT1: ClassTag[T1]): Array[T1]", "member" : "com.github.arturopala.tree.util.Slice.toArray", "link" : "com\/github\/arturopala\/tree\/util\/Slice.html#toArray[T1>:T](implicittagT1:scala.reflect.ClassTag[T1]):Array[T1]", "kind" : "def"}, {"label" : "reverseIterator", "tail" : "(pred: (T) => Boolean): Iterator[T]", "member" : "com.github.arturopala.tree.util.Slice.reverseIterator", "link" : "com\/github\/arturopala\/tree\/util\/Slice.html#reverseIterator(pred:T=>Boolean):Iterator[T]", "kind" : "def"}, {"label" : "reverseIterator", "tail" : "(): Iterator[T]", "member" : "com.github.arturopala.tree.util.Slice.reverseIterator", "link" : "com\/github\/arturopala\/tree\/util\/Slice.html#reverseIterator:Iterator[T]", "kind" : "def"}, {"label" : "iterator", "tail" : "(): Iterator[T]", "member" : "com.github.arturopala.tree.util.Slice.iterator", "link" : "com\/github\/arturopala\/tree\/util\/Slice.html#iterator:Iterator[T]", "kind" : "def"}, {"label" : "dropRight", "tail" : "(n: Int): Slice[T]", "member" : "com.github.arturopala.tree.util.Slice.dropRight", "link" : "com\/github\/arturopala\/tree\/util\/Slice.html#dropRight(n:Int):com.github.arturopala.tree.util.Slice[T]", "kind" : "def"}, {"label" : "drop", "tail" : "(n: Int): Slice[T]", "member" : "com.github.arturopala.tree.util.Slice.drop", "link" : "com\/github\/arturopala\/tree\/util\/Slice.html#drop(n:Int):com.github.arturopala.tree.util.Slice[T]", "kind" : "def"}, {"label" : "takeRight", "tail" : "(n: Int): Slice[T]", "member" : "com.github.arturopala.tree.util.Slice.takeRight", "link" : "com\/github\/arturopala\/tree\/util\/Slice.html#takeRight(n:Int):com.github.arturopala.tree.util.Slice[T]", "kind" : "def"}, {"label" : "take", "tail" : "(n: Int): Slice[T]", "member" : "com.github.arturopala.tree.util.Slice.take", "link" : "com\/github\/arturopala\/tree\/util\/Slice.html#take(n:Int):com.github.arturopala.tree.util.Slice[T]", "kind" : "def"}, {"label" : "slice", "tail" : "(from: Int, to: Int): Slice[T]", "member" : "com.github.arturopala.tree.util.Slice.slice", "link" : "com\/github\/arturopala\/tree\/util\/Slice.html#slice(from:Int,to:Int):com.github.arturopala.tree.util.Slice[T]", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "com.github.arturopala.tree.util.Slice.isEmpty", "link" : "com\/github\/arturopala\/tree\/util\/Slice.html#isEmpty:Boolean", "kind" : "def"}, {"label" : "count", "tail" : "(pred: (T) => Boolean): Int", "member" : "com.github.arturopala.tree.util.Slice.count", "link" : "com\/github\/arturopala\/tree\/util\/Slice.html#count(pred:T=>Boolean):Int", "kind" : "def"}, {"label" : "map", "tail" : "(f: (T) => K): Slice[K]", "member" : "com.github.arturopala.tree.util.Slice.map", "link" : "com\/github\/arturopala\/tree\/util\/Slice.html#map[K](f:T=>K):com.github.arturopala.tree.util.Slice[K]", "kind" : "def"}, {"label" : "update", "tail" : "(index: Int, value: T)(tag: ClassTag[T]): Slice[T]", "member" : "com.github.arturopala.tree.util.Slice.update", "link" : "com\/github\/arturopala\/tree\/util\/Slice.html#update(index:Int,value:T)(implicittag:scala.reflect.ClassTag[T]):com.github.arturopala.tree.util.Slice[T]", "kind" : "def"}, {"label" : "apply", "tail" : "(index: Int): T", "member" : "com.github.arturopala.tree.util.Slice.apply", "link" : "com\/github\/arturopala\/tree\/util\/Slice.html#apply(index:Int):T", "kind" : "def"}, {"label" : "length", "tail" : ": Int", "member" : "com.github.arturopala.tree.util.Slice.length", "link" : "com\/github\/arturopala\/tree\/util\/Slice.html#length:Int", "kind" : "val"}, {"label" : "andThen", "tail" : "(g: (T) => A): (Int) => A", "member" : "scala.Function1.andThen", "link" : "com\/github\/arturopala\/tree\/util\/Slice.html#andThen[A](g:R=>A):T1=>A", "kind" : "def"}, {"label" : "compose", "tail" : "(g: (A) => Int): (A) => T", "member" : "scala.Function1.compose", "link" : "com\/github\/arturopala\/tree\/util\/Slice.html#compose[A](g:A=>T1):A=>R", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/arturopala\/tree\/util\/Slice.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/arturopala\/tree\/util\/Slice.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/arturopala\/tree\/util\/Slice.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/arturopala\/tree\/util\/Slice.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/arturopala\/tree\/util\/Slice.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/arturopala\/tree\/util\/Slice.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/arturopala\/tree\/util\/Slice.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/arturopala\/tree\/util\/Slice.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/arturopala\/tree\/util\/Slice.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/arturopala\/tree\/util\/Slice.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/arturopala\/tree\/util\/Slice.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/arturopala\/tree\/util\/Slice.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/arturopala\/tree\/util\/Slice.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/arturopala\/tree\/util\/Slice.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/arturopala\/tree\/util\/Slice.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/arturopala\/tree\/util\/Slice.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "mapF", "tail" : ": (A) => T", "member" : "com.github.arturopala.tree.util.Slice.mapF", "link" : "com\/github\/arturopala\/tree\/util\/Slice.html#mapF:Slice.this.A=>T", "kind" : "abstract val"}, {"label" : "array", "tail" : ": Array[A]", "member" : "com.github.arturopala.tree.util.Slice.array", "link" : "com\/github\/arturopala\/tree\/util\/Slice.html#array:Array[Slice.this.A]", "kind" : "abstract val"}, {"member" : "com.github.arturopala.tree.util.Slice.A", "error" : "unsupported entity"}], "members_object" : [{"label" : "empty", "tail" : "(arg0: ClassTag[T]): Slice[T]", "member" : "com.github.arturopala.tree.util.Slice.empty", "link" : "com\/github\/arturopala\/tree\/util\/Slice$.html#empty[T](implicitevidence$2:scala.reflect.ClassTag[T]):com.github.arturopala.tree.util.Slice[T]", "kind" : "def"}, {"label" : "of", "tail" : "(array: Array[T], from: Int, to: Int): Slice[T]", "member" : "com.github.arturopala.tree.util.Slice.of", "link" : "com\/github\/arturopala\/tree\/util\/Slice$.html#of[T](array:Array[T],from:Int,to:Int):com.github.arturopala.tree.util.Slice[T]", "kind" : "def"}, {"label" : "of", "tail" : "(array: Array[T]): Slice[T]", "member" : "com.github.arturopala.tree.util.Slice.of", "link" : "com\/github\/arturopala\/tree\/util\/Slice$.html#of[T](array:Array[T]):com.github.arturopala.tree.util.Slice[T]", "kind" : "def"}, {"label" : "apply", "tail" : "(is: T*)(arg0: ClassTag[T]): Slice[T]", "member" : "com.github.arturopala.tree.util.Slice.apply", "link" : "com\/github\/arturopala\/tree\/util\/Slice$.html#apply[T](is:T*)(implicitevidence$1:scala.reflect.ClassTag[T]):com.github.arturopala.tree.util.Slice[T]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/arturopala\/tree\/util\/Slice$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/arturopala\/tree\/util\/Slice$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/arturopala\/tree\/util\/Slice$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/arturopala\/tree\/util\/Slice$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/arturopala\/tree\/util\/Slice$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/arturopala\/tree\/util\/Slice$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/arturopala\/tree\/util\/Slice$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/arturopala\/tree\/util\/Slice$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/arturopala\/tree\/util\/Slice$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/arturopala\/tree\/util\/Slice$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/arturopala\/tree\/util\/Slice$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/arturopala\/tree\/util\/Slice$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/arturopala\/tree\/util\/Slice$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/arturopala\/tree\/util\/Slice$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/arturopala\/tree\/util\/Slice$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/arturopala\/tree\/util\/Slice$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/arturopala\/tree\/util\/Slice$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/arturopala\/tree\/util\/Slice$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/arturopala\/tree\/util\/Slice$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "com\/github\/arturopala\/tree\/util\/Slice.html", "kind" : "class"}], "com.github.arturopala" : [], "com.github.arturopala.tree" : [{"name" : "com.github.arturopala.tree.Tree", "object" : "com\/github\/arturopala\/tree\/Tree$.html", "members_object" : [{"label" : "hashCodeOf", "tail" : "(tree: Tree[T]): Int", "member" : "com.github.arturopala.tree.Tree.hashCodeOf", "link" : "com\/github\/arturopala\/tree\/Tree$.html#hashCodeOf[T](tree:com.github.arturopala.tree.Tree[T]):Int", "kind" : "def"}, {"label" : "equals", "tail" : "(tree1: Tree[T], tree2: Tree[T]): Boolean", "member" : "com.github.arturopala.tree.Tree.equals", "link" : "com\/github\/arturopala\/tree\/Tree$.html#equals[T](tree1:com.github.arturopala.tree.Tree[T],tree2:com.github.arturopala.tree.Tree[T]):Boolean", "kind" : "def"}, {"label" : "Show", "tail" : "", "member" : "com.github.arturopala.tree.Tree.Show", "link" : "com\/github\/arturopala\/tree\/Tree$.html#Show", "kind" : "object"}, {"label" : "Builder", "tail" : "", "member" : "com.github.arturopala.tree.Tree.Builder", "link" : "com\/github\/arturopala\/tree\/Tree$.html#Builder", "kind" : "object"}, {"label" : "FlatMapStrategy", "tail" : "", "member" : "com.github.arturopala.tree.Tree.FlatMapStrategy", "link" : "com\/github\/arturopala\/tree\/Tree$.html#FlatMapStrategy", "kind" : "object"}, {"label" : "FlatMapStrategy", "tail" : "", "member" : "com.github.arturopala.tree.Tree.FlatMapStrategy", "link" : "com\/github\/arturopala\/tree\/Tree$.html#FlatMapStrategyextendsAnyRef", "kind" : "trait"}, {"label" : "empty", "tail" : "", "member" : "com.github.arturopala.tree.Tree.empty", "link" : "com\/github\/arturopala\/tree\/Tree$.html#empty", "kind" : "object"}, {"label" : "ArrayTree", "tail" : "", "member" : "com.github.arturopala.tree.Tree.ArrayTree", "link" : "com\/github\/arturopala\/tree\/Tree$.html#ArrayTree[T]extendsTree[T]", "kind" : "final class"}, {"label" : "Bunch", "tail" : "", "member" : "com.github.arturopala.tree.Tree.Bunch", "link" : "com\/github\/arturopala\/tree\/Tree$.html#Bunch[+T]extendsTree.Node[T]", "kind" : "final class"}, {"label" : "Binary", "tail" : "", "member" : "com.github.arturopala.tree.Tree.Binary", "link" : "com\/github\/arturopala\/tree\/Tree$.html#Binary[+T]extendsTree.Node[T]", "kind" : "final class"}, {"label" : "Unary", "tail" : "", "member" : "com.github.arturopala.tree.Tree.Unary", "link" : "com\/github\/arturopala\/tree\/Tree$.html#Unary[+T]extendsTree.Node[T]", "kind" : "final class"}, {"label" : "Leaf", "tail" : "", "member" : "com.github.arturopala.tree.Tree.Leaf", "link" : "com\/github\/arturopala\/tree\/Tree$.html#Leaf[+T]extendsTree.Node[T]", "kind" : "final class"}, {"label" : "Node", "tail" : "", "member" : "com.github.arturopala.tree.Tree.Node", "link" : "com\/github\/arturopala\/tree\/Tree$.html#Node[+T]extendsTree[T]", "kind" : "sealed trait"}, {"label" : "inflate", "tail" : "(tree: Tree[T]): Tree[T]", "member" : "com.github.arturopala.tree.Tree.inflate", "link" : "com\/github\/arturopala\/tree\/Tree$.html#inflate[T](tree:com.github.arturopala.tree.Tree[T]):com.github.arturopala.tree.Tree[T]", "kind" : "final def"}, {"label" : "deflate", "tail" : "(tree: Tree[T])(arg0: ClassTag[T]): Tree[T]", "member" : "com.github.arturopala.tree.Tree.deflate", "link" : "com\/github\/arturopala\/tree\/Tree$.html#deflate[T](tree:com.github.arturopala.tree.Tree[T])(implicitevidence$6:scala.reflect.ClassTag[T]):com.github.arturopala.tree.Tree[T]", "kind" : "final def"}, {"label" : "apply", "tail" : "(value: T, subtrees: List[Node[T]]): Node[T]", "member" : "com.github.arturopala.tree.Tree.apply", "link" : "com\/github\/arturopala\/tree\/Tree$.html#apply[T](value:T,subtrees:List[com.github.arturopala.tree.Tree.Node[T]]):com.github.arturopala.tree.Tree.Node[T]", "kind" : "final def"}, {"label" : "apply", "tail" : "(value: T, subtree1: Node[T], subtree2: Node[T], subtree3: Node[T], others: Node[T]*): Node[T]", "member" : "com.github.arturopala.tree.Tree.apply", "link" : "com\/github\/arturopala\/tree\/Tree$.html#apply[T](value:T,subtree1:com.github.arturopala.tree.Tree.Node[T],subtree2:com.github.arturopala.tree.Tree.Node[T],subtree3:com.github.arturopala.tree.Tree.Node[T],others:com.github.arturopala.tree.Tree.Node[T]*):com.github.arturopala.tree.Tree.Node[T]", "kind" : "final def"}, {"label" : "apply", "tail" : "(value: T, left: Node[T], right: Node[T]): Node[T]", "member" : "com.github.arturopala.tree.Tree.apply", "link" : "com\/github\/arturopala\/tree\/Tree$.html#apply[T](value:T,left:com.github.arturopala.tree.Tree.Node[T],right:com.github.arturopala.tree.Tree.Node[T]):com.github.arturopala.tree.Tree.Node[T]", "kind" : "final def"}, {"label" : "apply", "tail" : "(value: T, subtree: Node[T]): Node[T]", "member" : "com.github.arturopala.tree.Tree.apply", "link" : "com\/github\/arturopala\/tree\/Tree$.html#apply[T](value:T,subtree:com.github.arturopala.tree.Tree.Node[T]):com.github.arturopala.tree.Tree.Node[T]", "kind" : "final def"}, {"label" : "apply", "tail" : "(value: T): Node[T]", "member" : "com.github.arturopala.tree.Tree.apply", "link" : "com\/github\/arturopala\/tree\/Tree$.html#apply[T](value:T):com.github.arturopala.tree.Tree.Node[T]", "kind" : "final def"}, {"label" : "apply", "tail" : "(): Tree[T]", "member" : "com.github.arturopala.tree.Tree.apply", "link" : "com\/github\/arturopala\/tree\/Tree$.html#apply[T]():com.github.arturopala.tree.Tree[T]", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/arturopala\/tree\/Tree$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/arturopala\/tree\/Tree$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/arturopala\/tree\/Tree$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/arturopala\/tree\/Tree$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/arturopala\/tree\/Tree$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/arturopala\/tree\/Tree$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/arturopala\/tree\/Tree$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/arturopala\/tree\/Tree$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/arturopala\/tree\/Tree$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/arturopala\/tree\/Tree$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/arturopala\/tree\/Tree$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/arturopala\/tree\/Tree$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/arturopala\/tree\/Tree$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/arturopala\/tree\/Tree$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/arturopala\/tree\/Tree$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/arturopala\/tree\/Tree$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/arturopala\/tree\/Tree$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/arturopala\/tree\/Tree$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/arturopala\/tree\/Tree$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "com\/github\/arturopala\/tree\/Tree.html", "kind" : "trait", "members_trait" : [{"label" : "hashCode", "tail" : "(): Int", "member" : "com.github.arturopala.tree.Tree.hashCode", "link" : "com\/github\/arturopala\/tree\/Tree.html#hashCode():Int", "kind" : "final def"}, {"label" : "equals", "tail" : "(obj: Any): Boolean", "member" : "com.github.arturopala.tree.Tree.equals", "link" : "com\/github\/arturopala\/tree\/Tree.html#equals(obj:Any):Boolean", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/arturopala\/tree\/Tree.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/arturopala\/tree\/Tree.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/arturopala\/tree\/Tree.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/arturopala\/tree\/Tree.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/arturopala\/tree\/Tree.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/arturopala\/tree\/Tree.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/arturopala\/tree\/Tree.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/arturopala\/tree\/Tree.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/arturopala\/tree\/Tree.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/arturopala\/tree\/Tree.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/arturopala\/tree\/Tree.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/arturopala\/tree\/Tree.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/arturopala\/tree\/Tree.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/arturopala\/tree\/Tree.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/arturopala\/tree\/Tree.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/arturopala\/tree\/Tree.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/arturopala\/tree\/Tree.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "deflate", "tail" : "(tag: ClassTag[T1]): Tree[T1]", "member" : "com.github.arturopala.tree.Tree.deflate", "link" : "com\/github\/arturopala\/tree\/Tree.html#deflate[T1>:T](implicittag:scala.reflect.ClassTag[T1]):com.github.arturopala.tree.Tree[T1]", "kind" : "abstract def"}, {"label" : "inflate", "tail" : "(): Tree[T]", "member" : "com.github.arturopala.tree.Tree.inflate", "link" : "com\/github\/arturopala\/tree\/Tree.html#inflate:com.github.arturopala.tree.Tree[T]", "kind" : "abstract def"}, {"label" : "mkStringUsingBranches", "tail" : "(show: (T) => String, valueSeparator: String, branchSeparator: String, branchStart: String, branchEnd: String, maxDepth: Int): String", "member" : "com.github.arturopala.tree.Tree.mkStringUsingBranches", "link" : "com\/github\/arturopala\/tree\/Tree.html#mkStringUsingBranches(show:T=>String,valueSeparator:String,branchSeparator:String,branchStart:String,branchEnd:String,maxDepth:Int):String", "kind" : "abstract def"}, {"label" : "toStructureArray", "tail" : "(): Array[Int]", "member" : "com.github.arturopala.tree.Tree.toStructureArray", "link" : "com\/github\/arturopala\/tree\/Tree.html#toStructureArray:Array[Int]", "kind" : "abstract def"}, {"label" : "toArrays", "tail" : "(arg0: ClassTag[T1]): (Array[Int], Array[T1])", "member" : "com.github.arturopala.tree.Tree.toArrays", "link" : "com\/github\/arturopala\/tree\/Tree.html#toArrays[T1>:T](implicitevidence$5:scala.reflect.ClassTag[T1]):(Array[Int],Array[T1])", "kind" : "abstract def"}, {"label" : "toPairsIterator", "tail" : "(): Iterator[(Int, T)]", "member" : "com.github.arturopala.tree.Tree.toPairsIterator", "link" : "com\/github\/arturopala\/tree\/Tree.html#toPairsIterator:Iterator[(Int,T)]", "kind" : "abstract def"}, {"label" : "containsPath", "tail" : "(path: Iterable[T1]): Boolean", "member" : "com.github.arturopala.tree.Tree.containsPath", "link" : "com\/github\/arturopala\/tree\/Tree.html#containsPath[T1>:T](path:Iterable[T1]):Boolean", "kind" : "abstract def"}, {"label" : "containsBranch", "tail" : "(branch: Iterable[T1]): Boolean", "member" : "com.github.arturopala.tree.Tree.containsBranch", "link" : "com\/github\/arturopala\/tree\/Tree.html#containsBranch[T1>:T](branch:Iterable[T1]):Boolean", "kind" : "abstract def"}, {"label" : "selectTree", "tail" : "(path: Iterable[T1])(arg0: ClassTag[T1]): Option[Tree[T]]", "member" : "com.github.arturopala.tree.Tree.selectTree", "link" : "com\/github\/arturopala\/tree\/Tree.html#selectTree[T1>:T](path:Iterable[T1])(implicitevidence$4:scala.reflect.ClassTag[T1]):Option[com.github.arturopala.tree.Tree[T]]", "kind" : "abstract def"}, {"label" : "selectValue", "tail" : "(path: Iterable[T1]): Option[T]", "member" : "com.github.arturopala.tree.Tree.selectValue", "link" : "com\/github\/arturopala\/tree\/Tree.html#selectValue[T1>:T](path:Iterable[T1]):Option[T]", "kind" : "abstract def"}, {"label" : "flatMap", "tail" : "(f: (T) => Tree[K])(arg0: ClassTag[K]): Tree[K]", "member" : "com.github.arturopala.tree.Tree.flatMap", "link" : "com\/github\/arturopala\/tree\/Tree.html#flatMap[K](f:T=>com.github.arturopala.tree.Tree[K])(implicitevidence$3:scala.reflect.ClassTag[K]):com.github.arturopala.tree.Tree[K]", "kind" : "abstract def"}, {"label" : "mapUnsafe", "tail" : "(f: (T) => K)(arg0: ClassTag[K]): Tree[K]", "member" : "com.github.arturopala.tree.Tree.mapUnsafe", "link" : "com\/github\/arturopala\/tree\/Tree.html#mapUnsafe[K](f:T=>K)(implicitevidence$2:scala.reflect.ClassTag[K]):com.github.arturopala.tree.Tree[K]", "kind" : "abstract def"}, {"label" : "map", "tail" : "(f: (T) => K)(arg0: ClassTag[K]): Tree[K]", "member" : "com.github.arturopala.tree.Tree.map", "link" : "com\/github\/arturopala\/tree\/Tree.html#map[K](f:T=>K)(implicitevidence$1:scala.reflect.ClassTag[K]):com.github.arturopala.tree.Tree[K]", "kind" : "abstract def"}, {"label" : "insert", "tail" : "(branch: List[T1]): Tree[T1]", "member" : "com.github.arturopala.tree.Tree.insert", "link" : "com\/github\/arturopala\/tree\/Tree.html#insert[T1>:T](branch:List[T1]):com.github.arturopala.tree.Tree[T1]", "kind" : "abstract def"}, {"label" : "insert", "tail" : "(subtree: Tree[T1]): Tree[T1]", "member" : "com.github.arturopala.tree.Tree.insert", "link" : "com\/github\/arturopala\/tree\/Tree.html#insert[T1>:T](subtree:com.github.arturopala.tree.Tree[T1]):com.github.arturopala.tree.Tree[T1]", "kind" : "abstract def"}, {"label" : "insert", "tail" : "(value: T1): Tree[T1]", "member" : "com.github.arturopala.tree.Tree.insert", "link" : "com\/github\/arturopala\/tree\/Tree.html#insert[T1>:T](value:T1):com.github.arturopala.tree.Tree[T1]", "kind" : "abstract def"}, {"label" : "countBranches", "tail" : "(pred: (Iterable[T]) => Boolean): Int", "member" : "com.github.arturopala.tree.Tree.countBranches", "link" : "com\/github\/arturopala\/tree\/Tree.html#countBranches(pred:Iterable[T]=>Boolean):Int", "kind" : "abstract def"}, {"label" : "branchStream", "tail" : "(pred: (Iterable[T]) => Boolean): Stream[List[T]]", "member" : "com.github.arturopala.tree.Tree.branchStream", "link" : "com\/github\/arturopala\/tree\/Tree.html#branchStream(pred:Iterable[T]=>Boolean):scala.collection.immutable.Stream[List[T]]", "kind" : "abstract def"}, {"label" : "branchStream", "tail" : "(): Stream[List[T]]", "member" : "com.github.arturopala.tree.Tree.branchStream", "link" : "com\/github\/arturopala\/tree\/Tree.html#branchStream:scala.collection.immutable.Stream[List[T]]", "kind" : "abstract def"}, {"label" : "branchIterator", "tail" : "(pred: (Iterable[T]) => Boolean): Iterator[Iterable[T]]", "member" : "com.github.arturopala.tree.Tree.branchIterator", "link" : "com\/github\/arturopala\/tree\/Tree.html#branchIterator(pred:Iterable[T]=>Boolean):Iterator[Iterable[T]]", "kind" : "abstract def"}, {"label" : "branchesUnsafe", "tail" : "(): List[List[T]]", "member" : "com.github.arturopala.tree.Tree.branchesUnsafe", "link" : "com\/github\/arturopala\/tree\/Tree.html#branchesUnsafe:List[List[T]]", "kind" : "abstract def"}, {"label" : "branches", "tail" : "(): List[List[T]]", "member" : "com.github.arturopala.tree.Tree.branches", "link" : "com\/github\/arturopala\/tree\/Tree.html#branches():List[List[T]]", "kind" : "abstract def"}, {"label" : "treeStream", "tail" : "(pred: (Tree[T]) => Boolean): Stream[Tree[T]]", "member" : "com.github.arturopala.tree.Tree.treeStream", "link" : "com\/github\/arturopala\/tree\/Tree.html#treeStream(pred:com.github.arturopala.tree.Tree[T]=>Boolean):scala.collection.immutable.Stream[com.github.arturopala.tree.Tree[T]]", "kind" : "abstract def"}, {"label" : "treeStream", "tail" : "(): Stream[Tree[T]]", "member" : "com.github.arturopala.tree.Tree.treeStream", "link" : "com\/github\/arturopala\/tree\/Tree.html#treeStream:scala.collection.immutable.Stream[com.github.arturopala.tree.Tree[T]]", "kind" : "abstract def"}, {"label" : "treeIterator", "tail" : "(pred: (Tree[T]) => Boolean): Iterator[Tree[T]]", "member" : "com.github.arturopala.tree.Tree.treeIterator", "link" : "com\/github\/arturopala\/tree\/Tree.html#treeIterator(pred:com.github.arturopala.tree.Tree[T]=>Boolean):Iterator[com.github.arturopala.tree.Tree[T]]", "kind" : "abstract def"}, {"label" : "treesUnsafe", "tail" : "(): List[Tree[T]]", "member" : "com.github.arturopala.tree.Tree.treesUnsafe", "link" : "com\/github\/arturopala\/tree\/Tree.html#treesUnsafe:List[com.github.arturopala.tree.Tree[T]]", "kind" : "abstract def"}, {"label" : "trees", "tail" : "(): List[Tree[T]]", "member" : "com.github.arturopala.tree.Tree.trees", "link" : "com\/github\/arturopala\/tree\/Tree.html#trees():List[com.github.arturopala.tree.Tree[T]]", "kind" : "abstract def"}, {"label" : "children", "tail" : "(): List[T]", "member" : "com.github.arturopala.tree.Tree.children", "link" : "com\/github\/arturopala\/tree\/Tree.html#children:List[T]", "kind" : "abstract def"}, {"label" : "nodeStream", "tail" : "(pred: (T) => Boolean): Stream[T]", "member" : "com.github.arturopala.tree.Tree.nodeStream", "link" : "com\/github\/arturopala\/tree\/Tree.html#nodeStream(pred:T=>Boolean):scala.collection.immutable.Stream[T]", "kind" : "abstract def"}, {"label" : "nodeStream", "tail" : "(): Stream[T]", "member" : "com.github.arturopala.tree.Tree.nodeStream", "link" : "com\/github\/arturopala\/tree\/Tree.html#nodeStream:scala.collection.immutable.Stream[T]", "kind" : "abstract def"}, {"label" : "nodeIterator", "tail" : "(pred: (T) => Boolean): Iterator[T]", "member" : "com.github.arturopala.tree.Tree.nodeIterator", "link" : "com\/github\/arturopala\/tree\/Tree.html#nodeIterator(pred:T=>Boolean):Iterator[T]", "kind" : "abstract def"}, {"label" : "nodesUnsafe", "tail" : "(): List[T]", "member" : "com.github.arturopala.tree.Tree.nodesUnsafe", "link" : "com\/github\/arturopala\/tree\/Tree.html#nodesUnsafe:List[T]", "kind" : "abstract def"}, {"label" : "nodes", "tail" : "(): List[T]", "member" : "com.github.arturopala.tree.Tree.nodes", "link" : "com\/github\/arturopala\/tree\/Tree.html#nodes():List[T]", "kind" : "abstract def"}, {"label" : "valueOption", "tail" : "(): Option[T]", "member" : "com.github.arturopala.tree.Tree.valueOption", "link" : "com\/github\/arturopala\/tree\/Tree.html#valueOption:Option[T]", "kind" : "abstract def"}, {"label" : "isLeaf", "tail" : "(): Boolean", "member" : "com.github.arturopala.tree.Tree.isLeaf", "link" : "com\/github\/arturopala\/tree\/Tree.html#isLeaf:Boolean", "kind" : "abstract def"}, {"label" : "height", "tail" : "(): Int", "member" : "com.github.arturopala.tree.Tree.height", "link" : "com\/github\/arturopala\/tree\/Tree.html#height:Int", "kind" : "abstract def"}, {"label" : "width", "tail" : "(): Int", "member" : "com.github.arturopala.tree.Tree.width", "link" : "com\/github\/arturopala\/tree\/Tree.html#width:Int", "kind" : "abstract def"}, {"label" : "size", "tail" : "(): Int", "member" : "com.github.arturopala.tree.Tree.size", "link" : "com\/github\/arturopala\/tree\/Tree.html#size:Int", "kind" : "abstract def"}], "shortDescription" : "A general-purpose, covariant, immutable, low overhead,efficient tree-like data structure with rich API."}], "com" : [], "com.github" : []};