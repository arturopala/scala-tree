Index.PACKAGES = {"com" : [], "com.github" : [], "com.github.arturopala" : [], "com.github.arturopala.tree" : [{"name" : "com.github.arturopala.tree.Tree", "object" : "com\/github\/arturopala\/tree\/Tree$.html", "members_object" : [{"label" : "Show", "tail" : "", "member" : "com.github.arturopala.tree.Tree.Show", "link" : "com\/github\/arturopala\/tree\/Tree$.html#Show", "kind" : "object"}, {"label" : "Builder", "tail" : "", "member" : "com.github.arturopala.tree.Tree.Builder", "link" : "com\/github\/arturopala\/tree\/Tree$.html#Builder", "kind" : "object"}, {"label" : "FlatMapStrategy", "tail" : "", "member" : "com.github.arturopala.tree.Tree.FlatMapStrategy", "link" : "com\/github\/arturopala\/tree\/Tree$.html#FlatMapStrategy", "kind" : "object"}, {"label" : "FlatMapStrategy", "tail" : "", "member" : "com.github.arturopala.tree.Tree.FlatMapStrategy", "link" : "com\/github\/arturopala\/tree\/Tree$.html#FlatMapStrategyextendsAnyRef", "kind" : "trait"}, {"label" : "NodeOps", "tail" : "", "member" : "com.github.arturopala.tree.Tree.NodeOps", "link" : "com\/github\/arturopala\/tree\/Tree$.html#NodeOps", "kind" : "object"}, {"label" : "empty", "tail" : "", "member" : "com.github.arturopala.tree.Tree.empty", "link" : "com\/github\/arturopala\/tree\/Tree$.html#empty", "kind" : "object"}, {"label" : "Node", "tail" : "", "member" : "com.github.arturopala.tree.Tree.Node", "link" : "com\/github\/arturopala\/tree\/Tree$.html#Node", "kind" : "object"}, {"label" : "Node", "tail" : "", "member" : "com.github.arturopala.tree.Tree.Node", "link" : "com\/github\/arturopala\/tree\/Tree$.html#Node[+T]extendsTree[T]withProductwithSerializable", "kind" : "final case class"}, {"label" : "apply", "tail" : "(value: T, subtrees: List[Node[T]]): Node[T]", "member" : "com.github.arturopala.tree.Tree.apply", "link" : "com\/github\/arturopala\/tree\/Tree$.html#apply[T](value:T,subtrees:List[com.github.arturopala.tree.Tree.Node[T]]):com.github.arturopala.tree.Tree.Node[T]", "kind" : "def"}, {"label" : "apply", "tail" : "(value: T, subtree: Node[T], others: Node[T]*): Node[T]", "member" : "com.github.arturopala.tree.Tree.apply", "link" : "com\/github\/arturopala\/tree\/Tree$.html#apply[T](value:T,subtree:com.github.arturopala.tree.Tree.Node[T],others:com.github.arturopala.tree.Tree.Node[T]*):com.github.arturopala.tree.Tree.Node[T]", "kind" : "def"}, {"label" : "apply", "tail" : "(value: T): Node[T]", "member" : "com.github.arturopala.tree.Tree.apply", "link" : "com\/github\/arturopala\/tree\/Tree$.html#apply[T](value:T):com.github.arturopala.tree.Tree.Node[T]", "kind" : "def"}, {"label" : "apply", "tail" : "(): Tree[T]", "member" : "com.github.arturopala.tree.Tree.apply", "link" : "com\/github\/arturopala\/tree\/Tree$.html#apply[T]():com.github.arturopala.tree.Tree[T]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/arturopala\/tree\/Tree$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/arturopala\/tree\/Tree$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/arturopala\/tree\/Tree$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/arturopala\/tree\/Tree$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/arturopala\/tree\/Tree$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/arturopala\/tree\/Tree$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/arturopala\/tree\/Tree$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/arturopala\/tree\/Tree$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/arturopala\/tree\/Tree$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/arturopala\/tree\/Tree$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/arturopala\/tree\/Tree$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/arturopala\/tree\/Tree$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/arturopala\/tree\/Tree$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/arturopala\/tree\/Tree$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/arturopala\/tree\/Tree$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/arturopala\/tree\/Tree$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/arturopala\/tree\/Tree$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/arturopala\/tree\/Tree$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/arturopala\/tree\/Tree$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "com\/github\/arturopala\/tree\/Tree.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/arturopala\/tree\/Tree.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/arturopala\/tree\/Tree.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/arturopala\/tree\/Tree.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/arturopala\/tree\/Tree.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/arturopala\/tree\/Tree.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/arturopala\/tree\/Tree.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/arturopala\/tree\/Tree.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/arturopala\/tree\/Tree.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/arturopala\/tree\/Tree.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/arturopala\/tree\/Tree.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/arturopala\/tree\/Tree.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/arturopala\/tree\/Tree.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/arturopala\/tree\/Tree.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/arturopala\/tree\/Tree.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/arturopala\/tree\/Tree.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/arturopala\/tree\/Tree.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/arturopala\/tree\/Tree.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/arturopala\/tree\/Tree.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/arturopala\/tree\/Tree.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "mkString", "tail" : "(show: (T) => String, nodeSeparator: String, branchSeparator: String, branchStart: String, branchEnd: String): String", "member" : "com.github.arturopala.tree.Tree.mkString", "link" : "com\/github\/arturopala\/tree\/Tree.html#mkString(show:T=>String,nodeSeparator:String,branchSeparator:String,branchStart:String,branchEnd:String):String", "kind" : "abstract def"}, {"label" : "toTreeList", "tail" : "(): List[(Int, Tree[T])]", "member" : "com.github.arturopala.tree.Tree.toTreeList", "link" : "com\/github\/arturopala\/tree\/Tree.html#toTreeList:List[(Int,com.github.arturopala.tree.Tree[T])]", "kind" : "abstract def"}, {"label" : "toValueList", "tail" : "(): List[(Int, T)]", "member" : "com.github.arturopala.tree.Tree.toValueList", "link" : "com\/github\/arturopala\/tree\/Tree.html#toValueList:List[(Int,T)]", "kind" : "abstract def"}, {"label" : "contains", "tail" : "(path: List[T1]): Boolean", "member" : "com.github.arturopala.tree.Tree.contains", "link" : "com\/github\/arturopala\/tree\/Tree.html#contains[T1>:T](path:List[T1]):Boolean", "kind" : "abstract def"}, {"label" : "select", "tail" : "(path: List[T1]): Option[Tree[T]]", "member" : "com.github.arturopala.tree.Tree.select", "link" : "com\/github\/arturopala\/tree\/Tree.html#select[T1>:T](path:List[T1]):Option[com.github.arturopala.tree.Tree[T]]", "kind" : "abstract def"}, {"label" : "flatMap", "tail" : "(f: (T) => Tree[K])(strategy: FlatMapStrategy): Tree[K]", "member" : "com.github.arturopala.tree.Tree.flatMap", "link" : "com\/github\/arturopala\/tree\/Tree.html#flatMap[K](f:T=>com.github.arturopala.tree.Tree[K])(implicitstrategy:com.github.arturopala.tree.Tree.FlatMapStrategy):com.github.arturopala.tree.Tree[K]", "kind" : "abstract def"}, {"label" : "mapUnsafe", "tail" : "(f: (T) => K): Tree[K]", "member" : "com.github.arturopala.tree.Tree.mapUnsafe", "link" : "com\/github\/arturopala\/tree\/Tree.html#mapUnsafe[K](f:T=>K):com.github.arturopala.tree.Tree[K]", "kind" : "abstract def"}, {"label" : "map", "tail" : "(f: (T) => K): Tree[K]", "member" : "com.github.arturopala.tree.Tree.map", "link" : "com\/github\/arturopala\/tree\/Tree.html#map[K](f:T=>K):com.github.arturopala.tree.Tree[K]", "kind" : "abstract def"}, {"label" : "insert", "tail" : "(branch: List[T1]): Tree[T1]", "member" : "com.github.arturopala.tree.Tree.insert", "link" : "com\/github\/arturopala\/tree\/Tree.html#insert[T1>:T](branch:List[T1]):com.github.arturopala.tree.Tree[T1]", "kind" : "abstract def"}, {"label" : "insert", "tail" : "(subtree: Tree[T1]): Tree[T1]", "member" : "com.github.arturopala.tree.Tree.insert", "link" : "com\/github\/arturopala\/tree\/Tree.html#insert[T1>:T](subtree:com.github.arturopala.tree.Tree[T1]):com.github.arturopala.tree.Tree[T1]", "kind" : "abstract def"}, {"label" : "insert", "tail" : "(value: T1): Tree[T1]", "member" : "com.github.arturopala.tree.Tree.insert", "link" : "com\/github\/arturopala\/tree\/Tree.html#insert[T1>:T](value:T1):com.github.arturopala.tree.Tree[T1]", "kind" : "abstract def"}, {"label" : "countBranches", "tail" : "(filter: (List[T]) => Boolean): Int", "member" : "com.github.arturopala.tree.Tree.countBranches", "link" : "com\/github\/arturopala\/tree\/Tree.html#countBranches(filter:List[T]=>Boolean):Int", "kind" : "abstract def"}, {"label" : "branchStream", "tail" : "(filter: (List[T]) => Boolean): Stream[List[T]]", "member" : "com.github.arturopala.tree.Tree.branchStream", "link" : "com\/github\/arturopala\/tree\/Tree.html#branchStream(filter:List[T]=>Boolean):Stream[List[T]]", "kind" : "abstract def"}, {"label" : "branchStream", "tail" : "(): Stream[List[T]]", "member" : "com.github.arturopala.tree.Tree.branchStream", "link" : "com\/github\/arturopala\/tree\/Tree.html#branchStream:Stream[List[T]]", "kind" : "abstract def"}, {"label" : "branches", "tail" : "(filter: (List[T]) => Boolean): List[List[T]]", "member" : "com.github.arturopala.tree.Tree.branches", "link" : "com\/github\/arturopala\/tree\/Tree.html#branches(filter:List[T]=>Boolean):List[List[T]]", "kind" : "abstract def"}, {"label" : "branchesUnsafe", "tail" : "(): List[List[T]]", "member" : "com.github.arturopala.tree.Tree.branchesUnsafe", "link" : "com\/github\/arturopala\/tree\/Tree.html#branchesUnsafe:List[List[T]]", "kind" : "abstract def"}, {"label" : "branches", "tail" : "(): List[List[T]]", "member" : "com.github.arturopala.tree.Tree.branches", "link" : "com\/github\/arturopala\/tree\/Tree.html#branches():List[List[T]]", "kind" : "abstract def"}, {"label" : "trees", "tail" : "(filter: (Tree[T]) => Boolean): List[Tree[T]]", "member" : "com.github.arturopala.tree.Tree.trees", "link" : "com\/github\/arturopala\/tree\/Tree.html#trees(filter:com.github.arturopala.tree.Tree[T]=>Boolean):List[com.github.arturopala.tree.Tree[T]]", "kind" : "abstract def"}, {"label" : "treesUnsafe", "tail" : "(): List[Tree[T]]", "member" : "com.github.arturopala.tree.Tree.treesUnsafe", "link" : "com\/github\/arturopala\/tree\/Tree.html#treesUnsafe:List[com.github.arturopala.tree.Tree[T]]", "kind" : "abstract def"}, {"label" : "trees", "tail" : "(): List[Tree[T]]", "member" : "com.github.arturopala.tree.Tree.trees", "link" : "com\/github\/arturopala\/tree\/Tree.html#trees():List[com.github.arturopala.tree.Tree[T]]", "kind" : "abstract def"}, {"label" : "children", "tail" : "(): List[Tree[T]]", "member" : "com.github.arturopala.tree.Tree.children", "link" : "com\/github\/arturopala\/tree\/Tree.html#children:List[com.github.arturopala.tree.Tree[T]]", "kind" : "abstract def"}, {"label" : "nodeStream", "tail" : "(filter: (T) => Boolean): Stream[T]", "member" : "com.github.arturopala.tree.Tree.nodeStream", "link" : "com\/github\/arturopala\/tree\/Tree.html#nodeStream(filter:T=>Boolean):Stream[T]", "kind" : "abstract def"}, {"label" : "nodeStream", "tail" : "(): Stream[T]", "member" : "com.github.arturopala.tree.Tree.nodeStream", "link" : "com\/github\/arturopala\/tree\/Tree.html#nodeStream:Stream[T]", "kind" : "abstract def"}, {"label" : "nodes", "tail" : "(filter: (T) => Boolean): List[T]", "member" : "com.github.arturopala.tree.Tree.nodes", "link" : "com\/github\/arturopala\/tree\/Tree.html#nodes(filter:T=>Boolean):List[T]", "kind" : "abstract def"}, {"label" : "nodesUnsafe", "tail" : "(): List[T]", "member" : "com.github.arturopala.tree.Tree.nodesUnsafe", "link" : "com\/github\/arturopala\/tree\/Tree.html#nodesUnsafe:List[T]", "kind" : "abstract def"}, {"label" : "nodes", "tail" : "(): List[T]", "member" : "com.github.arturopala.tree.Tree.nodes", "link" : "com\/github\/arturopala\/tree\/Tree.html#nodes():List[T]", "kind" : "abstract def"}, {"label" : "isLeaf", "tail" : ": Boolean", "member" : "com.github.arturopala.tree.Tree.isLeaf", "link" : "com\/github\/arturopala\/tree\/Tree.html#isLeaf:Boolean", "kind" : "abstract val"}, {"label" : "leafsSize", "tail" : ": Int", "member" : "com.github.arturopala.tree.Tree.leafsSize", "link" : "com\/github\/arturopala\/tree\/Tree.html#leafsSize:Int", "kind" : "abstract val"}, {"label" : "size", "tail" : ": Int", "member" : "com.github.arturopala.tree.Tree.size", "link" : "com\/github\/arturopala\/tree\/Tree.html#size:Int", "kind" : "abstract val"}], "shortDescription" : "General purpose, covariant, immutable, linked tree-like data structure with rich API."}]};